-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_Loop_Xpose_Row_Outer_Loop_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    row_outbuf_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    row_outbuf_i_ce0 : OUT STD_LOGIC;
    row_outbuf_i_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    col_inbuf_ce0 : OUT STD_LOGIC;
    col_inbuf_we0 : OUT STD_LOGIC;
    col_inbuf_d0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    col_inbuf_q0 : IN STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of dct_Loop_Xpose_Row_Outer_Loop_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_pp0_stg1_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st5_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_F : STD_LOGIC_VECTOR (6 downto 0) := "0001111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_22 : BOOLEAN;
    signal indvar_flatten_reg_81 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_0_i_reg_92 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_i_reg_103 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_334 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_56 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal indvar_flatten_next_fu_120_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_next_reg_338 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_mid2_v_fu_146_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_mid2_v_reg_343 : STD_LOGIC_VECTOR (3 downto 0);
    signal col_inbuf_addr_reg_353 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_27_fu_186_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_27_reg_358 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_fu_190_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_363 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_203_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_reg_368 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_2 : STD_LOGIC;
    signal ap_sig_86 : BOOLEAN;
    signal tmp_28_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_373 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_215_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_reg_380 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_40_fu_241_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_40_reg_386 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_sig_99 : BOOLEAN;
    signal indvar_flatten_phi_fu_85_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_0_i_phi_fu_96_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_i_phi_fu_107_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_cast_fu_181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_mid2_fu_154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond3_i2_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_126_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_i_mid2_fu_138_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_163_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_cast_fu_171_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_mid2_cast_fu_159_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_175_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_196_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_32_fu_223_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_fu_229_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_219_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_37_fu_237_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_30_fu_247_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_fu_250_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_fu_256_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_fu_262_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_41_fu_276_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_38_fu_268_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_39_fu_272_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_43_fu_291_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_44_fu_297_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_demorgan_fu_303_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_45_fu_309_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_42_fu_285_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_46_fu_315_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_47_fu_321_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_3 : STD_LOGIC;
    signal ap_sig_271 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_3)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_114_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_99))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond_flatten_reg_334 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_99)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not((exitcond_flatten_reg_334 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_i_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_334 = ap_const_lv1_0))) then 
                i_1_i_reg_103 <= i_reg_363;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_99))) then 
                i_1_i_reg_103 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_81_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_334 = ap_const_lv1_0))) then 
                indvar_flatten_reg_81 <= indvar_flatten_next_reg_338;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_99))) then 
                indvar_flatten_reg_81 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_334 = ap_const_lv1_0))) then 
                j_0_i_reg_92 <= tmp_mid2_v_reg_343;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_99))) then 
                j_0_i_reg_92 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_114_p2 = ap_const_lv1_0))) then
                col_inbuf_addr_reg_353 <= tmp_mid2_fu_154_p1(3 - 1 downto 0);
                tmp_27_reg_358 <= tmp_27_fu_186_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                exitcond_flatten_reg_334 <= exitcond_flatten_fu_114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_114_p2 = ap_const_lv1_0))) then
                i_reg_363 <= i_fu_190_p2;
                tmp_mid2_v_reg_343 <= tmp_mid2_v_fu_146_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                indvar_flatten_next_reg_338 <= indvar_flatten_next_fu_120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond_flatten_reg_334 = ap_const_lv1_0))) then
                tmp_28_reg_373 <= tmp_28_fu_209_p2;
                    tmp_29_reg_380(6 downto 4) <= tmp_29_fu_215_p1(6 downto 4);
                tmp_40_reg_386 <= tmp_40_fu_241_p2;
                    tmp_4_reg_368(6 downto 4) <= tmp_4_fu_203_p2(6 downto 4);
            end if;
        end if;
    end process;
    tmp_4_reg_368(3 downto 0) <= "1111";
    tmp_29_reg_380(3 downto 0) <= "0000";
    tmp_29_reg_380(7) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond_flatten_fu_114_p2, ap_reg_ppiten_pp0_it0, ap_sig_99)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_99)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_114_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_3;
                end if;
            when ap_ST_pp0_stg1_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
            when ap_ST_st5_fsm_3 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st5_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st5_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_271_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_271 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_56_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_56 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_86_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_86 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_99_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_99 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_56)
    begin
        if (ap_sig_56) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg1_fsm_2_assign_proc : process(ap_sig_86)
    begin
        if (ap_sig_86) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_22)
    begin
        if (ap_sig_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_3_assign_proc : process(ap_sig_271)
    begin
        if (ap_sig_271) then 
            ap_sig_cseq_ST_st5_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_address0 <= col_inbuf_addr_reg_353;

    col_inbuf_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)))) then 
            col_inbuf_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_d0 <= (tmp_46_fu_315_p2 or tmp_47_fu_321_p2);

    col_inbuf_we0_assign_proc : process(exitcond_flatten_reg_334, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_334 = ap_const_lv1_0)))) then 
            col_inbuf_we0 <= ap_const_logic_1;
        else 
            col_inbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond3_i2_fu_132_p2 <= "1" when (i_1_i_phi_fu_107_p4 = ap_const_lv4_8) else "0";
    exitcond_flatten_fu_114_p2 <= "1" when (indvar_flatten_phi_fu_85_p4 = ap_const_lv7_40) else "0";
    i_1_i_mid2_fu_138_p3 <= 
        ap_const_lv4_0 when (exitcond3_i2_fu_132_p2(0) = '1') else 
        i_1_i_phi_fu_107_p4;

    i_1_i_phi_fu_107_p4_assign_proc : process(i_1_i_reg_103, exitcond_flatten_reg_334, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, i_reg_363)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_334 = ap_const_lv1_0))) then 
            i_1_i_phi_fu_107_p4 <= i_reg_363;
        else 
            i_1_i_phi_fu_107_p4 <= i_1_i_reg_103;
        end if; 
    end process;

    i_fu_190_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(i_1_i_mid2_fu_138_p3));
    indvar_flatten_next_fu_120_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_85_p4) + unsigned(ap_const_lv7_1));

    indvar_flatten_phi_fu_85_p4_assign_proc : process(indvar_flatten_reg_81, exitcond_flatten_reg_334, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, indvar_flatten_next_reg_338)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_334 = ap_const_lv1_0))) then 
            indvar_flatten_phi_fu_85_p4 <= indvar_flatten_next_reg_338;
        else 
            indvar_flatten_phi_fu_85_p4 <= indvar_flatten_reg_81;
        end if; 
    end process;


    j_0_i_phi_fu_96_p4_assign_proc : process(j_0_i_reg_92, exitcond_flatten_reg_334, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, tmp_mid2_v_reg_343)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_334 = ap_const_lv1_0))) then 
            j_0_i_phi_fu_96_p4 <= tmp_mid2_v_reg_343;
        else 
            j_0_i_phi_fu_96_p4 <= j_0_i_reg_92;
        end if; 
    end process;

    j_fu_126_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(j_0_i_phi_fu_96_p4));
    p_demorgan_fu_303_p2 <= (tmp_43_fu_291_p2 and tmp_44_fu_297_p2);
    row_outbuf_i_address0 <= tmp_10_cast_fu_181_p1(6 - 1 downto 0);

    row_outbuf_i_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            row_outbuf_i_ce0 <= ap_const_logic_1;
        else 
            row_outbuf_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_cast_fu_181_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_175_p2),64));
    tmp_27_fu_186_p1 <= i_1_i_mid2_fu_138_p3(3 - 1 downto 0);
    tmp_28_fu_209_p2 <= "1" when (unsigned(tmp_3_fu_196_p3) > unsigned(tmp_4_fu_203_p2)) else "0";
    tmp_29_fu_215_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_196_p3),8));
    tmp_30_fu_247_p1 <= std_logic_vector(resize(unsigned(tmp_4_reg_368),8));
    tmp_31_fu_219_p1 <= std_logic_vector(resize(unsigned(row_outbuf_i_q0),128));
    tmp_32_fu_223_p2 <= (tmp_29_fu_215_p1 xor ap_const_lv8_7F);
    tmp_33_fu_250_p3 <= 
        tmp_29_reg_380 when (tmp_28_reg_373(0) = '1') else 
        tmp_30_fu_247_p1;
    tmp_34_fu_256_p3 <= 
        tmp_30_fu_247_p1 when (tmp_28_reg_373(0) = '1') else 
        tmp_29_reg_380;
    tmp_35_fu_229_p3 <= 
        tmp_32_fu_223_p2 when (tmp_28_fu_209_p2(0) = '1') else 
        tmp_29_fu_215_p1;
    tmp_36_fu_262_p2 <= (tmp_33_fu_250_p3 xor ap_const_lv8_7F);
    tmp_37_fu_237_p1 <= std_logic_vector(resize(unsigned(tmp_35_fu_229_p3),128));
    tmp_38_fu_268_p1 <= std_logic_vector(resize(unsigned(tmp_34_fu_256_p3),128));
    tmp_39_fu_272_p1 <= std_logic_vector(resize(unsigned(tmp_36_fu_262_p2),128));
    tmp_3_fu_196_p3 <= (tmp_27_reg_358 & ap_const_lv4_0);
    tmp_40_fu_241_p2 <= std_logic_vector(shift_left(unsigned(tmp_31_fu_219_p1),to_integer(unsigned('0' & tmp_37_fu_237_p1(31-1 downto 0)))));
    
    tmp_41_fu_276_p4_proc : process(tmp_40_reg_386)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_41_fu_276_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_40_reg_386;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_41_fu_276_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_41_fu_276_p4_i) := tmp_40_reg_386(128-1-tmp_41_fu_276_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_41_fu_276_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_42_fu_285_p3 <= 
        tmp_41_fu_276_p4 when (tmp_28_reg_373(0) = '1') else 
        tmp_40_reg_386;
    tmp_43_fu_291_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & tmp_38_fu_268_p1(31-1 downto 0)))));
    tmp_44_fu_297_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_1),to_integer(unsigned('0' & tmp_39_fu_272_p1(31-1 downto 0)))));
    tmp_45_fu_309_p2 <= (p_demorgan_fu_303_p2 xor ap_const_lv128_lc_1);
    tmp_46_fu_315_p2 <= (col_inbuf_q0 and tmp_45_fu_309_p2);
    tmp_47_fu_321_p2 <= (tmp_42_fu_285_p3 and p_demorgan_fu_303_p2);
    tmp_4_fu_203_p2 <= (tmp_3_fu_196_p3 or ap_const_lv7_F);
    tmp_9_cast_fu_171_p1 <= std_logic_vector(resize(unsigned(tmp_fu_163_p3),8));
    tmp_fu_163_p3 <= (i_1_i_mid2_fu_138_p3 & ap_const_lv3_0);
    tmp_mid2_cast_fu_159_p1 <= std_logic_vector(resize(unsigned(tmp_mid2_v_fu_146_p3),8));
    tmp_mid2_fu_154_p1 <= std_logic_vector(resize(unsigned(tmp_mid2_v_fu_146_p3),64));
    tmp_mid2_v_fu_146_p3 <= 
        j_fu_126_p2 when (exitcond3_i2_fu_132_p2(0) = '1') else 
        j_0_i_phi_fu_96_p4;
    tmp_s_fu_175_p2 <= std_logic_vector(unsigned(tmp_9_cast_fu_171_p1) + unsigned(tmp_mid2_cast_fu_159_p1));
end behav;
