// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dct_read_data_HH_
#define _dct_read_data_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct dct_read_data : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<6> > input_r_address0;
    sc_out< sc_logic > input_r_ce0;
    sc_in< sc_lv<16> > input_r_q0;
    sc_out< sc_lv<3> > buf_r_address0;
    sc_out< sc_logic > buf_r_ce0;
    sc_out< sc_logic > buf_r_we0;
    sc_out< sc_lv<128> > buf_r_d0;
    sc_in< sc_lv<128> > buf_r_q0;


    // Module declarations
    dct_read_data(sc_module_name name);
    SC_HAS_PROCESS(dct_read_data);

    ~dct_read_data();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_22;
    sc_signal< sc_lv<7> > indvar_flatten_reg_81;
    sc_signal< sc_lv<4> > r_reg_92;
    sc_signal< sc_lv<4> > c_reg_103;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_114_p2;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_334;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_1;
    sc_signal< bool > ap_sig_56;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_lv<7> > indvar_flatten_next_fu_120_p2;
    sc_signal< sc_lv<7> > indvar_flatten_next_reg_338;
    sc_signal< sc_lv<4> > tmp_mid2_v_v_fu_146_p3;
    sc_signal< sc_lv<4> > tmp_mid2_v_v_reg_343;
    sc_signal< sc_lv<3> > buf_addr_reg_353;
    sc_signal< sc_lv<3> > tmp_4_fu_186_p1;
    sc_signal< sc_lv<3> > tmp_4_reg_358;
    sc_signal< sc_lv<4> > c_2_fu_190_p2;
    sc_signal< sc_lv<4> > c_2_reg_363;
    sc_signal< sc_lv<7> > tmp_3_fu_203_p2;
    sc_signal< sc_lv<7> > tmp_3_reg_368;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg1_fsm_2;
    sc_signal< bool > ap_sig_86;
    sc_signal< sc_lv<1> > tmp_5_fu_209_p2;
    sc_signal< sc_lv<1> > tmp_5_reg_373;
    sc_signal< sc_lv<8> > tmp_6_fu_215_p1;
    sc_signal< sc_lv<8> > tmp_6_reg_380;
    sc_signal< sc_lv<128> > tmp_18_fu_241_p2;
    sc_signal< sc_lv<128> > tmp_18_reg_386;
    sc_signal< bool > ap_sig_99;
    sc_signal< sc_lv<7> > indvar_flatten_phi_fu_85_p4;
    sc_signal< sc_lv<4> > r_phi_fu_96_p4;
    sc_signal< sc_lv<4> > c_phi_fu_107_p4;
    sc_signal< sc_lv<64> > tmp_s_fu_181_p1;
    sc_signal< sc_lv<64> > tmp_7_mid2_fu_166_p1;
    sc_signal< sc_lv<1> > exitcond5_fu_132_p2;
    sc_signal< sc_lv<4> > r_2_fu_126_p2;
    sc_signal< sc_lv<3> > tmp_fu_154_p1;
    sc_signal< sc_lv<4> > c_mid2_fu_138_p3;
    sc_signal< sc_lv<6> > c_cast2_fu_171_p1;
    sc_signal< sc_lv<6> > tmp_mid2_fu_158_p3;
    sc_signal< sc_lv<6> > tmp_9_fu_175_p2;
    sc_signal< sc_lv<7> > tmp_2_fu_196_p3;
    sc_signal< sc_lv<8> > tmp_10_fu_223_p2;
    sc_signal< sc_lv<8> > tmp_13_fu_229_p3;
    sc_signal< sc_lv<128> > tmp_8_fu_219_p1;
    sc_signal< sc_lv<128> > tmp_15_fu_237_p1;
    sc_signal< sc_lv<8> > tmp_7_fu_247_p1;
    sc_signal< sc_lv<8> > tmp_11_fu_250_p3;
    sc_signal< sc_lv<8> > tmp_12_fu_256_p3;
    sc_signal< sc_lv<8> > tmp_14_fu_262_p2;
    sc_signal< sc_lv<128> > tmp_19_fu_276_p4;
    sc_signal< sc_lv<128> > tmp_16_fu_268_p1;
    sc_signal< sc_lv<128> > tmp_17_fu_272_p1;
    sc_signal< sc_lv<128> > tmp_21_fu_291_p2;
    sc_signal< sc_lv<128> > tmp_22_fu_297_p2;
    sc_signal< sc_lv<128> > p_demorgan_fu_303_p2;
    sc_signal< sc_lv<128> > tmp_23_fu_309_p2;
    sc_signal< sc_lv<128> > tmp_20_fu_285_p3;
    sc_signal< sc_lv<128> > tmp_24_fu_315_p2;
    sc_signal< sc_lv<128> > tmp_25_fu_321_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_3;
    sc_signal< bool > ap_sig_271;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_st1_fsm_0;
    static const sc_lv<4> ap_ST_pp0_stg0_fsm_1;
    static const sc_lv<4> ap_ST_pp0_stg1_fsm_2;
    static const sc_lv<4> ap_ST_st5_fsm_3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<7> ap_const_lv7_40;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<7> ap_const_lv7_F;
    static const sc_lv<8> ap_const_lv8_7F;
    static const sc_lv<32> ap_const_lv32_7F;
    static const sc_lv<128> ap_const_lv128_lc_1;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_22();
    void thread_ap_sig_271();
    void thread_ap_sig_56();
    void thread_ap_sig_86();
    void thread_ap_sig_99();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_1();
    void thread_ap_sig_cseq_ST_pp0_stg1_fsm_2();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st5_fsm_3();
    void thread_buf_r_address0();
    void thread_buf_r_ce0();
    void thread_buf_r_d0();
    void thread_buf_r_we0();
    void thread_c_2_fu_190_p2();
    void thread_c_cast2_fu_171_p1();
    void thread_c_mid2_fu_138_p3();
    void thread_c_phi_fu_107_p4();
    void thread_exitcond5_fu_132_p2();
    void thread_exitcond_flatten_fu_114_p2();
    void thread_indvar_flatten_next_fu_120_p2();
    void thread_indvar_flatten_phi_fu_85_p4();
    void thread_input_r_address0();
    void thread_input_r_ce0();
    void thread_p_demorgan_fu_303_p2();
    void thread_r_2_fu_126_p2();
    void thread_r_phi_fu_96_p4();
    void thread_tmp_10_fu_223_p2();
    void thread_tmp_11_fu_250_p3();
    void thread_tmp_12_fu_256_p3();
    void thread_tmp_13_fu_229_p3();
    void thread_tmp_14_fu_262_p2();
    void thread_tmp_15_fu_237_p1();
    void thread_tmp_16_fu_268_p1();
    void thread_tmp_17_fu_272_p1();
    void thread_tmp_18_fu_241_p2();
    void thread_tmp_19_fu_276_p4();
    void thread_tmp_20_fu_285_p3();
    void thread_tmp_21_fu_291_p2();
    void thread_tmp_22_fu_297_p2();
    void thread_tmp_23_fu_309_p2();
    void thread_tmp_24_fu_315_p2();
    void thread_tmp_25_fu_321_p2();
    void thread_tmp_2_fu_196_p3();
    void thread_tmp_3_fu_203_p2();
    void thread_tmp_4_fu_186_p1();
    void thread_tmp_5_fu_209_p2();
    void thread_tmp_6_fu_215_p1();
    void thread_tmp_7_fu_247_p1();
    void thread_tmp_7_mid2_fu_166_p1();
    void thread_tmp_8_fu_219_p1();
    void thread_tmp_9_fu_175_p2();
    void thread_tmp_fu_154_p1();
    void thread_tmp_mid2_fu_158_p3();
    void thread_tmp_mid2_v_v_fu_146_p3();
    void thread_tmp_s_fu_181_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
