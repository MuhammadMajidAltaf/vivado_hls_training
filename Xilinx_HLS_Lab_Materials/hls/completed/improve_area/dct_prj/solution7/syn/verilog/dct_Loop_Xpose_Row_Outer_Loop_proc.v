// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dct_Loop_Xpose_Row_Outer_Loop_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        row_outbuf_i_address0,
        row_outbuf_i_ce0,
        row_outbuf_i_q0,
        col_inbuf_address0,
        col_inbuf_ce0,
        col_inbuf_we0,
        col_inbuf_d0,
        col_inbuf_q0
);

parameter    ap_ST_st1_fsm_0 = 4'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 4'b10;
parameter    ap_ST_pp0_stg1_fsm_2 = 4'b100;
parameter    ap_ST_st5_fsm_3 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv7_40 = 7'b1000000;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv7_F = 7'b1111;
parameter    ap_const_lv8_7F = 8'b1111111;
parameter    ap_const_lv32_7F = 32'b1111111;
parameter    ap_const_lv128_lc_1 = 128'b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;
parameter    ap_const_lv32_3 = 32'b11;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [5:0] row_outbuf_i_address0;
output   row_outbuf_i_ce0;
input  [15:0] row_outbuf_i_q0;
output  [2:0] col_inbuf_address0;
output   col_inbuf_ce0;
output   col_inbuf_we0;
output  [127:0] col_inbuf_d0;
input  [127:0] col_inbuf_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg row_outbuf_i_ce0;
reg col_inbuf_ce0;
reg col_inbuf_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_22;
reg   [6:0] indvar_flatten_reg_81;
reg   [3:0] j_0_i_reg_92;
reg   [3:0] i_1_i_reg_103;
wire   [0:0] exitcond_flatten_fu_114_p2;
reg   [0:0] exitcond_flatten_reg_334;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_56;
reg    ap_reg_ppiten_pp0_it0;
reg    ap_reg_ppiten_pp0_it1;
wire   [6:0] indvar_flatten_next_fu_120_p2;
reg   [6:0] indvar_flatten_next_reg_338;
wire   [3:0] tmp_mid2_v_fu_146_p3;
reg   [3:0] tmp_mid2_v_reg_343;
reg   [2:0] col_inbuf_addr_reg_353;
wire   [2:0] tmp_27_fu_186_p1;
reg   [2:0] tmp_27_reg_358;
wire   [3:0] i_fu_190_p2;
reg   [3:0] i_reg_363;
wire   [6:0] tmp_4_fu_203_p2;
reg   [6:0] tmp_4_reg_368;
reg    ap_sig_cseq_ST_pp0_stg1_fsm_2;
reg    ap_sig_86;
wire   [0:0] tmp_28_fu_209_p2;
reg   [0:0] tmp_28_reg_373;
wire   [7:0] tmp_29_fu_215_p1;
reg   [7:0] tmp_29_reg_380;
wire   [127:0] tmp_40_fu_241_p2;
reg   [127:0] tmp_40_reg_386;
reg    ap_sig_99;
reg   [6:0] indvar_flatten_phi_fu_85_p4;
reg   [3:0] j_0_i_phi_fu_96_p4;
reg   [3:0] i_1_i_phi_fu_107_p4;
wire   [63:0] tmp_10_cast_fu_181_p1;
wire   [63:0] tmp_mid2_fu_154_p1;
wire   [0:0] exitcond3_i2_fu_132_p2;
wire   [3:0] j_fu_126_p2;
wire   [3:0] i_1_i_mid2_fu_138_p3;
wire   [6:0] tmp_fu_163_p3;
wire   [7:0] tmp_9_cast_fu_171_p1;
wire   [7:0] tmp_mid2_cast_fu_159_p1;
wire   [7:0] tmp_s_fu_175_p2;
wire   [6:0] tmp_3_fu_196_p3;
wire   [7:0] tmp_32_fu_223_p2;
wire   [7:0] tmp_35_fu_229_p3;
wire   [127:0] tmp_31_fu_219_p1;
wire   [127:0] tmp_37_fu_237_p1;
wire   [7:0] tmp_30_fu_247_p1;
wire   [7:0] tmp_33_fu_250_p3;
wire   [7:0] tmp_34_fu_256_p3;
wire   [7:0] tmp_36_fu_262_p2;
reg   [127:0] tmp_41_fu_276_p4;
wire   [127:0] tmp_38_fu_268_p1;
wire   [127:0] tmp_39_fu_272_p1;
wire   [127:0] tmp_43_fu_291_p2;
wire   [127:0] tmp_44_fu_297_p2;
wire   [127:0] p_demorgan_fu_303_p2;
wire   [127:0] tmp_45_fu_309_p2;
wire   [127:0] tmp_42_fu_285_p3;
wire   [127:0] tmp_46_fu_315_p2;
wire   [127:0] tmp_47_fu_321_p2;
reg    ap_sig_cseq_ST_st5_fsm_3;
reg    ap_sig_271;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'b1;
#0 ap_reg_ppiten_pp0_it0 = 1'b0;
#0 ap_reg_ppiten_pp0_it1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_3)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_flatten_fu_114_p2 == 1'b0))) begin
            ap_reg_ppiten_pp0_it0 <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_99)) begin
            ap_reg_ppiten_pp0_it0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg1_fsm_2) & (exitcond_flatten_reg_334 == 1'b0))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b1;
        end else if ((((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_99) | ((1'b1 == ap_sig_cseq_ST_pp0_stg1_fsm_2) & ~(exitcond_flatten_reg_334 == 1'b0)))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_334 == 1'b0))) begin
        i_1_i_reg_103 <= i_reg_363;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_99)) begin
        i_1_i_reg_103 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_334 == 1'b0))) begin
        indvar_flatten_reg_81 <= indvar_flatten_next_reg_338;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_99)) begin
        indvar_flatten_reg_81 <= ap_const_lv7_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_334 == 1'b0))) begin
        j_0_i_reg_92 <= tmp_mid2_v_reg_343;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_99)) begin
        j_0_i_reg_92 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten_fu_114_p2 == 1'b0))) begin
        col_inbuf_addr_reg_353 <= tmp_mid2_fu_154_p1;
        tmp_27_reg_358 <= tmp_27_fu_186_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1)) begin
        exitcond_flatten_reg_334 <= exitcond_flatten_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_114_p2 == 1'b0))) begin
        i_reg_363 <= i_fu_190_p2;
        tmp_mid2_v_reg_343 <= tmp_mid2_v_fu_146_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0))) begin
        indvar_flatten_next_reg_338 <= indvar_flatten_next_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg1_fsm_2) & (exitcond_flatten_reg_334 == 1'b0))) begin
        tmp_28_reg_373 <= tmp_28_fu_209_p2;
        tmp_29_reg_380[6 : 4] <= tmp_29_fu_215_p1[6 : 4];
        tmp_40_reg_386 <= tmp_40_fu_241_p2;
        tmp_4_reg_368[6 : 4] <= tmp_4_fu_203_p2[6 : 4];
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | (1'b1 == ap_sig_cseq_ST_st5_fsm_3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_56) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_86) begin
        ap_sig_cseq_ST_pp0_stg1_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg1_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_271) begin
        ap_sig_cseq_ST_st5_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1)) | ((1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)))) begin
        col_inbuf_ce0 = 1'b1;
    end else begin
        col_inbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_334 == 1'b0))) begin
        col_inbuf_we0 = 1'b1;
    end else begin
        col_inbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_334 == 1'b0))) begin
        i_1_i_phi_fu_107_p4 = i_reg_363;
    end else begin
        i_1_i_phi_fu_107_p4 = i_1_i_reg_103;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_334 == 1'b0))) begin
        indvar_flatten_phi_fu_85_p4 = indvar_flatten_next_reg_338;
    end else begin
        indvar_flatten_phi_fu_85_p4 = indvar_flatten_reg_81;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_334 == 1'b0))) begin
        j_0_i_phi_fu_96_p4 = tmp_mid2_v_reg_343;
    end else begin
        j_0_i_phi_fu_96_p4 = j_0_i_reg_92;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0))) begin
        row_outbuf_i_ce0 = 1'b1;
    end else begin
        row_outbuf_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~ap_sig_99) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : begin
            if (~((1'b1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_flatten_fu_114_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_pp0_stg1_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_3;
            end
        end
        ap_ST_pp0_stg1_fsm_2 : begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
        end
        ap_ST_st5_fsm_3 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_22 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_271 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_56 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_86 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_99 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign col_inbuf_address0 = col_inbuf_addr_reg_353;

assign col_inbuf_d0 = (tmp_46_fu_315_p2 | tmp_47_fu_321_p2);

assign exitcond3_i2_fu_132_p2 = ((i_1_i_phi_fu_107_p4 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_114_p2 = ((indvar_flatten_phi_fu_85_p4 == ap_const_lv7_40) ? 1'b1 : 1'b0);

assign i_1_i_mid2_fu_138_p3 = ((exitcond3_i2_fu_132_p2[0:0] === 1'b1) ? ap_const_lv4_0 : i_1_i_phi_fu_107_p4);

assign i_fu_190_p2 = (ap_const_lv4_1 + i_1_i_mid2_fu_138_p3);

assign indvar_flatten_next_fu_120_p2 = (indvar_flatten_phi_fu_85_p4 + ap_const_lv7_1);

assign j_fu_126_p2 = (ap_const_lv4_1 + j_0_i_phi_fu_96_p4);

assign p_demorgan_fu_303_p2 = (tmp_43_fu_291_p2 & tmp_44_fu_297_p2);

assign row_outbuf_i_address0 = tmp_10_cast_fu_181_p1;

assign tmp_10_cast_fu_181_p1 = tmp_s_fu_175_p2;

assign tmp_27_fu_186_p1 = i_1_i_mid2_fu_138_p3[2:0];

assign tmp_28_fu_209_p2 = ((tmp_3_fu_196_p3 > tmp_4_fu_203_p2) ? 1'b1 : 1'b0);

assign tmp_29_fu_215_p1 = tmp_3_fu_196_p3;

assign tmp_30_fu_247_p1 = tmp_4_reg_368;

assign tmp_31_fu_219_p1 = row_outbuf_i_q0;

assign tmp_32_fu_223_p2 = (tmp_29_fu_215_p1 ^ ap_const_lv8_7F);

assign tmp_33_fu_250_p3 = ((tmp_28_reg_373[0:0] === 1'b1) ? tmp_29_reg_380 : tmp_30_fu_247_p1);

assign tmp_34_fu_256_p3 = ((tmp_28_reg_373[0:0] === 1'b1) ? tmp_30_fu_247_p1 : tmp_29_reg_380);

assign tmp_35_fu_229_p3 = ((tmp_28_fu_209_p2[0:0] === 1'b1) ? tmp_32_fu_223_p2 : tmp_29_fu_215_p1);

assign tmp_36_fu_262_p2 = (tmp_33_fu_250_p3 ^ ap_const_lv8_7F);

assign tmp_37_fu_237_p1 = tmp_35_fu_229_p3;

assign tmp_38_fu_268_p1 = tmp_34_fu_256_p3;

assign tmp_39_fu_272_p1 = tmp_36_fu_262_p2;

assign tmp_3_fu_196_p3 = {{tmp_27_reg_358}, {ap_const_lv4_0}};

assign tmp_40_fu_241_p2 = tmp_31_fu_219_p1 << tmp_37_fu_237_p1;

integer ap_tvar_int_0;

always @ (tmp_40_reg_386) begin
    for (ap_tvar_int_0 = 128 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > ap_const_lv32_7F - ap_const_lv32_0) begin
            tmp_41_fu_276_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_41_fu_276_p4[ap_tvar_int_0] = tmp_40_reg_386[ap_const_lv32_7F - ap_tvar_int_0];
        end
    end
end

assign tmp_42_fu_285_p3 = ((tmp_28_reg_373[0:0] === 1'b1) ? tmp_41_fu_276_p4 : tmp_40_reg_386);

assign tmp_43_fu_291_p2 = ap_const_lv128_lc_1 << tmp_38_fu_268_p1;

assign tmp_44_fu_297_p2 = ap_const_lv128_lc_1 >> tmp_39_fu_272_p1;

assign tmp_45_fu_309_p2 = (p_demorgan_fu_303_p2 ^ ap_const_lv128_lc_1);

assign tmp_46_fu_315_p2 = (col_inbuf_q0 & tmp_45_fu_309_p2);

assign tmp_47_fu_321_p2 = (tmp_42_fu_285_p3 & p_demorgan_fu_303_p2);

assign tmp_4_fu_203_p2 = (tmp_3_fu_196_p3 | ap_const_lv7_F);

assign tmp_9_cast_fu_171_p1 = tmp_fu_163_p3;

assign tmp_fu_163_p3 = {{i_1_i_mid2_fu_138_p3}, {ap_const_lv3_0}};

assign tmp_mid2_cast_fu_159_p1 = tmp_mid2_v_fu_146_p3;

assign tmp_mid2_fu_154_p1 = tmp_mid2_v_fu_146_p3;

assign tmp_mid2_v_fu_146_p3 = ((exitcond3_i2_fu_132_p2[0:0] === 1'b1) ? j_fu_126_p2 : j_0_i_phi_fu_96_p4);

assign tmp_s_fu_175_p2 = (tmp_9_cast_fu_171_p1 + tmp_mid2_cast_fu_159_p1);

always @ (posedge ap_clk) begin
    tmp_4_reg_368[3:0] <= 4'b1111;
    tmp_29_reg_380[3:0] <= 4'b0000;
    tmp_29_reg_380[7] <= 1'b0;
end

endmodule //dct_Loop_Xpose_Row_Outer_Loop_proc
