// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dct_write_data (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        buf_r_address0,
        buf_r_ce0,
        buf_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b10;
parameter    ap_ST_st4_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv7_40 = 7'b1000000;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_2 = 32'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [5:0] buf_r_address0;
output   buf_r_ce0;
input  [15:0] buf_r_q0;
output  [5:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg buf_r_ce0;
reg output_r_ce0;
reg output_r_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_21;
reg   [6:0] indvar_flatten_reg_73;
reg   [3:0] r_reg_84;
reg   [3:0] c_reg_95;
wire   [0:0] exitcond_flatten_fu_106_p2;
reg   [0:0] exitcond_flatten_reg_205;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_54;
reg    ap_reg_ppiten_pp0_it0;
reg    ap_reg_ppiten_pp0_it1;
wire   [6:0] indvar_flatten_next_fu_112_p2;
wire   [3:0] tmp_mid2_v_fu_138_p3;
reg   [3:0] tmp_mid2_v_reg_214;
wire   [5:0] tmp_4_fu_189_p2;
reg   [5:0] tmp_4_reg_224;
wire   [3:0] c_1_fu_195_p2;
reg    ap_sig_78;
reg   [3:0] r_phi_fu_88_p4;
wire   [63:0] tmp_7_cast_fu_184_p1;
wire   [63:0] tmp_5_fu_201_p1;
wire   [0:0] exitcond2_fu_124_p2;
wire   [3:0] r_1_fu_118_p2;
wire   [6:0] tmp_fu_146_p3;
wire   [2:0] tmp_1_fu_158_p1;
wire   [3:0] c_mid2_fu_130_p3;
wire   [7:0] tmp_1_cast_fu_154_p1;
wire   [7:0] tmp_3_cast_fu_174_p1;
wire   [7:0] tmp_7_fu_178_p2;
wire   [5:0] c_cast6_fu_170_p1;
wire   [5:0] tmp_1_mid2_fu_162_p3;
reg    ap_sig_cseq_ST_st4_fsm_2;
reg    ap_sig_163;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'b1;
#0 ap_reg_ppiten_pp0_it0 = 1'b0;
#0 ap_reg_ppiten_pp0_it1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_sig_cseq_ST_st4_fsm_2)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_flatten_fu_106_p2 == 1'b0))) begin
            ap_reg_ppiten_pp0_it0 <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_78)) begin
            ap_reg_ppiten_pp0_it0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten_fu_106_p2 == 1'b0))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b1;
        end else if ((((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_78) | ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_flatten_fu_106_p2 == 1'b0)))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_106_p2 == 1'b0))) begin
        c_reg_95 <= c_1_fu_195_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_78)) begin
        c_reg_95 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_106_p2 == 1'b0))) begin
        indvar_flatten_reg_73 <= indvar_flatten_next_fu_112_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_78)) begin
        indvar_flatten_reg_73 <= ap_const_lv7_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_205 == 1'b0))) begin
        r_reg_84 <= tmp_mid2_v_reg_214;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_78)) begin
        r_reg_84 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1)) begin
        exitcond_flatten_reg_205 <= exitcond_flatten_fu_106_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten_fu_106_p2 == 1'b0))) begin
        tmp_4_reg_224 <= tmp_4_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_106_p2 == 1'b0))) begin
        tmp_mid2_v_reg_214 <= tmp_mid2_v_fu_138_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | (1'b1 == ap_sig_cseq_ST_st4_fsm_2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_54) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_163) begin
        ap_sig_cseq_ST_st4_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0))) begin
        buf_r_ce0 = 1'b1;
    end else begin
        buf_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_205 == 1'b0))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_205 == 1'b0))) begin
        r_phi_fu_88_p4 = tmp_mid2_v_reg_214;
    end else begin
        r_phi_fu_88_p4 = r_reg_84;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~ap_sig_78) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : begin
            if (~((1'b1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_flatten_fu_106_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_2;
            end
        end
        ap_ST_st4_fsm_2 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_163 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_21 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_54 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_78 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign buf_r_address0 = tmp_7_cast_fu_184_p1;

assign c_1_fu_195_p2 = (ap_const_lv4_1 + c_mid2_fu_130_p3);

assign c_cast6_fu_170_p1 = c_mid2_fu_130_p3;

assign c_mid2_fu_130_p3 = ((exitcond2_fu_124_p2[0:0] === 1'b1) ? ap_const_lv4_0 : c_reg_95);

assign exitcond2_fu_124_p2 = ((c_reg_95 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_106_p2 = ((indvar_flatten_reg_73 == ap_const_lv7_40) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_112_p2 = (indvar_flatten_reg_73 + ap_const_lv7_1);

assign output_r_address0 = tmp_5_fu_201_p1;

assign output_r_d0 = buf_r_q0;

assign r_1_fu_118_p2 = (ap_const_lv4_1 + r_phi_fu_88_p4);

assign tmp_1_cast_fu_154_p1 = tmp_fu_146_p3;

assign tmp_1_fu_158_p1 = tmp_mid2_v_fu_138_p3[2:0];

assign tmp_1_mid2_fu_162_p3 = {{tmp_1_fu_158_p1}, {ap_const_lv3_0}};

assign tmp_3_cast_fu_174_p1 = c_mid2_fu_130_p3;

assign tmp_4_fu_189_p2 = (c_cast6_fu_170_p1 + tmp_1_mid2_fu_162_p3);

assign tmp_5_fu_201_p1 = tmp_4_reg_224;

assign tmp_7_cast_fu_184_p1 = tmp_7_fu_178_p2;

assign tmp_7_fu_178_p2 = (tmp_1_cast_fu_154_p1 + tmp_3_cast_fu_174_p1);

assign tmp_fu_146_p3 = {{tmp_mid2_v_fu_138_p3}, {ap_const_lv3_0}};

assign tmp_mid2_v_fu_138_p3 = ((exitcond2_fu_124_p2[0:0] === 1'b1) ? r_1_fu_118_p2 : r_phi_fu_88_p4);

endmodule //dct_write_data
