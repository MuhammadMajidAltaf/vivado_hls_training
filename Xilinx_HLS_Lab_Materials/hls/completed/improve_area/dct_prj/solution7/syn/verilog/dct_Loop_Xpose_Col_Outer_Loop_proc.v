// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dct_Loop_Xpose_Col_Outer_Loop_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        col_outbuf_i_address0,
        col_outbuf_i_ce0,
        col_outbuf_i_q0,
        buf_2d_out_address0,
        buf_2d_out_ce0,
        buf_2d_out_we0,
        buf_2d_out_d0
);

parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b10;
parameter    ap_ST_st4_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv7_40 = 7'b1000000;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_2 = 32'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [5:0] col_outbuf_i_address0;
output   col_outbuf_i_ce0;
input  [15:0] col_outbuf_i_q0;
output  [5:0] buf_2d_out_address0;
output   buf_2d_out_ce0;
output   buf_2d_out_we0;
output  [15:0] buf_2d_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg col_outbuf_i_ce0;
reg buf_2d_out_ce0;
reg buf_2d_out_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_21;
reg   [6:0] indvar_flatten_reg_71;
reg   [3:0] j_1_i_reg_82;
reg   [3:0] i_3_i_reg_93;
wire   [0:0] exitcond_flatten_fu_104_p2;
reg   [0:0] exitcond_flatten_reg_202;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_54;
reg    ap_reg_ppiten_pp0_it0;
reg    ap_reg_ppiten_pp0_it1;
wire   [6:0] indvar_flatten_next_fu_110_p2;
wire   [3:0] i_3_i_mid2_fu_128_p3;
reg   [3:0] i_3_i_mid2_reg_211;
wire   [3:0] tmp_1_mid2_v_fu_136_p3;
reg   [3:0] tmp_1_mid2_v_reg_216;
wire   [3:0] i_fu_171_p2;
reg    ap_sig_78;
reg   [3:0] j_1_i_phi_fu_86_p4;
wire   [63:0] tmp_15_cast_fu_166_p1;
wire   [63:0] tmp_16_cast_fu_197_p1;
wire   [0:0] exitcond_i2_fu_122_p2;
wire   [3:0] j_fu_116_p2;
wire   [6:0] tmp_s_fu_148_p3;
wire   [7:0] tmp_1_mid2_cast_fu_144_p1;
wire   [7:0] tmp_14_cast_fu_156_p1;
wire   [7:0] tmp_1_fu_160_p2;
wire   [6:0] tmp_fu_177_p3;
wire   [7:0] tmp_2_cast_fu_188_p1;
wire   [7:0] tmp_12_cast_fu_184_p1;
wire   [7:0] tmp_2_fu_191_p2;
reg    ap_sig_cseq_ST_st4_fsm_2;
reg    ap_sig_163;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'b1;
#0 ap_reg_ppiten_pp0_it0 = 1'b0;
#0 ap_reg_ppiten_pp0_it1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_sig_cseq_ST_st4_fsm_2)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_flatten_fu_104_p2 == 1'b0))) begin
            ap_reg_ppiten_pp0_it0 <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_78)) begin
            ap_reg_ppiten_pp0_it0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten_fu_104_p2 == 1'b0))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b1;
        end else if ((((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_78) | ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_flatten_fu_104_p2 == 1'b0)))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_104_p2 == 1'b0))) begin
        i_3_i_reg_93 <= i_fu_171_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_78)) begin
        i_3_i_reg_93 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_104_p2 == 1'b0))) begin
        indvar_flatten_reg_71 <= indvar_flatten_next_fu_110_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_78)) begin
        indvar_flatten_reg_71 <= ap_const_lv7_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_202 == 1'b0))) begin
        j_1_i_reg_82 <= tmp_1_mid2_v_reg_216;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_78)) begin
        j_1_i_reg_82 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1)) begin
        exitcond_flatten_reg_202 <= exitcond_flatten_fu_104_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten_fu_104_p2 == 1'b0))) begin
        i_3_i_mid2_reg_211 <= i_3_i_mid2_fu_128_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_104_p2 == 1'b0))) begin
        tmp_1_mid2_v_reg_216 <= tmp_1_mid2_v_fu_136_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | (1'b1 == ap_sig_cseq_ST_st4_fsm_2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_54) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_163) begin
        ap_sig_cseq_ST_st4_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1))) begin
        buf_2d_out_ce0 = 1'b1;
    end else begin
        buf_2d_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_202 == 1'b0))) begin
        buf_2d_out_we0 = 1'b1;
    end else begin
        buf_2d_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0))) begin
        col_outbuf_i_ce0 = 1'b1;
    end else begin
        col_outbuf_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_202 == 1'b0))) begin
        j_1_i_phi_fu_86_p4 = tmp_1_mid2_v_reg_216;
    end else begin
        j_1_i_phi_fu_86_p4 = j_1_i_reg_82;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~ap_sig_78) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : begin
            if (~((1'b1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_flatten_fu_104_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_2;
            end
        end
        ap_ST_st4_fsm_2 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_163 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_21 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_54 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_78 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign buf_2d_out_address0 = tmp_16_cast_fu_197_p1;

assign buf_2d_out_d0 = col_outbuf_i_q0;

assign col_outbuf_i_address0 = tmp_15_cast_fu_166_p1;

assign exitcond_flatten_fu_104_p2 = ((indvar_flatten_reg_71 == ap_const_lv7_40) ? 1'b1 : 1'b0);

assign exitcond_i2_fu_122_p2 = ((i_3_i_reg_93 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign i_3_i_mid2_fu_128_p3 = ((exitcond_i2_fu_122_p2[0:0] === 1'b1) ? ap_const_lv4_0 : i_3_i_reg_93);

assign i_fu_171_p2 = (i_3_i_mid2_fu_128_p3 + ap_const_lv4_1);

assign indvar_flatten_next_fu_110_p2 = (indvar_flatten_reg_71 + ap_const_lv7_1);

assign j_fu_116_p2 = (j_1_i_phi_fu_86_p4 + ap_const_lv4_1);

assign tmp_12_cast_fu_184_p1 = tmp_fu_177_p3;

assign tmp_14_cast_fu_156_p1 = tmp_s_fu_148_p3;

assign tmp_15_cast_fu_166_p1 = tmp_1_fu_160_p2;

assign tmp_16_cast_fu_197_p1 = tmp_2_fu_191_p2;

assign tmp_1_fu_160_p2 = (tmp_1_mid2_cast_fu_144_p1 + tmp_14_cast_fu_156_p1);

assign tmp_1_mid2_cast_fu_144_p1 = tmp_1_mid2_v_fu_136_p3;

assign tmp_1_mid2_v_fu_136_p3 = ((exitcond_i2_fu_122_p2[0:0] === 1'b1) ? j_fu_116_p2 : j_1_i_phi_fu_86_p4);

assign tmp_2_cast_fu_188_p1 = i_3_i_mid2_reg_211;

assign tmp_2_fu_191_p2 = (tmp_2_cast_fu_188_p1 + tmp_12_cast_fu_184_p1);

assign tmp_fu_177_p3 = {{tmp_1_mid2_v_reg_216}, {ap_const_lv3_0}};

assign tmp_s_fu_148_p3 = {{i_3_i_mid2_fu_128_p3}, {ap_const_lv3_0}};

endmodule //dct_Loop_Xpose_Col_Outer_Loop_proc
