// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dct_Loop_Xpose_Row_Outer_Loop_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        row_outbuf_i_address0,
        row_outbuf_i_ce0,
        row_outbuf_i_q0,
        col_inbuf_0_address0,
        col_inbuf_0_ce0,
        col_inbuf_0_we0,
        col_inbuf_0_d0,
        col_inbuf_1_address0,
        col_inbuf_1_ce0,
        col_inbuf_1_we0,
        col_inbuf_1_d0,
        col_inbuf_2_address0,
        col_inbuf_2_ce0,
        col_inbuf_2_we0,
        col_inbuf_2_d0,
        col_inbuf_3_address0,
        col_inbuf_3_ce0,
        col_inbuf_3_we0,
        col_inbuf_3_d0,
        col_inbuf_4_address0,
        col_inbuf_4_ce0,
        col_inbuf_4_we0,
        col_inbuf_4_d0,
        col_inbuf_5_address0,
        col_inbuf_5_ce0,
        col_inbuf_5_we0,
        col_inbuf_5_d0,
        col_inbuf_6_address0,
        col_inbuf_6_ce0,
        col_inbuf_6_we0,
        col_inbuf_6_d0,
        col_inbuf_7_address0,
        col_inbuf_7_ce0,
        col_inbuf_7_we0,
        col_inbuf_7_d0
);

parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b10;
parameter    ap_ST_st4_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv3_6 = 3'b110;
parameter    ap_const_lv3_5 = 3'b101;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv3_3 = 3'b11;
parameter    ap_const_lv3_2 = 3'b10;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv3_7 = 3'b111;
parameter    ap_const_lv7_40 = 7'b1000000;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv32_2 = 32'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [5:0] row_outbuf_i_address0;
output   row_outbuf_i_ce0;
input  [15:0] row_outbuf_i_q0;
output  [2:0] col_inbuf_0_address0;
output   col_inbuf_0_ce0;
output   col_inbuf_0_we0;
output  [15:0] col_inbuf_0_d0;
output  [2:0] col_inbuf_1_address0;
output   col_inbuf_1_ce0;
output   col_inbuf_1_we0;
output  [15:0] col_inbuf_1_d0;
output  [2:0] col_inbuf_2_address0;
output   col_inbuf_2_ce0;
output   col_inbuf_2_we0;
output  [15:0] col_inbuf_2_d0;
output  [2:0] col_inbuf_3_address0;
output   col_inbuf_3_ce0;
output   col_inbuf_3_we0;
output  [15:0] col_inbuf_3_d0;
output  [2:0] col_inbuf_4_address0;
output   col_inbuf_4_ce0;
output   col_inbuf_4_we0;
output  [15:0] col_inbuf_4_d0;
output  [2:0] col_inbuf_5_address0;
output   col_inbuf_5_ce0;
output   col_inbuf_5_we0;
output  [15:0] col_inbuf_5_d0;
output  [2:0] col_inbuf_6_address0;
output   col_inbuf_6_ce0;
output   col_inbuf_6_we0;
output  [15:0] col_inbuf_6_d0;
output  [2:0] col_inbuf_7_address0;
output   col_inbuf_7_ce0;
output   col_inbuf_7_we0;
output  [15:0] col_inbuf_7_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg row_outbuf_i_ce0;
reg col_inbuf_0_ce0;
reg col_inbuf_0_we0;
reg col_inbuf_1_ce0;
reg col_inbuf_1_we0;
reg col_inbuf_2_ce0;
reg col_inbuf_2_we0;
reg col_inbuf_3_ce0;
reg col_inbuf_3_we0;
reg col_inbuf_4_ce0;
reg col_inbuf_4_we0;
reg col_inbuf_5_ce0;
reg col_inbuf_5_we0;
reg col_inbuf_6_ce0;
reg col_inbuf_6_we0;
reg col_inbuf_7_ce0;
reg col_inbuf_7_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_21;
reg   [6:0] indvar_flatten_reg_188;
reg   [3:0] j_0_i_reg_199;
reg   [3:0] i_1_i_reg_210;
wire   [0:0] exitcond_flatten_fu_221_p2;
reg   [0:0] exitcond_flatten_reg_309;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_103;
reg    ap_reg_ppiten_pp0_it0;
reg    ap_reg_ppiten_pp0_it1;
wire   [6:0] indvar_flatten_next_fu_227_p2;
wire   [3:0] tmp_mid2_v_fu_253_p3;
reg   [3:0] tmp_mid2_v_reg_318;
wire   [2:0] tmp_3_fu_288_p1;
reg   [2:0] tmp_3_reg_329;
wire   [3:0] i_fu_292_p2;
reg    ap_sig_127;
reg   [3:0] j_0_i_phi_fu_203_p4;
wire   [63:0] tmp_9_cast_fu_283_p1;
wire   [63:0] tmp_mid2_fu_298_p1;
wire   [0:0] exitcond3_i2_fu_239_p2;
wire   [3:0] j_fu_233_p2;
wire   [3:0] i_1_i_mid2_fu_245_p3;
wire   [6:0] tmp_fu_265_p3;
wire   [7:0] tmp_8_cast_fu_273_p1;
wire   [7:0] tmp_mid2_cast_fu_261_p1;
wire   [7:0] tmp_9_fu_277_p2;
reg    ap_sig_cseq_ST_st4_fsm_2;
reg    ap_sig_238;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'b1;
#0 ap_reg_ppiten_pp0_it0 = 1'b0;
#0 ap_reg_ppiten_pp0_it1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_sig_cseq_ST_st4_fsm_2)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_flatten_fu_221_p2 == 1'b0))) begin
            ap_reg_ppiten_pp0_it0 <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_127)) begin
            ap_reg_ppiten_pp0_it0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten_fu_221_p2 == 1'b0))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b1;
        end else if ((((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_127) | ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_flatten_fu_221_p2 == 1'b0)))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_221_p2 == 1'b0))) begin
        i_1_i_reg_210 <= i_fu_292_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_127)) begin
        i_1_i_reg_210 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_221_p2 == 1'b0))) begin
        indvar_flatten_reg_188 <= indvar_flatten_next_fu_227_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_127)) begin
        indvar_flatten_reg_188 <= ap_const_lv7_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_309 == 1'b0))) begin
        j_0_i_reg_199 <= tmp_mid2_v_reg_318;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_127)) begin
        j_0_i_reg_199 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1)) begin
        exitcond_flatten_reg_309 <= exitcond_flatten_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten_fu_221_p2 == 1'b0))) begin
        tmp_3_reg_329 <= tmp_3_fu_288_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_221_p2 == 1'b0))) begin
        tmp_mid2_v_reg_318 <= tmp_mid2_v_fu_253_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | (1'b1 == ap_sig_cseq_ST_st4_fsm_2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_103) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_238) begin
        ap_sig_cseq_ST_st4_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1))) begin
        col_inbuf_0_ce0 = 1'b1;
    end else begin
        col_inbuf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (tmp_3_reg_329 == ap_const_lv3_0))) begin
        col_inbuf_0_we0 = 1'b1;
    end else begin
        col_inbuf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1))) begin
        col_inbuf_1_ce0 = 1'b1;
    end else begin
        col_inbuf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (tmp_3_reg_329 == ap_const_lv3_1))) begin
        col_inbuf_1_we0 = 1'b1;
    end else begin
        col_inbuf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1))) begin
        col_inbuf_2_ce0 = 1'b1;
    end else begin
        col_inbuf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (tmp_3_reg_329 == ap_const_lv3_2))) begin
        col_inbuf_2_we0 = 1'b1;
    end else begin
        col_inbuf_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1))) begin
        col_inbuf_3_ce0 = 1'b1;
    end else begin
        col_inbuf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (tmp_3_reg_329 == ap_const_lv3_3))) begin
        col_inbuf_3_we0 = 1'b1;
    end else begin
        col_inbuf_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1))) begin
        col_inbuf_4_ce0 = 1'b1;
    end else begin
        col_inbuf_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (tmp_3_reg_329 == ap_const_lv3_4))) begin
        col_inbuf_4_we0 = 1'b1;
    end else begin
        col_inbuf_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1))) begin
        col_inbuf_5_ce0 = 1'b1;
    end else begin
        col_inbuf_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (tmp_3_reg_329 == ap_const_lv3_5))) begin
        col_inbuf_5_we0 = 1'b1;
    end else begin
        col_inbuf_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1))) begin
        col_inbuf_6_ce0 = 1'b1;
    end else begin
        col_inbuf_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (tmp_3_reg_329 == ap_const_lv3_6))) begin
        col_inbuf_6_we0 = 1'b1;
    end else begin
        col_inbuf_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1))) begin
        col_inbuf_7_ce0 = 1'b1;
    end else begin
        col_inbuf_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (tmp_3_reg_329 == ap_const_lv3_7))) begin
        col_inbuf_7_we0 = 1'b1;
    end else begin
        col_inbuf_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_309 == 1'b0))) begin
        j_0_i_phi_fu_203_p4 = tmp_mid2_v_reg_318;
    end else begin
        j_0_i_phi_fu_203_p4 = j_0_i_reg_199;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0))) begin
        row_outbuf_i_ce0 = 1'b1;
    end else begin
        row_outbuf_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~ap_sig_127) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : begin
            if (~((1'b1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_flatten_fu_221_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_2;
            end
        end
        ap_ST_st4_fsm_2 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_103 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_127 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_sig_21 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_238 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

assign col_inbuf_0_address0 = tmp_mid2_fu_298_p1;

assign col_inbuf_0_d0 = row_outbuf_i_q0;

assign col_inbuf_1_address0 = tmp_mid2_fu_298_p1;

assign col_inbuf_1_d0 = row_outbuf_i_q0;

assign col_inbuf_2_address0 = tmp_mid2_fu_298_p1;

assign col_inbuf_2_d0 = row_outbuf_i_q0;

assign col_inbuf_3_address0 = tmp_mid2_fu_298_p1;

assign col_inbuf_3_d0 = row_outbuf_i_q0;

assign col_inbuf_4_address0 = tmp_mid2_fu_298_p1;

assign col_inbuf_4_d0 = row_outbuf_i_q0;

assign col_inbuf_5_address0 = tmp_mid2_fu_298_p1;

assign col_inbuf_5_d0 = row_outbuf_i_q0;

assign col_inbuf_6_address0 = tmp_mid2_fu_298_p1;

assign col_inbuf_6_d0 = row_outbuf_i_q0;

assign col_inbuf_7_address0 = tmp_mid2_fu_298_p1;

assign col_inbuf_7_d0 = row_outbuf_i_q0;

assign exitcond3_i2_fu_239_p2 = ((i_1_i_reg_210 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_221_p2 = ((indvar_flatten_reg_188 == ap_const_lv7_40) ? 1'b1 : 1'b0);

assign i_1_i_mid2_fu_245_p3 = ((exitcond3_i2_fu_239_p2[0:0] === 1'b1) ? ap_const_lv4_0 : i_1_i_reg_210);

assign i_fu_292_p2 = (i_1_i_mid2_fu_245_p3 + ap_const_lv4_1);

assign indvar_flatten_next_fu_227_p2 = (indvar_flatten_reg_188 + ap_const_lv7_1);

assign j_fu_233_p2 = (ap_const_lv4_1 + j_0_i_phi_fu_203_p4);

assign row_outbuf_i_address0 = tmp_9_cast_fu_283_p1;

assign tmp_3_fu_288_p1 = i_1_i_mid2_fu_245_p3[2:0];

assign tmp_8_cast_fu_273_p1 = tmp_fu_265_p3;

assign tmp_9_cast_fu_283_p1 = tmp_9_fu_277_p2;

assign tmp_9_fu_277_p2 = (tmp_8_cast_fu_273_p1 + tmp_mid2_cast_fu_261_p1);

assign tmp_fu_265_p3 = {{i_1_i_mid2_fu_245_p3}, {ap_const_lv3_0}};

assign tmp_mid2_cast_fu_261_p1 = tmp_mid2_v_fu_253_p3;

assign tmp_mid2_fu_298_p1 = tmp_mid2_v_reg_318;

assign tmp_mid2_v_fu_253_p3 = ((exitcond3_i2_fu_239_p2[0:0] === 1'b1) ? j_fu_233_p2 : j_0_i_phi_fu_203_p4);

endmodule //dct_Loop_Xpose_Row_Outer_Loop_proc
