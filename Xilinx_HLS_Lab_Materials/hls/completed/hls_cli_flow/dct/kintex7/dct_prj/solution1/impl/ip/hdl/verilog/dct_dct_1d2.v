// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dct_dct_1d2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_address0,
        src_ce0,
        src_q0,
        tmp_2,
        dst_address0,
        dst_ce0,
        dst_we0,
        dst_d0,
        tmp_21
);

parameter    ap_ST_st1_fsm_0 = 4'b1;
parameter    ap_ST_st2_fsm_1 = 4'b10;
parameter    ap_ST_st3_fsm_2 = 4'b100;
parameter    ap_ST_st4_fsm_3 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv29_1000 = 29'b1000000000000;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_1C = 32'b11100;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] src_address0;
output   src_ce0;
input  [15:0] src_q0;
input  [3:0] tmp_2;
output  [5:0] dst_address0;
output   dst_ce0;
output   dst_we0;
output  [15:0] dst_d0;
input  [3:0] tmp_21;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_ce0;
reg dst_ce0;
reg dst_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_21;
wire   [5:0] dct_coeff_table_address0;
reg    dct_coeff_table_ce0;
wire  signed [14:0] dct_coeff_table_q0;
wire   [7:0] tmp_18_cast_fu_137_p1;
reg   [7:0] tmp_18_cast_reg_264;
wire   [7:0] tmp_20_cast_fu_149_p1;
reg   [7:0] tmp_20_cast_reg_269;
wire   [3:0] k_1_fu_159_p2;
reg   [3:0] k_1_reg_277;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_62;
reg   [5:0] dst_addr_reg_282;
wire   [0:0] exitcond1_fu_153_p2;
wire   [7:0] tmp_24_cast_fu_187_p1;
reg   [7:0] tmp_24_cast_reg_287;
wire   [3:0] n_1_fu_197_p2;
reg   [3:0] n_1_reg_295;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_79;
wire   [0:0] exitcond_fu_191_p2;
wire  signed [31:0] grp_fu_256_p3;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_95;
reg   [3:0] k_reg_95;
reg   [3:0] n_reg_106;
reg   [31:0] tmp1_reg_117;
wire   [63:0] tmp_22_cast_fu_174_p1;
wire   [63:0] tmp_25_cast_fu_212_p1;
wire   [63:0] tmp_26_cast_fu_222_p1;
wire   [6:0] tmp_6_fu_129_p3;
wire   [6:0] tmp_8_fu_141_p3;
wire   [7:0] tmp_cast_fu_165_p1;
wire   [7:0] tmp_9_fu_169_p2;
wire   [6:0] tmp_10_fu_179_p3;
wire   [7:0] tmp_8_cast_fu_203_p1;
wire   [7:0] tmp_11_fu_207_p2;
wire   [7:0] tmp_12_fu_217_p2;
wire   [28:0] tmp_fu_227_p1;
wire   [28:0] tmp_s_fu_231_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'b1;
end

dct_dct_1d2_dct_coeff_table #(
    .DataWidth( 15 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
dct_coeff_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dct_coeff_table_address0),
    .ce0(dct_coeff_table_ce0),
    .q0(dct_coeff_table_q0)
);

dct_mac_muladd_15s_16s_32ns_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dct_mac_muladd_15s_16s_32ns_32_1_U0(
    .din0(dct_coeff_table_q0),
    .din1(src_q0),
    .din2(tmp1_reg_117),
    .dout(grp_fu_256_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == exitcond_fu_191_p2))) begin
        k_reg_95 <= k_1_reg_277;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        k_reg_95 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        n_reg_106 <= n_1_reg_295;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_153_p2 == 1'b0))) begin
        n_reg_106 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        tmp1_reg_117 <= grp_fu_256_p3;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_153_p2 == 1'b0))) begin
        tmp1_reg_117 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_153_p2 == 1'b0))) begin
        dst_addr_reg_282 <= tmp_22_cast_fu_174_p1;
        tmp_24_cast_reg_287[6 : 3] <= tmp_24_cast_fu_187_p1[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        k_1_reg_277 <= k_1_fu_159_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        n_1_reg_295 <= n_1_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        tmp_18_cast_reg_264[6 : 3] <= tmp_18_cast_fu_137_p1[6 : 3];
        tmp_20_cast_reg_269[6 : 3] <= tmp_20_cast_fu_149_p1[6 : 3];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_153_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_153_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_62) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_79) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_95) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        dct_coeff_table_ce0 = 1'b1;
    end else begin
        dct_coeff_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        dst_ce0 = 1'b1;
    end else begin
        dst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == exitcond_fu_191_p2))) begin
        dst_we0 = 1'b1;
    end else begin
        dst_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        src_ce0 = 1'b1;
    end else begin
        src_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(exitcond1_fu_153_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if (~(1'b0 == exitcond_fu_191_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_21 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_62 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_79 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_95 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

assign dct_coeff_table_address0 = tmp_26_cast_fu_222_p1;

assign dst_address0 = dst_addr_reg_282;

assign dst_d0 = {{tmp_s_fu_231_p2[ap_const_lv32_1C : ap_const_lv32_D]}};

assign exitcond1_fu_153_p2 = ((k_reg_95 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign exitcond_fu_191_p2 = ((n_reg_106 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign k_1_fu_159_p2 = (k_reg_95 + ap_const_lv4_1);

assign n_1_fu_197_p2 = (n_reg_106 + ap_const_lv4_1);

assign src_address0 = tmp_25_cast_fu_212_p1;

assign tmp_10_fu_179_p3 = {{k_reg_95}, {ap_const_lv3_0}};

assign tmp_11_fu_207_p2 = (tmp_20_cast_reg_269 + tmp_8_cast_fu_203_p1);

assign tmp_12_fu_217_p2 = (tmp_24_cast_reg_287 + tmp_8_cast_fu_203_p1);

assign tmp_18_cast_fu_137_p1 = tmp_6_fu_129_p3;

assign tmp_20_cast_fu_149_p1 = tmp_8_fu_141_p3;

assign tmp_22_cast_fu_174_p1 = tmp_9_fu_169_p2;

assign tmp_24_cast_fu_187_p1 = tmp_10_fu_179_p3;

assign tmp_25_cast_fu_212_p1 = tmp_11_fu_207_p2;

assign tmp_26_cast_fu_222_p1 = tmp_12_fu_217_p2;

assign tmp_6_fu_129_p3 = {{tmp_21}, {ap_const_lv3_0}};

assign tmp_8_cast_fu_203_p1 = n_reg_106;

assign tmp_8_fu_141_p3 = {{tmp_2}, {ap_const_lv3_0}};

assign tmp_9_fu_169_p2 = (tmp_cast_fu_165_p1 + tmp_18_cast_reg_264);

assign tmp_cast_fu_165_p1 = k_reg_95;

assign tmp_fu_227_p1 = tmp1_reg_117[28:0];

assign tmp_s_fu_231_p2 = (ap_const_lv29_1000 + tmp_fu_227_p1);

always @ (posedge ap_clk) begin
    tmp_18_cast_reg_264[2:0] <= 3'b000;
    tmp_18_cast_reg_264[7] <= 1'b0;
    tmp_20_cast_reg_269[2:0] <= 3'b000;
    tmp_20_cast_reg_269[7] <= 1'b0;
    tmp_24_cast_reg_287[2:0] <= 3'b000;
    tmp_24_cast_reg_287[7] <= 1'b0;
end

endmodule //dct_dct_1d2
