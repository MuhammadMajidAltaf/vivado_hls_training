-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter is
port (
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch1_we0 : OUT STD_LOGIC;
    in_channels_ch1_address1 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce1 : OUT STD_LOGIC;
    in_channels_ch1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch1_we1 : OUT STD_LOGIC;
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_we0 : OUT STD_LOGIC;
    in_channels_ch2_address1 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce1 : OUT STD_LOGIC;
    in_channels_ch2_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_we1 : OUT STD_LOGIC;
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_we0 : OUT STD_LOGIC;
    in_channels_ch3_address1 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce1 : OUT STD_LOGIC;
    in_channels_ch3_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_we1 : OUT STD_LOGIC;
    in_width : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_address1 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce1 : OUT STD_LOGIC;
    out_channels_ch1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch1_we1 : OUT STD_LOGIC;
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_address1 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce1 : OUT STD_LOGIC;
    out_channels_ch2_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_we1 : OUT STD_LOGIC;
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_address1 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce1 : OUT STD_LOGIC;
    out_channels_ch3_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_we1 : OUT STD_LOGIC;
    out_width : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_height : OUT STD_LOGIC_VECTOR (15 downto 0);
    Y_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    U_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    V_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    out_width_ap_vld : OUT STD_LOGIC;
    out_height_ap_vld : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of yuv_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "yuv_filter,hls_ip_2016_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=11.360000,HLS_SYN_LAT=784415,HLS_SYN_TPT=784408,HLS_SYN_MEM=0,HLS_SYN_DSP=15,HLS_SYN_FF=759,HLS_SYN_LUT=1136}";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_true : BOOLEAN := true;

    signal yuv_filter_rgb2yuv11_U0_ap_start : STD_LOGIC;
    signal yuv_filter_rgb2yuv11_U0_ap_done : STD_LOGIC;
    signal yuv_filter_rgb2yuv11_U0_ap_continue : STD_LOGIC;
    signal yuv_filter_rgb2yuv11_U0_ap_idle : STD_LOGIC;
    signal yuv_filter_rgb2yuv11_U0_ap_ready : STD_LOGIC;
    signal yuv_filter_rgb2yuv11_U0_in_channels_ch1_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal yuv_filter_rgb2yuv11_U0_in_channels_ch1_ce0 : STD_LOGIC;
    signal yuv_filter_rgb2yuv11_U0_in_channels_ch2_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal yuv_filter_rgb2yuv11_U0_in_channels_ch2_ce0 : STD_LOGIC;
    signal yuv_filter_rgb2yuv11_U0_in_channels_ch3_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal yuv_filter_rgb2yuv11_U0_in_channels_ch3_ce0 : STD_LOGIC;
    signal yuv_filter_rgb2yuv11_U0_out_channels_ch1_din : STD_LOGIC_VECTOR (7 downto 0);
    signal yuv_filter_rgb2yuv11_U0_out_channels_ch1_write : STD_LOGIC;
    signal yuv_filter_rgb2yuv11_U0_out_channels_ch2_din : STD_LOGIC_VECTOR (7 downto 0);
    signal yuv_filter_rgb2yuv11_U0_out_channels_ch2_write : STD_LOGIC;
    signal yuv_filter_rgb2yuv11_U0_out_channels_ch3_din : STD_LOGIC_VECTOR (7 downto 0);
    signal yuv_filter_rgb2yuv11_U0_out_channels_ch3_write : STD_LOGIC;
    signal yuv_filter_rgb2yuv11_U0_out_width_din : STD_LOGIC_VECTOR (15 downto 0);
    signal yuv_filter_rgb2yuv11_U0_out_width_write : STD_LOGIC;
    signal yuv_filter_rgb2yuv11_U0_out_height_din : STD_LOGIC_VECTOR (15 downto 0);
    signal yuv_filter_rgb2yuv11_U0_out_height_write : STD_LOGIC;
    signal yuv_filter_rgb2yuv11_U0_Y_scale_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal yuv_filter_rgb2yuv11_U0_Y_scale_out_write : STD_LOGIC;
    signal yuv_filter_rgb2yuv11_U0_U_scale_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal yuv_filter_rgb2yuv11_U0_U_scale_out_write : STD_LOGIC;
    signal yuv_filter_rgb2yuv11_U0_V_scale_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal yuv_filter_rgb2yuv11_U0_V_scale_out_write : STD_LOGIC;
    signal yuv_filter_yuv_scale_U0_ap_start : STD_LOGIC := '0';
    signal yuv_filter_yuv_scale_U0_ap_done : STD_LOGIC;
    signal yuv_filter_yuv_scale_U0_ap_continue : STD_LOGIC;
    signal yuv_filter_yuv_scale_U0_ap_idle : STD_LOGIC;
    signal yuv_filter_yuv_scale_U0_ap_ready : STD_LOGIC;
    signal yuv_filter_yuv_scale_U0_in_channels_ch1_read : STD_LOGIC;
    signal yuv_filter_yuv_scale_U0_in_channels_ch2_read : STD_LOGIC;
    signal yuv_filter_yuv_scale_U0_in_channels_ch3_read : STD_LOGIC;
    signal yuv_filter_yuv_scale_U0_in_width_read : STD_LOGIC;
    signal yuv_filter_yuv_scale_U0_in_height_read : STD_LOGIC;
    signal yuv_filter_yuv_scale_U0_out_channels_ch1_din : STD_LOGIC_VECTOR (7 downto 0);
    signal yuv_filter_yuv_scale_U0_out_channels_ch1_write : STD_LOGIC;
    signal yuv_filter_yuv_scale_U0_out_channels_ch2_din : STD_LOGIC_VECTOR (7 downto 0);
    signal yuv_filter_yuv_scale_U0_out_channels_ch2_write : STD_LOGIC;
    signal yuv_filter_yuv_scale_U0_out_channels_ch3_din : STD_LOGIC_VECTOR (7 downto 0);
    signal yuv_filter_yuv_scale_U0_out_channels_ch3_write : STD_LOGIC;
    signal yuv_filter_yuv_scale_U0_out_width_din : STD_LOGIC_VECTOR (15 downto 0);
    signal yuv_filter_yuv_scale_U0_out_width_write : STD_LOGIC;
    signal yuv_filter_yuv_scale_U0_out_height_din : STD_LOGIC_VECTOR (15 downto 0);
    signal yuv_filter_yuv_scale_U0_out_height_write : STD_LOGIC;
    signal yuv_filter_yuv_scale_U0_Y_scale_read : STD_LOGIC;
    signal yuv_filter_yuv_scale_U0_U_scale_read : STD_LOGIC;
    signal yuv_filter_yuv_scale_U0_V_scale_read : STD_LOGIC;
    signal yuv_filter_yuv2rgb_U0_ap_start : STD_LOGIC := '0';
    signal yuv_filter_yuv2rgb_U0_ap_done : STD_LOGIC;
    signal yuv_filter_yuv2rgb_U0_ap_continue : STD_LOGIC;
    signal yuv_filter_yuv2rgb_U0_ap_idle : STD_LOGIC;
    signal yuv_filter_yuv2rgb_U0_ap_ready : STD_LOGIC;
    signal yuv_filter_yuv2rgb_U0_in_channels_ch1_read : STD_LOGIC;
    signal yuv_filter_yuv2rgb_U0_in_channels_ch2_read : STD_LOGIC;
    signal yuv_filter_yuv2rgb_U0_in_channels_ch3_read : STD_LOGIC;
    signal yuv_filter_yuv2rgb_U0_in_width_read : STD_LOGIC;
    signal yuv_filter_yuv2rgb_U0_in_height_read : STD_LOGIC;
    signal yuv_filter_yuv2rgb_U0_out_channels_ch1_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal yuv_filter_yuv2rgb_U0_out_channels_ch1_ce0 : STD_LOGIC;
    signal yuv_filter_yuv2rgb_U0_out_channels_ch1_we0 : STD_LOGIC;
    signal yuv_filter_yuv2rgb_U0_out_channels_ch1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal yuv_filter_yuv2rgb_U0_out_channels_ch2_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal yuv_filter_yuv2rgb_U0_out_channels_ch2_ce0 : STD_LOGIC;
    signal yuv_filter_yuv2rgb_U0_out_channels_ch2_we0 : STD_LOGIC;
    signal yuv_filter_yuv2rgb_U0_out_channels_ch2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal yuv_filter_yuv2rgb_U0_out_channels_ch3_address0 : STD_LOGIC_VECTOR (21 downto 0);
    signal yuv_filter_yuv2rgb_U0_out_channels_ch3_ce0 : STD_LOGIC;
    signal yuv_filter_yuv2rgb_U0_out_channels_ch3_we0 : STD_LOGIC;
    signal yuv_filter_yuv2rgb_U0_out_channels_ch3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal yuv_filter_yuv2rgb_U0_out_width : STD_LOGIC_VECTOR (15 downto 0);
    signal yuv_filter_yuv2rgb_U0_out_width_ap_vld : STD_LOGIC;
    signal yuv_filter_yuv2rgb_U0_out_height : STD_LOGIC_VECTOR (15 downto 0);
    signal yuv_filter_yuv2rgb_U0_out_height_ap_vld : STD_LOGIC;
    signal ap_sig_hs_continue : STD_LOGIC;
    signal p_yuv_channels_ch1_full_n : STD_LOGIC;
    signal p_yuv_channels_ch1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_yuv_channels_ch1_empty_n : STD_LOGIC;
    signal p_yuv_channels_ch2_full_n : STD_LOGIC;
    signal p_yuv_channels_ch2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_yuv_channels_ch2_empty_n : STD_LOGIC;
    signal p_yuv_channels_ch3_full_n : STD_LOGIC;
    signal p_yuv_channels_ch3_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_yuv_channels_ch3_empty_n : STD_LOGIC;
    signal p_yuv_width_full_n : STD_LOGIC;
    signal p_yuv_width_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_yuv_width_empty_n : STD_LOGIC;
    signal p_yuv_height_full_n : STD_LOGIC;
    signal p_yuv_height_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_yuv_height_empty_n : STD_LOGIC;
    signal Y_scale_channel_full_n : STD_LOGIC;
    signal Y_scale_channel_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal Y_scale_channel_empty_n : STD_LOGIC;
    signal U_scale_channel_full_n : STD_LOGIC;
    signal U_scale_channel_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal U_scale_channel_empty_n : STD_LOGIC;
    signal V_scale_channel_full_n : STD_LOGIC;
    signal V_scale_channel_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal V_scale_channel_empty_n : STD_LOGIC;
    signal p_scale_channels_ch1_full_n : STD_LOGIC;
    signal p_scale_channels_ch1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_scale_channels_ch1_empty_n : STD_LOGIC;
    signal p_scale_channels_ch2_full_n : STD_LOGIC;
    signal p_scale_channels_ch2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_scale_channels_ch2_empty_n : STD_LOGIC;
    signal p_scale_channels_ch3_full_n : STD_LOGIC;
    signal p_scale_channels_ch3_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_scale_channels_ch3_empty_n : STD_LOGIC;
    signal p_scale_width_full_n : STD_LOGIC;
    signal p_scale_width_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_scale_width_empty_n : STD_LOGIC;
    signal p_scale_height_full_n : STD_LOGIC;
    signal p_scale_height_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal p_scale_height_empty_n : STD_LOGIC;
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_sig_hs_ready : STD_LOGIC;

    component yuv_filter_rgb2yuv11 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        in_channels_ch1_ce0 : OUT STD_LOGIC;
        in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        in_channels_ch2_ce0 : OUT STD_LOGIC;
        in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        in_channels_ch3_ce0 : OUT STD_LOGIC;
        in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_width : IN STD_LOGIC_VECTOR (15 downto 0);
        in_height : IN STD_LOGIC_VECTOR (15 downto 0);
        out_channels_ch1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_channels_ch1_full_n : IN STD_LOGIC;
        out_channels_ch1_write : OUT STD_LOGIC;
        out_channels_ch2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_channels_ch2_full_n : IN STD_LOGIC;
        out_channels_ch2_write : OUT STD_LOGIC;
        out_channels_ch3_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_channels_ch3_full_n : IN STD_LOGIC;
        out_channels_ch3_write : OUT STD_LOGIC;
        out_width_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_width_full_n : IN STD_LOGIC;
        out_width_write : OUT STD_LOGIC;
        out_height_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_height_full_n : IN STD_LOGIC;
        out_height_write : OUT STD_LOGIC;
        Y_scale : IN STD_LOGIC_VECTOR (7 downto 0);
        U_scale : IN STD_LOGIC_VECTOR (7 downto 0);
        V_scale : IN STD_LOGIC_VECTOR (7 downto 0);
        Y_scale_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        Y_scale_out_full_n : IN STD_LOGIC;
        Y_scale_out_write : OUT STD_LOGIC;
        U_scale_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        U_scale_out_full_n : IN STD_LOGIC;
        U_scale_out_write : OUT STD_LOGIC;
        V_scale_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        V_scale_out_full_n : IN STD_LOGIC;
        V_scale_out_write : OUT STD_LOGIC );
    end component;


    component yuv_filter_yuv_scale IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_channels_ch1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        in_channels_ch1_empty_n : IN STD_LOGIC;
        in_channels_ch1_read : OUT STD_LOGIC;
        in_channels_ch2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        in_channels_ch2_empty_n : IN STD_LOGIC;
        in_channels_ch2_read : OUT STD_LOGIC;
        in_channels_ch3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        in_channels_ch3_empty_n : IN STD_LOGIC;
        in_channels_ch3_read : OUT STD_LOGIC;
        in_width_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_width_empty_n : IN STD_LOGIC;
        in_width_read : OUT STD_LOGIC;
        in_height_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_height_empty_n : IN STD_LOGIC;
        in_height_read : OUT STD_LOGIC;
        out_channels_ch1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_channels_ch1_full_n : IN STD_LOGIC;
        out_channels_ch1_write : OUT STD_LOGIC;
        out_channels_ch2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_channels_ch2_full_n : IN STD_LOGIC;
        out_channels_ch2_write : OUT STD_LOGIC;
        out_channels_ch3_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_channels_ch3_full_n : IN STD_LOGIC;
        out_channels_ch3_write : OUT STD_LOGIC;
        out_width_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_width_full_n : IN STD_LOGIC;
        out_width_write : OUT STD_LOGIC;
        out_height_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_height_full_n : IN STD_LOGIC;
        out_height_write : OUT STD_LOGIC;
        Y_scale_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        Y_scale_empty_n : IN STD_LOGIC;
        Y_scale_read : OUT STD_LOGIC;
        U_scale_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        U_scale_empty_n : IN STD_LOGIC;
        U_scale_read : OUT STD_LOGIC;
        V_scale_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        V_scale_empty_n : IN STD_LOGIC;
        V_scale_read : OUT STD_LOGIC );
    end component;


    component yuv_filter_yuv2rgb IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_channels_ch1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        in_channels_ch1_empty_n : IN STD_LOGIC;
        in_channels_ch1_read : OUT STD_LOGIC;
        in_channels_ch2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        in_channels_ch2_empty_n : IN STD_LOGIC;
        in_channels_ch2_read : OUT STD_LOGIC;
        in_channels_ch3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        in_channels_ch3_empty_n : IN STD_LOGIC;
        in_channels_ch3_read : OUT STD_LOGIC;
        in_width_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_width_empty_n : IN STD_LOGIC;
        in_width_read : OUT STD_LOGIC;
        in_height_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_height_empty_n : IN STD_LOGIC;
        in_height_read : OUT STD_LOGIC;
        out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        out_channels_ch1_ce0 : OUT STD_LOGIC;
        out_channels_ch1_we0 : OUT STD_LOGIC;
        out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        out_channels_ch2_ce0 : OUT STD_LOGIC;
        out_channels_ch2_we0 : OUT STD_LOGIC;
        out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
        out_channels_ch3_ce0 : OUT STD_LOGIC;
        out_channels_ch3_we0 : OUT STD_LOGIC;
        out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_width : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_width_ap_vld : OUT STD_LOGIC;
        out_height : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_height_ap_vld : OUT STD_LOGIC );
    end component;


    component FIFO_yuv_filter_p_yuv_channels_ch1 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_yuv_filter_p_yuv_channels_ch2 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_yuv_filter_p_yuv_channels_ch3 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_yuv_filter_p_yuv_width IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_yuv_filter_p_yuv_height IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_yuv_filter_Y_scale_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_yuv_filter_U_scale_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_yuv_filter_V_scale_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_yuv_filter_p_scale_channels_ch1 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_yuv_filter_p_scale_channels_ch2 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_yuv_filter_p_scale_channels_ch3 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_yuv_filter_p_scale_width IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_yuv_filter_p_scale_height IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    yuv_filter_rgb2yuv11_U0 : component yuv_filter_rgb2yuv11
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => yuv_filter_rgb2yuv11_U0_ap_start,
        ap_done => yuv_filter_rgb2yuv11_U0_ap_done,
        ap_continue => yuv_filter_rgb2yuv11_U0_ap_continue,
        ap_idle => yuv_filter_rgb2yuv11_U0_ap_idle,
        ap_ready => yuv_filter_rgb2yuv11_U0_ap_ready,
        in_channels_ch1_address0 => yuv_filter_rgb2yuv11_U0_in_channels_ch1_address0,
        in_channels_ch1_ce0 => yuv_filter_rgb2yuv11_U0_in_channels_ch1_ce0,
        in_channels_ch1_q0 => in_channels_ch1_q0,
        in_channels_ch2_address0 => yuv_filter_rgb2yuv11_U0_in_channels_ch2_address0,
        in_channels_ch2_ce0 => yuv_filter_rgb2yuv11_U0_in_channels_ch2_ce0,
        in_channels_ch2_q0 => in_channels_ch2_q0,
        in_channels_ch3_address0 => yuv_filter_rgb2yuv11_U0_in_channels_ch3_address0,
        in_channels_ch3_ce0 => yuv_filter_rgb2yuv11_U0_in_channels_ch3_ce0,
        in_channels_ch3_q0 => in_channels_ch3_q0,
        in_width => in_width,
        in_height => in_height,
        out_channels_ch1_din => yuv_filter_rgb2yuv11_U0_out_channels_ch1_din,
        out_channels_ch1_full_n => p_yuv_channels_ch1_full_n,
        out_channels_ch1_write => yuv_filter_rgb2yuv11_U0_out_channels_ch1_write,
        out_channels_ch2_din => yuv_filter_rgb2yuv11_U0_out_channels_ch2_din,
        out_channels_ch2_full_n => p_yuv_channels_ch2_full_n,
        out_channels_ch2_write => yuv_filter_rgb2yuv11_U0_out_channels_ch2_write,
        out_channels_ch3_din => yuv_filter_rgb2yuv11_U0_out_channels_ch3_din,
        out_channels_ch3_full_n => p_yuv_channels_ch3_full_n,
        out_channels_ch3_write => yuv_filter_rgb2yuv11_U0_out_channels_ch3_write,
        out_width_din => yuv_filter_rgb2yuv11_U0_out_width_din,
        out_width_full_n => p_yuv_width_full_n,
        out_width_write => yuv_filter_rgb2yuv11_U0_out_width_write,
        out_height_din => yuv_filter_rgb2yuv11_U0_out_height_din,
        out_height_full_n => p_yuv_height_full_n,
        out_height_write => yuv_filter_rgb2yuv11_U0_out_height_write,
        Y_scale => Y_scale,
        U_scale => U_scale,
        V_scale => V_scale,
        Y_scale_out_din => yuv_filter_rgb2yuv11_U0_Y_scale_out_din,
        Y_scale_out_full_n => Y_scale_channel_full_n,
        Y_scale_out_write => yuv_filter_rgb2yuv11_U0_Y_scale_out_write,
        U_scale_out_din => yuv_filter_rgb2yuv11_U0_U_scale_out_din,
        U_scale_out_full_n => U_scale_channel_full_n,
        U_scale_out_write => yuv_filter_rgb2yuv11_U0_U_scale_out_write,
        V_scale_out_din => yuv_filter_rgb2yuv11_U0_V_scale_out_din,
        V_scale_out_full_n => V_scale_channel_full_n,
        V_scale_out_write => yuv_filter_rgb2yuv11_U0_V_scale_out_write);

    yuv_filter_yuv_scale_U0 : component yuv_filter_yuv_scale
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => yuv_filter_yuv_scale_U0_ap_start,
        ap_done => yuv_filter_yuv_scale_U0_ap_done,
        ap_continue => yuv_filter_yuv_scale_U0_ap_continue,
        ap_idle => yuv_filter_yuv_scale_U0_ap_idle,
        ap_ready => yuv_filter_yuv_scale_U0_ap_ready,
        in_channels_ch1_dout => p_yuv_channels_ch1_dout,
        in_channels_ch1_empty_n => p_yuv_channels_ch1_empty_n,
        in_channels_ch1_read => yuv_filter_yuv_scale_U0_in_channels_ch1_read,
        in_channels_ch2_dout => p_yuv_channels_ch2_dout,
        in_channels_ch2_empty_n => p_yuv_channels_ch2_empty_n,
        in_channels_ch2_read => yuv_filter_yuv_scale_U0_in_channels_ch2_read,
        in_channels_ch3_dout => p_yuv_channels_ch3_dout,
        in_channels_ch3_empty_n => p_yuv_channels_ch3_empty_n,
        in_channels_ch3_read => yuv_filter_yuv_scale_U0_in_channels_ch3_read,
        in_width_dout => p_yuv_width_dout,
        in_width_empty_n => p_yuv_width_empty_n,
        in_width_read => yuv_filter_yuv_scale_U0_in_width_read,
        in_height_dout => p_yuv_height_dout,
        in_height_empty_n => p_yuv_height_empty_n,
        in_height_read => yuv_filter_yuv_scale_U0_in_height_read,
        out_channels_ch1_din => yuv_filter_yuv_scale_U0_out_channels_ch1_din,
        out_channels_ch1_full_n => p_scale_channels_ch1_full_n,
        out_channels_ch1_write => yuv_filter_yuv_scale_U0_out_channels_ch1_write,
        out_channels_ch2_din => yuv_filter_yuv_scale_U0_out_channels_ch2_din,
        out_channels_ch2_full_n => p_scale_channels_ch2_full_n,
        out_channels_ch2_write => yuv_filter_yuv_scale_U0_out_channels_ch2_write,
        out_channels_ch3_din => yuv_filter_yuv_scale_U0_out_channels_ch3_din,
        out_channels_ch3_full_n => p_scale_channels_ch3_full_n,
        out_channels_ch3_write => yuv_filter_yuv_scale_U0_out_channels_ch3_write,
        out_width_din => yuv_filter_yuv_scale_U0_out_width_din,
        out_width_full_n => p_scale_width_full_n,
        out_width_write => yuv_filter_yuv_scale_U0_out_width_write,
        out_height_din => yuv_filter_yuv_scale_U0_out_height_din,
        out_height_full_n => p_scale_height_full_n,
        out_height_write => yuv_filter_yuv_scale_U0_out_height_write,
        Y_scale_dout => Y_scale_channel_dout,
        Y_scale_empty_n => Y_scale_channel_empty_n,
        Y_scale_read => yuv_filter_yuv_scale_U0_Y_scale_read,
        U_scale_dout => U_scale_channel_dout,
        U_scale_empty_n => U_scale_channel_empty_n,
        U_scale_read => yuv_filter_yuv_scale_U0_U_scale_read,
        V_scale_dout => V_scale_channel_dout,
        V_scale_empty_n => V_scale_channel_empty_n,
        V_scale_read => yuv_filter_yuv_scale_U0_V_scale_read);

    yuv_filter_yuv2rgb_U0 : component yuv_filter_yuv2rgb
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => yuv_filter_yuv2rgb_U0_ap_start,
        ap_done => yuv_filter_yuv2rgb_U0_ap_done,
        ap_continue => yuv_filter_yuv2rgb_U0_ap_continue,
        ap_idle => yuv_filter_yuv2rgb_U0_ap_idle,
        ap_ready => yuv_filter_yuv2rgb_U0_ap_ready,
        in_channels_ch1_dout => p_scale_channels_ch1_dout,
        in_channels_ch1_empty_n => p_scale_channels_ch1_empty_n,
        in_channels_ch1_read => yuv_filter_yuv2rgb_U0_in_channels_ch1_read,
        in_channels_ch2_dout => p_scale_channels_ch2_dout,
        in_channels_ch2_empty_n => p_scale_channels_ch2_empty_n,
        in_channels_ch2_read => yuv_filter_yuv2rgb_U0_in_channels_ch2_read,
        in_channels_ch3_dout => p_scale_channels_ch3_dout,
        in_channels_ch3_empty_n => p_scale_channels_ch3_empty_n,
        in_channels_ch3_read => yuv_filter_yuv2rgb_U0_in_channels_ch3_read,
        in_width_dout => p_scale_width_dout,
        in_width_empty_n => p_scale_width_empty_n,
        in_width_read => yuv_filter_yuv2rgb_U0_in_width_read,
        in_height_dout => p_scale_height_dout,
        in_height_empty_n => p_scale_height_empty_n,
        in_height_read => yuv_filter_yuv2rgb_U0_in_height_read,
        out_channels_ch1_address0 => yuv_filter_yuv2rgb_U0_out_channels_ch1_address0,
        out_channels_ch1_ce0 => yuv_filter_yuv2rgb_U0_out_channels_ch1_ce0,
        out_channels_ch1_we0 => yuv_filter_yuv2rgb_U0_out_channels_ch1_we0,
        out_channels_ch1_d0 => yuv_filter_yuv2rgb_U0_out_channels_ch1_d0,
        out_channels_ch2_address0 => yuv_filter_yuv2rgb_U0_out_channels_ch2_address0,
        out_channels_ch2_ce0 => yuv_filter_yuv2rgb_U0_out_channels_ch2_ce0,
        out_channels_ch2_we0 => yuv_filter_yuv2rgb_U0_out_channels_ch2_we0,
        out_channels_ch2_d0 => yuv_filter_yuv2rgb_U0_out_channels_ch2_d0,
        out_channels_ch3_address0 => yuv_filter_yuv2rgb_U0_out_channels_ch3_address0,
        out_channels_ch3_ce0 => yuv_filter_yuv2rgb_U0_out_channels_ch3_ce0,
        out_channels_ch3_we0 => yuv_filter_yuv2rgb_U0_out_channels_ch3_we0,
        out_channels_ch3_d0 => yuv_filter_yuv2rgb_U0_out_channels_ch3_d0,
        out_width => yuv_filter_yuv2rgb_U0_out_width,
        out_width_ap_vld => yuv_filter_yuv2rgb_U0_out_width_ap_vld,
        out_height => yuv_filter_yuv2rgb_U0_out_height,
        out_height_ap_vld => yuv_filter_yuv2rgb_U0_out_height_ap_vld);

    p_yuv_channels_ch1_U : component FIFO_yuv_filter_p_yuv_channels_ch1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => yuv_filter_rgb2yuv11_U0_out_channels_ch1_din,
        if_full_n => p_yuv_channels_ch1_full_n,
        if_write => yuv_filter_rgb2yuv11_U0_out_channels_ch1_write,
        if_dout => p_yuv_channels_ch1_dout,
        if_empty_n => p_yuv_channels_ch1_empty_n,
        if_read => yuv_filter_yuv_scale_U0_in_channels_ch1_read);

    p_yuv_channels_ch2_U : component FIFO_yuv_filter_p_yuv_channels_ch2
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => yuv_filter_rgb2yuv11_U0_out_channels_ch2_din,
        if_full_n => p_yuv_channels_ch2_full_n,
        if_write => yuv_filter_rgb2yuv11_U0_out_channels_ch2_write,
        if_dout => p_yuv_channels_ch2_dout,
        if_empty_n => p_yuv_channels_ch2_empty_n,
        if_read => yuv_filter_yuv_scale_U0_in_channels_ch2_read);

    p_yuv_channels_ch3_U : component FIFO_yuv_filter_p_yuv_channels_ch3
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => yuv_filter_rgb2yuv11_U0_out_channels_ch3_din,
        if_full_n => p_yuv_channels_ch3_full_n,
        if_write => yuv_filter_rgb2yuv11_U0_out_channels_ch3_write,
        if_dout => p_yuv_channels_ch3_dout,
        if_empty_n => p_yuv_channels_ch3_empty_n,
        if_read => yuv_filter_yuv_scale_U0_in_channels_ch3_read);

    p_yuv_width_U : component FIFO_yuv_filter_p_yuv_width
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => yuv_filter_rgb2yuv11_U0_out_width_din,
        if_full_n => p_yuv_width_full_n,
        if_write => yuv_filter_rgb2yuv11_U0_out_width_write,
        if_dout => p_yuv_width_dout,
        if_empty_n => p_yuv_width_empty_n,
        if_read => yuv_filter_yuv_scale_U0_in_width_read);

    p_yuv_height_U : component FIFO_yuv_filter_p_yuv_height
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => yuv_filter_rgb2yuv11_U0_out_height_din,
        if_full_n => p_yuv_height_full_n,
        if_write => yuv_filter_rgb2yuv11_U0_out_height_write,
        if_dout => p_yuv_height_dout,
        if_empty_n => p_yuv_height_empty_n,
        if_read => yuv_filter_yuv_scale_U0_in_height_read);

    Y_scale_channel_U : component FIFO_yuv_filter_Y_scale_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => yuv_filter_rgb2yuv11_U0_Y_scale_out_din,
        if_full_n => Y_scale_channel_full_n,
        if_write => yuv_filter_rgb2yuv11_U0_Y_scale_out_write,
        if_dout => Y_scale_channel_dout,
        if_empty_n => Y_scale_channel_empty_n,
        if_read => yuv_filter_yuv_scale_U0_Y_scale_read);

    U_scale_channel_U : component FIFO_yuv_filter_U_scale_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => yuv_filter_rgb2yuv11_U0_U_scale_out_din,
        if_full_n => U_scale_channel_full_n,
        if_write => yuv_filter_rgb2yuv11_U0_U_scale_out_write,
        if_dout => U_scale_channel_dout,
        if_empty_n => U_scale_channel_empty_n,
        if_read => yuv_filter_yuv_scale_U0_U_scale_read);

    V_scale_channel_U : component FIFO_yuv_filter_V_scale_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => yuv_filter_rgb2yuv11_U0_V_scale_out_din,
        if_full_n => V_scale_channel_full_n,
        if_write => yuv_filter_rgb2yuv11_U0_V_scale_out_write,
        if_dout => V_scale_channel_dout,
        if_empty_n => V_scale_channel_empty_n,
        if_read => yuv_filter_yuv_scale_U0_V_scale_read);

    p_scale_channels_ch1_U : component FIFO_yuv_filter_p_scale_channels_ch1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => yuv_filter_yuv_scale_U0_out_channels_ch1_din,
        if_full_n => p_scale_channels_ch1_full_n,
        if_write => yuv_filter_yuv_scale_U0_out_channels_ch1_write,
        if_dout => p_scale_channels_ch1_dout,
        if_empty_n => p_scale_channels_ch1_empty_n,
        if_read => yuv_filter_yuv2rgb_U0_in_channels_ch1_read);

    p_scale_channels_ch2_U : component FIFO_yuv_filter_p_scale_channels_ch2
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => yuv_filter_yuv_scale_U0_out_channels_ch2_din,
        if_full_n => p_scale_channels_ch2_full_n,
        if_write => yuv_filter_yuv_scale_U0_out_channels_ch2_write,
        if_dout => p_scale_channels_ch2_dout,
        if_empty_n => p_scale_channels_ch2_empty_n,
        if_read => yuv_filter_yuv2rgb_U0_in_channels_ch2_read);

    p_scale_channels_ch3_U : component FIFO_yuv_filter_p_scale_channels_ch3
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => yuv_filter_yuv_scale_U0_out_channels_ch3_din,
        if_full_n => p_scale_channels_ch3_full_n,
        if_write => yuv_filter_yuv_scale_U0_out_channels_ch3_write,
        if_dout => p_scale_channels_ch3_dout,
        if_empty_n => p_scale_channels_ch3_empty_n,
        if_read => yuv_filter_yuv2rgb_U0_in_channels_ch3_read);

    p_scale_width_U : component FIFO_yuv_filter_p_scale_width
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => yuv_filter_yuv_scale_U0_out_width_din,
        if_full_n => p_scale_width_full_n,
        if_write => yuv_filter_yuv_scale_U0_out_width_write,
        if_dout => p_scale_width_dout,
        if_empty_n => p_scale_width_empty_n,
        if_read => yuv_filter_yuv2rgb_U0_in_width_read);

    p_scale_height_U : component FIFO_yuv_filter_p_scale_height
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => yuv_filter_yuv_scale_U0_out_height_din,
        if_full_n => p_scale_height_full_n,
        if_write => yuv_filter_yuv_scale_U0_out_height_write,
        if_dout => p_scale_height_dout,
        if_empty_n => p_scale_height_empty_n,
        if_read => yuv_filter_yuv2rgb_U0_in_height_read);





    yuv_filter_yuv2rgb_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                yuv_filter_yuv2rgb_U0_ap_start <= ap_const_logic_0;
            else
                yuv_filter_yuv2rgb_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    yuv_filter_yuv_scale_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                yuv_filter_yuv_scale_U0_ap_start <= ap_const_logic_0;
            else
                yuv_filter_yuv_scale_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;

    ap_done <= ap_sig_hs_done;

    ap_idle_assign_proc : process(yuv_filter_rgb2yuv11_U0_ap_idle, yuv_filter_yuv_scale_U0_ap_idle, yuv_filter_yuv2rgb_U0_ap_idle)
    begin
        if (((yuv_filter_rgb2yuv11_U0_ap_idle = ap_const_logic_1) and (ap_const_logic_1 = yuv_filter_yuv_scale_U0_ap_idle) and (ap_const_logic_1 = yuv_filter_yuv2rgb_U0_ap_idle))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= yuv_filter_rgb2yuv11_U0_ap_ready;
    ap_sig_hs_continue <= ap_const_logic_1;

    ap_sig_hs_done_assign_proc : process(yuv_filter_yuv2rgb_U0_ap_done)
    begin
        if ((ap_const_logic_1 = yuv_filter_yuv2rgb_U0_ap_done)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_sig_hs_ready <= yuv_filter_rgb2yuv11_U0_ap_ready;
    in_channels_ch1_address0 <= yuv_filter_rgb2yuv11_U0_in_channels_ch1_address0;
    in_channels_ch1_address1 <= ap_const_lv22_0;
    in_channels_ch1_ce0 <= yuv_filter_rgb2yuv11_U0_in_channels_ch1_ce0;
    in_channels_ch1_ce1 <= ap_const_logic_0;
    in_channels_ch1_d0 <= ap_const_lv8_0;
    in_channels_ch1_d1 <= ap_const_lv8_0;
    in_channels_ch1_we0 <= ap_const_logic_0;
    in_channels_ch1_we1 <= ap_const_logic_0;
    in_channels_ch2_address0 <= yuv_filter_rgb2yuv11_U0_in_channels_ch2_address0;
    in_channels_ch2_address1 <= ap_const_lv22_0;
    in_channels_ch2_ce0 <= yuv_filter_rgb2yuv11_U0_in_channels_ch2_ce0;
    in_channels_ch2_ce1 <= ap_const_logic_0;
    in_channels_ch2_d0 <= ap_const_lv8_0;
    in_channels_ch2_d1 <= ap_const_lv8_0;
    in_channels_ch2_we0 <= ap_const_logic_0;
    in_channels_ch2_we1 <= ap_const_logic_0;
    in_channels_ch3_address0 <= yuv_filter_rgb2yuv11_U0_in_channels_ch3_address0;
    in_channels_ch3_address1 <= ap_const_lv22_0;
    in_channels_ch3_ce0 <= yuv_filter_rgb2yuv11_U0_in_channels_ch3_ce0;
    in_channels_ch3_ce1 <= ap_const_logic_0;
    in_channels_ch3_d0 <= ap_const_lv8_0;
    in_channels_ch3_d1 <= ap_const_lv8_0;
    in_channels_ch3_we0 <= ap_const_logic_0;
    in_channels_ch3_we1 <= ap_const_logic_0;
    out_channels_ch1_address0 <= yuv_filter_yuv2rgb_U0_out_channels_ch1_address0;
    out_channels_ch1_address1 <= ap_const_lv22_0;
    out_channels_ch1_ce0 <= yuv_filter_yuv2rgb_U0_out_channels_ch1_ce0;
    out_channels_ch1_ce1 <= ap_const_logic_0;
    out_channels_ch1_d0 <= yuv_filter_yuv2rgb_U0_out_channels_ch1_d0;
    out_channels_ch1_d1 <= ap_const_lv8_0;
    out_channels_ch1_we0 <= yuv_filter_yuv2rgb_U0_out_channels_ch1_we0;
    out_channels_ch1_we1 <= ap_const_logic_0;
    out_channels_ch2_address0 <= yuv_filter_yuv2rgb_U0_out_channels_ch2_address0;
    out_channels_ch2_address1 <= ap_const_lv22_0;
    out_channels_ch2_ce0 <= yuv_filter_yuv2rgb_U0_out_channels_ch2_ce0;
    out_channels_ch2_ce1 <= ap_const_logic_0;
    out_channels_ch2_d0 <= yuv_filter_yuv2rgb_U0_out_channels_ch2_d0;
    out_channels_ch2_d1 <= ap_const_lv8_0;
    out_channels_ch2_we0 <= yuv_filter_yuv2rgb_U0_out_channels_ch2_we0;
    out_channels_ch2_we1 <= ap_const_logic_0;
    out_channels_ch3_address0 <= yuv_filter_yuv2rgb_U0_out_channels_ch3_address0;
    out_channels_ch3_address1 <= ap_const_lv22_0;
    out_channels_ch3_ce0 <= yuv_filter_yuv2rgb_U0_out_channels_ch3_ce0;
    out_channels_ch3_ce1 <= ap_const_logic_0;
    out_channels_ch3_d0 <= yuv_filter_yuv2rgb_U0_out_channels_ch3_d0;
    out_channels_ch3_d1 <= ap_const_lv8_0;
    out_channels_ch3_we0 <= yuv_filter_yuv2rgb_U0_out_channels_ch3_we0;
    out_channels_ch3_we1 <= ap_const_logic_0;
    out_height <= yuv_filter_yuv2rgb_U0_out_height;
    out_height_ap_vld <= yuv_filter_yuv2rgb_U0_out_height_ap_vld;
    out_width <= yuv_filter_yuv2rgb_U0_out_width;
    out_width_ap_vld <= yuv_filter_yuv2rgb_U0_out_width_ap_vld;
    yuv_filter_rgb2yuv11_U0_ap_continue <= ap_const_logic_1;
    yuv_filter_rgb2yuv11_U0_ap_start <= ap_start;
    yuv_filter_yuv2rgb_U0_ap_continue <= ap_const_logic_1;
    yuv_filter_yuv_scale_U0_ap_continue <= ap_const_logic_1;
end behav;
