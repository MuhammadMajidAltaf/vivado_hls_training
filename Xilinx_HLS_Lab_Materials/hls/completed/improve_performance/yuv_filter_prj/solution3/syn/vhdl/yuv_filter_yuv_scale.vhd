-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_yuv_scale is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch1_empty_n : IN STD_LOGIC;
    in_channels_ch1_read : OUT STD_LOGIC;
    in_channels_ch2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_empty_n : IN STD_LOGIC;
    in_channels_ch2_read : OUT STD_LOGIC;
    in_channels_ch3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_empty_n : IN STD_LOGIC;
    in_channels_ch3_read : OUT STD_LOGIC;
    in_width_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_width_empty_n : IN STD_LOGIC;
    in_width_read : OUT STD_LOGIC;
    in_height_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height_empty_n : IN STD_LOGIC;
    in_height_read : OUT STD_LOGIC;
    out_channels_ch1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch1_full_n : IN STD_LOGIC;
    out_channels_ch1_write : OUT STD_LOGIC;
    out_channels_ch2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_full_n : IN STD_LOGIC;
    out_channels_ch2_write : OUT STD_LOGIC;
    out_channels_ch3_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_full_n : IN STD_LOGIC;
    out_channels_ch3_write : OUT STD_LOGIC;
    out_width_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_width_full_n : IN STD_LOGIC;
    out_width_write : OUT STD_LOGIC;
    out_height_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_height_full_n : IN STD_LOGIC;
    out_height_write : OUT STD_LOGIC;
    Y_scale_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    Y_scale_empty_n : IN STD_LOGIC;
    Y_scale_read : OUT STD_LOGIC;
    U_scale_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    U_scale_empty_n : IN STD_LOGIC;
    U_scale_read : OUT STD_LOGIC;
    V_scale_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    V_scale_empty_n : IN STD_LOGIC;
    V_scale_read : OUT STD_LOGIC );
end;


architecture behav of yuv_filter_yuv_scale is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st7_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_22 : BOOLEAN;
    signal in_channels_ch1_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_pp0_stg0_fsm_2 : STD_LOGIC;
    signal ap_sig_87 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_305 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_channels_ch2_blk_n : STD_LOGIC;
    signal in_channels_ch3_blk_n : STD_LOGIC;
    signal in_width_blk_n : STD_LOGIC;
    signal in_height_blk_n : STD_LOGIC;
    signal out_channels_ch1_blk_n : STD_LOGIC;
    signal ap_reg_ppstg_exitcond_flatten_reg_305_pp0_iter2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_channels_ch2_blk_n : STD_LOGIC;
    signal out_channels_ch3_blk_n : STD_LOGIC;
    signal out_width_blk_n : STD_LOGIC;
    signal out_height_blk_n : STD_LOGIC;
    signal Y_scale_blk_n : STD_LOGIC;
    signal U_scale_blk_n : STD_LOGIC;
    signal V_scale_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_163 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_scale_read_reg_260 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_141 : BOOLEAN;
    signal U_scale_read_reg_265 : STD_LOGIC_VECTOR (7 downto 0);
    signal V_scale_read_reg_270 : STD_LOGIC_VECTOR (7 downto 0);
    signal width_reg_275 : STD_LOGIC_VECTOR (15 downto 0);
    signal height_reg_280 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_cast_i_fu_174_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_cast_i_reg_285 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_159 : BOOLEAN;
    signal tmp_1_cast_i_fu_177_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_cast_i_reg_290 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_cast_i_fu_180_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_cast_i_reg_295 : STD_LOGIC_VECTOR (14 downto 0);
    signal bound_fu_254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_176 : BOOLEAN;
    signal ap_sig_186 : BOOLEAN;
    signal ap_reg_ppstg_exitcond_flatten_reg_305_pp0_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_reg_314 : STD_LOGIC_VECTOR (7 downto 0);
    signal U_reg_319 : STD_LOGIC_VECTOR (7 downto 0);
    signal V_reg_324 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_i_reg_329 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_i_reg_334 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_i_reg_339 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_i_fu_203_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_i_fu_203_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_fu_211_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_fu_211_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_i_fu_219_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_i_fu_219_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_i_fu_203_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_i_fu_211_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_i_fu_219_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal bound_fu_254_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_254_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_3 : STD_LOGIC;
    signal ap_sig_298 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal bound_fu_254_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_254_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_fu_203_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_i_fu_219_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_i_fu_211_p00 : STD_LOGIC_VECTOR (14 downto 0);

    component yuv_filter_mul_mul_16ns_16ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    yuv_filter_mul_mul_16ns_16ns_32_1_U22 : component yuv_filter_mul_mul_16ns_16ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => bound_fu_254_p0,
        din1 => bound_fu_254_p1,
        dout => bound_fu_254_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_3)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_176) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_186))) and not((ap_const_lv1_0 = exitcond_flatten_fu_189_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_176) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_186))) and (ap_const_lv1_0 = exitcond_flatten_fu_189_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_176) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_186))) and not((ap_const_lv1_0 = exitcond_flatten_fu_189_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_176) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_186)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_176) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_186)))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                    ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_176) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_186))) and (ap_const_lv1_0 = exitcond_flatten_fu_189_p2))) then 
                indvar_flatten_reg_163 <= indvar_flatten_next_fu_194_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                indvar_flatten_reg_163 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond_flatten_reg_305 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_176) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_186))))) then
                U_reg_319 <= in_channels_ch2_dout;
                V_reg_324 <= in_channels_ch3_dout;
                Y_reg_314 <= in_channels_ch1_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_141))) then
                U_scale_read_reg_265 <= U_scale_dout;
                V_scale_read_reg_270 <= V_scale_dout;
                Y_scale_read_reg_260 <= Y_scale_dout;
                height_reg_280 <= in_height_dout;
                width_reg_275 <= in_width_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_176) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_186))))) then
                ap_reg_ppstg_exitcond_flatten_reg_305_pp0_iter1 <= exitcond_flatten_reg_305;
                exitcond_flatten_reg_305 <= exitcond_flatten_fu_189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_176) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_186)))) then
                ap_reg_ppstg_exitcond_flatten_reg_305_pp0_iter2 <= ap_reg_ppstg_exitcond_flatten_reg_305_pp0_iter1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                bound_reg_300 <= bound_fu_254_p2;
                    tmp_1_cast_i_reg_290(7 downto 0) <= tmp_1_cast_i_fu_177_p1(7 downto 0);
                    tmp_2_cast_i_reg_295(7 downto 0) <= tmp_2_cast_i_fu_180_p1(7 downto 0);
                    tmp_cast_i_reg_285(7 downto 0) <= tmp_cast_i_fu_174_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_176) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_186))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_305_pp0_iter1))) then
                tmp_10_i_reg_329 <= tmp_7_i_fu_203_p2(14 downto 7);
                tmp_11_i_reg_334 <= tmp_i_fu_211_p2(14 downto 7);
                tmp_12_i_reg_339 <= tmp_8_i_fu_219_p2(14 downto 7);
            end if;
        end if;
    end process;
    tmp_cast_i_reg_285(14 downto 8) <= "0000000";
    tmp_1_cast_i_reg_290(14 downto 8) <= "0000000";
    tmp_2_cast_i_reg_295(14 downto 8) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_sig_141, exitcond_flatten_fu_189_p2, ap_sig_176, ap_sig_186)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_141)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
            when ap_ST_pp0_stg0_fsm_2 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_176) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_186))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_176) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_186))) and not((ap_const_lv1_0 = exitcond_flatten_fu_189_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_176) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_186))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_176) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_186))) and not((ap_const_lv1_0 = exitcond_flatten_fu_189_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_st7_fsm_3 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    U_scale_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_sig_cseq_ST_st1_fsm_0, U_scale_empty_n)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            U_scale_blk_n <= U_scale_empty_n;
        else 
            U_scale_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    U_scale_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_141)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_141))) then 
            U_scale_read <= ap_const_logic_1;
        else 
            U_scale_read <= ap_const_logic_0;
        end if; 
    end process;


    V_scale_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_sig_cseq_ST_st1_fsm_0, V_scale_empty_n)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            V_scale_blk_n <= V_scale_empty_n;
        else 
            V_scale_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    V_scale_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_141)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_141))) then 
            V_scale_read <= ap_const_logic_1;
        else 
            V_scale_read <= ap_const_logic_0;
        end if; 
    end process;


    Y_scale_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_sig_cseq_ST_st1_fsm_0, Y_scale_empty_n)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            Y_scale_blk_n <= Y_scale_empty_n;
        else 
            Y_scale_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Y_scale_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_141)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_141))) then 
            Y_scale_read <= ap_const_logic_1;
        else 
            Y_scale_read <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st7_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st7_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_141_assign_proc : process(ap_start, ap_done_reg, in_width_empty_n, in_height_empty_n, out_width_full_n, out_height_full_n, Y_scale_empty_n, U_scale_empty_n, V_scale_empty_n)
    begin
                ap_sig_141 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (Y_scale_empty_n = ap_const_logic_0) or (U_scale_empty_n = ap_const_logic_0) or (V_scale_empty_n = ap_const_logic_0) or (in_width_empty_n = ap_const_logic_0) or (in_height_empty_n = ap_const_logic_0) or (out_width_full_n = ap_const_logic_0) or (out_height_full_n = ap_const_logic_0));
    end process;


    ap_sig_159_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_159 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_176_assign_proc : process(in_channels_ch1_empty_n, in_channels_ch2_empty_n, in_channels_ch3_empty_n, exitcond_flatten_reg_305)
    begin
                ap_sig_176 <= (((exitcond_flatten_reg_305 = ap_const_lv1_0) and (in_channels_ch1_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_305 = ap_const_lv1_0) and (in_channels_ch2_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_305 = ap_const_lv1_0) and (in_channels_ch3_empty_n = ap_const_logic_0)));
    end process;


    ap_sig_186_assign_proc : process(out_channels_ch1_full_n, out_channels_ch2_full_n, out_channels_ch3_full_n, ap_reg_ppstg_exitcond_flatten_reg_305_pp0_iter2)
    begin
                ap_sig_186 <= (((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_305_pp0_iter2) and (out_channels_ch1_full_n = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_305_pp0_iter2) and (out_channels_ch2_full_n = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_305_pp0_iter2) and (out_channels_ch3_full_n = ap_const_logic_0)));
    end process;


    ap_sig_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_298_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_298 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_87_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_87 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_2_assign_proc : process(ap_sig_87)
    begin
        if (ap_sig_87) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_22)
    begin
        if (ap_sig_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_159)
    begin
        if (ap_sig_159) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_3_assign_proc : process(ap_sig_298)
    begin
        if (ap_sig_298) then 
            ap_sig_cseq_ST_st7_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_254_p0 <= bound_fu_254_p00(16 - 1 downto 0);
    bound_fu_254_p00 <= std_logic_vector(resize(unsigned(height_reg_280),32));
    bound_fu_254_p1 <= bound_fu_254_p10(16 - 1 downto 0);
    bound_fu_254_p10 <= std_logic_vector(resize(unsigned(width_reg_275),32));
    exitcond_flatten_fu_189_p2 <= "1" when (indvar_flatten_reg_163 = bound_reg_300) else "0";

    in_channels_ch1_blk_n_assign_proc : process(in_channels_ch1_empty_n, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1, exitcond_flatten_reg_305)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_305 = ap_const_lv1_0))) then 
            in_channels_ch1_blk_n <= in_channels_ch1_empty_n;
        else 
            in_channels_ch1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_channels_ch1_read_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it3, exitcond_flatten_reg_305, ap_sig_176, ap_sig_186)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_305 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_176) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_186))))) then 
            in_channels_ch1_read <= ap_const_logic_1;
        else 
            in_channels_ch1_read <= ap_const_logic_0;
        end if; 
    end process;


    in_channels_ch2_blk_n_assign_proc : process(in_channels_ch2_empty_n, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1, exitcond_flatten_reg_305)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_305 = ap_const_lv1_0))) then 
            in_channels_ch2_blk_n <= in_channels_ch2_empty_n;
        else 
            in_channels_ch2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_channels_ch2_read_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it3, exitcond_flatten_reg_305, ap_sig_176, ap_sig_186)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_305 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_176) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_186))))) then 
            in_channels_ch2_read <= ap_const_logic_1;
        else 
            in_channels_ch2_read <= ap_const_logic_0;
        end if; 
    end process;


    in_channels_ch3_blk_n_assign_proc : process(in_channels_ch3_empty_n, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1, exitcond_flatten_reg_305)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_305 = ap_const_lv1_0))) then 
            in_channels_ch3_blk_n <= in_channels_ch3_empty_n;
        else 
            in_channels_ch3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_channels_ch3_read_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it3, exitcond_flatten_reg_305, ap_sig_176, ap_sig_186)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_305 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_176) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_186))))) then 
            in_channels_ch3_read <= ap_const_logic_1;
        else 
            in_channels_ch3_read <= ap_const_logic_0;
        end if; 
    end process;


    in_height_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_sig_cseq_ST_st1_fsm_0, in_height_empty_n)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            in_height_blk_n <= in_height_empty_n;
        else 
            in_height_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_height_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_141)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_141))) then 
            in_height_read <= ap_const_logic_1;
        else 
            in_height_read <= ap_const_logic_0;
        end if; 
    end process;


    in_width_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_sig_cseq_ST_st1_fsm_0, in_width_empty_n)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            in_width_blk_n <= in_width_empty_n;
        else 
            in_width_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_width_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_141)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_141))) then 
            in_width_read <= ap_const_logic_1;
        else 
            in_width_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_194_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_163) + unsigned(ap_const_lv32_1));

    out_channels_ch1_blk_n_assign_proc : process(out_channels_ch1_full_n, ap_reg_ppiten_pp0_it3, ap_reg_ppstg_exitcond_flatten_reg_305_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_305_pp0_iter2))) then 
            out_channels_ch1_blk_n <= out_channels_ch1_full_n;
        else 
            out_channels_ch1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_channels_ch1_din <= tmp_10_i_reg_329;

    out_channels_ch1_write_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it3, ap_reg_ppstg_exitcond_flatten_reg_305_pp0_iter2, ap_sig_176, ap_sig_186)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_305_pp0_iter2) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_176) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_186))))) then 
            out_channels_ch1_write <= ap_const_logic_1;
        else 
            out_channels_ch1_write <= ap_const_logic_0;
        end if; 
    end process;


    out_channels_ch2_blk_n_assign_proc : process(out_channels_ch2_full_n, ap_reg_ppiten_pp0_it3, ap_reg_ppstg_exitcond_flatten_reg_305_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_305_pp0_iter2))) then 
            out_channels_ch2_blk_n <= out_channels_ch2_full_n;
        else 
            out_channels_ch2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_channels_ch2_din <= tmp_11_i_reg_334;

    out_channels_ch2_write_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it3, ap_reg_ppstg_exitcond_flatten_reg_305_pp0_iter2, ap_sig_176, ap_sig_186)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_305_pp0_iter2) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_176) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_186))))) then 
            out_channels_ch2_write <= ap_const_logic_1;
        else 
            out_channels_ch2_write <= ap_const_logic_0;
        end if; 
    end process;


    out_channels_ch3_blk_n_assign_proc : process(out_channels_ch3_full_n, ap_reg_ppiten_pp0_it3, ap_reg_ppstg_exitcond_flatten_reg_305_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_305_pp0_iter2))) then 
            out_channels_ch3_blk_n <= out_channels_ch3_full_n;
        else 
            out_channels_ch3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_channels_ch3_din <= tmp_12_i_reg_339;

    out_channels_ch3_write_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it3, ap_reg_ppstg_exitcond_flatten_reg_305_pp0_iter2, ap_sig_176, ap_sig_186)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_305_pp0_iter2) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and ap_sig_176) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and ap_sig_186))))) then 
            out_channels_ch3_write <= ap_const_logic_1;
        else 
            out_channels_ch3_write <= ap_const_logic_0;
        end if; 
    end process;


    out_height_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_sig_cseq_ST_st1_fsm_0, out_height_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            out_height_blk_n <= out_height_full_n;
        else 
            out_height_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_height_din <= in_height_dout;

    out_height_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_141)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_141))) then 
            out_height_write <= ap_const_logic_1;
        else 
            out_height_write <= ap_const_logic_0;
        end if; 
    end process;


    out_width_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_sig_cseq_ST_st1_fsm_0, out_width_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            out_width_blk_n <= out_width_full_n;
        else 
            out_width_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_width_din <= in_width_dout;

    out_width_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_141)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_141))) then 
            out_width_write <= ap_const_logic_1;
        else 
            out_width_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_cast_i_fu_177_p1 <= std_logic_vector(resize(unsigned(U_scale_read_reg_265),15));
    tmp_2_cast_i_fu_180_p1 <= std_logic_vector(resize(unsigned(V_scale_read_reg_270),15));
    tmp_7_i_fu_203_p0 <= tmp_7_i_fu_203_p00(8 - 1 downto 0);
    tmp_7_i_fu_203_p00 <= std_logic_vector(resize(unsigned(Y_reg_314),15));
    tmp_7_i_fu_203_p1 <= tmp_cast_i_reg_285(8 - 1 downto 0);
    tmp_7_i_fu_203_p2 <= std_logic_vector(resize(unsigned(tmp_7_i_fu_203_p0) * unsigned(tmp_7_i_fu_203_p1), 15));
    tmp_8_i_fu_219_p0 <= tmp_8_i_fu_219_p00(8 - 1 downto 0);
    tmp_8_i_fu_219_p00 <= std_logic_vector(resize(unsigned(V_reg_324),15));
    tmp_8_i_fu_219_p1 <= tmp_2_cast_i_reg_295(8 - 1 downto 0);
    tmp_8_i_fu_219_p2 <= std_logic_vector(resize(unsigned(tmp_8_i_fu_219_p0) * unsigned(tmp_8_i_fu_219_p1), 15));
    tmp_cast_i_fu_174_p1 <= std_logic_vector(resize(unsigned(Y_scale_read_reg_260),15));
    tmp_i_fu_211_p0 <= tmp_i_fu_211_p00(8 - 1 downto 0);
    tmp_i_fu_211_p00 <= std_logic_vector(resize(unsigned(U_reg_319),15));
    tmp_i_fu_211_p1 <= tmp_1_cast_i_reg_290(8 - 1 downto 0);
    tmp_i_fu_211_p2 <= std_logic_vector(resize(unsigned(tmp_i_fu_211_p0) * unsigned(tmp_i_fu_211_p1), 15));
end behav;
