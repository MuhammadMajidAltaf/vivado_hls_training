-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_rgb2yuv11 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_width : IN STD_LOGIC_VECTOR (15 downto 0);
    in_height : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch1_full_n : IN STD_LOGIC;
    out_channels_ch1_write : OUT STD_LOGIC;
    out_channels_ch2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_full_n : IN STD_LOGIC;
    out_channels_ch2_write : OUT STD_LOGIC;
    out_channels_ch3_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_full_n : IN STD_LOGIC;
    out_channels_ch3_write : OUT STD_LOGIC;
    out_width_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_width_full_n : IN STD_LOGIC;
    out_width_write : OUT STD_LOGIC;
    out_height_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_height_full_n : IN STD_LOGIC;
    out_height_write : OUT STD_LOGIC;
    Y_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    U_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    V_scale : IN STD_LOGIC_VECTOR (7 downto 0);
    Y_scale_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    Y_scale_out_full_n : IN STD_LOGIC;
    Y_scale_out_write : OUT STD_LOGIC;
    U_scale_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    U_scale_out_full_n : IN STD_LOGIC;
    U_scale_out_write : OUT STD_LOGIC;
    V_scale_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    V_scale_out_full_n : IN STD_LOGIC;
    V_scale_out_write : OUT STD_LOGIC );
end;


architecture behav of yuv_filter_rgb2yuv11 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st9_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_80 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv13_19 : STD_LOGIC_VECTOR (12 downto 0) := "0000000011001";
    constant ap_const_lv16_FFA2 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110100010";
    constant ap_const_lv15_7A : STD_LOGIC_VECTOR (14 downto 0) := "000000001111010";
    constant ap_const_lv15_80 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_const_lv16_FFB6 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110110110";
    constant ap_const_lv15_7FDA : STD_LOGIC_VECTOR (14 downto 0) := "111111111011010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_21 : BOOLEAN;
    signal out_channels_ch1_blk_n : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_659 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter5 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_channels_ch2_blk_n : STD_LOGIC;
    signal out_channels_ch3_blk_n : STD_LOGIC;
    signal out_width_blk_n : STD_LOGIC;
    signal out_height_blk_n : STD_LOGIC;
    signal Y_scale_out_blk_n : STD_LOGIC;
    signal U_scale_out_blk_n : STD_LOGIC;
    signal V_scale_out_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_i_i_reg_272 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_i_i_reg_283 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_134 : BOOLEAN;
    signal bound_fu_607_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_145 : BOOLEAN;
    signal ap_sig_155 : BOOLEAN;
    signal ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter4 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_mid2_v_fu_332_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i_i_mid2_v_reg_668 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_fu_374_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_24_reg_673 : STD_LOGIC_VECTOR (22 downto 0);
    signal y_fu_380_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal R_reg_698 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_reg_705 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_reg_712 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_i_i_fu_392_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl3_i_i_reg_719 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_neg_i_i_fu_404_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_neg_i_i_reg_724 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_50_i_i_reg_729 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_58_i_i_reg_734 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_i_i_reg_739 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_i_i_phi_fu_276_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_cast_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_i_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_313_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_fu_340_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_23_fu_352_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl_cast_fu_344_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl1_cast_fu_356_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal y_i_i_mid2_fu_324_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i_i_cast_fu_370_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_s_fu_364_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl3_cast7_i_i_fu_400_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl5_i_i_fu_413_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl6_i_i_fu_424_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_i_i_fu_441_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl6_cast_i_i_cast_fu_431_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_455_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_fu_461_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl5_cast_i_i_fu_420_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_46_i_i_fu_465_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl4_cast_i_i_fu_448_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_46_cast_i_i_fu_471_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_598_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp2_cast_fu_481_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_475_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_48_i_i_fu_484_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl2_i_i_fu_500_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl2_cast_i_i_fu_507_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl3_cast_i_i_fu_511_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_640_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_53_i_i_fu_514_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_54_cast_i_i_fu_520_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_631_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl1_i_i_fu_541_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_neg_cast_i_i_fu_538_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_cast_i_i_fu_548_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_61_i_i_fu_552_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_622_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_62_cast_i_i_fu_562_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_61_cast_i_i_fu_558_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_613_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_598_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_598_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_598_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound_fu_607_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_607_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_613_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_613_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_cast11_i_i_fu_435_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_613_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_622_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_622_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_40_cast14_i_i_fu_410_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_622_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_631_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_631_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_631_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_640_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_640_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_640_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_2 : STD_LOGIC;
    signal ap_sig_494 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal bound_fu_607_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_607_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_598_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_598_p20 : STD_LOGIC_VECTOR (12 downto 0);

    component yuv_filter_mac_muladd_6ns_8ns_8ns_13_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component yuv_filter_mul_mul_16ns_16ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8s_8ns_16ns_16_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8ns_8ns_9ns_15_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component yuv_filter_mac_muladd_7s_8ns_9ns_15_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    yuv_filter_mac_muladd_6ns_8ns_8ns_13_1_U0 : component yuv_filter_mac_muladd_6ns_8ns_8ns_13_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_598_p0,
        din1 => grp_fu_598_p1,
        din2 => grp_fu_598_p2,
        dout => grp_fu_598_p3);

    yuv_filter_mul_mul_16ns_16ns_32_1_U1 : component yuv_filter_mul_mul_16ns_16ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => bound_fu_607_p0,
        din1 => bound_fu_607_p1,
        dout => bound_fu_607_p2);

    yuv_filter_mac_muladd_8s_8ns_16ns_16_1_U2 : component yuv_filter_mac_muladd_8s_8ns_16ns_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_613_p0,
        din1 => grp_fu_613_p1,
        din2 => grp_fu_613_p2,
        dout => grp_fu_613_p3);

    yuv_filter_mac_muladd_8ns_8ns_9ns_15_1_U3 : component yuv_filter_mac_muladd_8ns_8ns_9ns_15_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 9,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_622_p0,
        din1 => grp_fu_622_p1,
        din2 => grp_fu_622_p2,
        dout => grp_fu_622_p3);

    yuv_filter_mac_muladd_8s_8ns_16ns_16_1_U4 : component yuv_filter_mac_muladd_8s_8ns_16ns_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_631_p0,
        din1 => grp_fu_631_p1,
        din2 => grp_fu_631_p2,
        dout => grp_fu_631_p3);

    yuv_filter_mac_muladd_7s_8ns_9ns_15_1_U5 : component yuv_filter_mac_muladd_7s_8ns_9ns_15_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        din2_WIDTH => 9,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_640_p0,
        din1 => grp_fu_640_p1,
        din2 => grp_fu_640_p2,
        dout => grp_fu_640_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155)) and not((ap_const_lv1_0 = exitcond_flatten_fu_302_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_134))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155)) and (ap_const_lv1_0 = exitcond_flatten_fu_302_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_134)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155)) and not((ap_const_lv1_0 = exitcond_flatten_fu_302_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_134))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155)) and (ap_const_lv1_0 = exitcond_flatten_fu_302_p2))) then 
                indvar_flatten_reg_261 <= indvar_flatten_next_fu_307_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_134))) then 
                indvar_flatten_reg_261 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_i_i_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155)) and (exitcond_flatten_reg_659 = ap_const_lv1_0))) then 
                x_i_i_reg_272 <= tmp_i_i_mid2_v_reg_668;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_134))) then 
                x_i_i_reg_272 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    y_i_i_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155)) and (ap_const_lv1_0 = exitcond_flatten_fu_302_p2))) then 
                y_i_i_reg_283 <= y_fu_380_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_134))) then 
                y_i_i_reg_283 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155)) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter3))) then
                B_reg_712 <= in_channels_ch3_q0;
                G_reg_705 <= in_channels_ch2_q0;
                R_reg_698 <= in_channels_ch1_q0;
                    p_neg_i_i_reg_724(12 downto 4) <= p_neg_i_i_fu_404_p2(12 downto 4);
                    p_shl3_i_i_reg_719(11 downto 4) <= p_shl3_i_i_fu_392_p3(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155)))) then
                ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter1 <= exitcond_flatten_reg_659;
                exitcond_flatten_reg_659 <= exitcond_flatten_fu_302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155))) then
                ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter2 <= ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter1;
                ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter3 <= ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter2;
                ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter4 <= ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter3;
                ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter5 <= ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_134))) then
                bound_reg_654 <= bound_fu_607_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155)) and (ap_const_lv1_0 = exitcond_flatten_fu_302_p2))) then
                tmp_24_reg_673 <= tmp_24_fu_374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155)) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter4))) then
                tmp_50_i_i_reg_729 <= tmp_48_i_i_fu_484_p2(15 downto 8);
                tmp_58_i_i_reg_734 <= grp_fu_631_p3(15 downto 8);
                tmp_66_i_i_reg_739 <= grp_fu_613_p3(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155)) and (ap_const_lv1_0 = exitcond_flatten_fu_302_p2))) then
                tmp_i_i_mid2_v_reg_668 <= tmp_i_i_mid2_v_fu_332_p3;
            end if;
        end if;
    end process;
    p_shl3_i_i_reg_719(3 downto 0) <= "0000";
    p_neg_i_i_reg_724(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it5, ap_sig_134, exitcond_flatten_fu_302_p2, ap_sig_155)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_134)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155)) and not((ap_const_lv1_0 = exitcond_flatten_fu_302_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155)) and not((ap_const_lv1_0 = exitcond_flatten_fu_302_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_st9_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    U_scale_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_sig_cseq_ST_st1_fsm_0, U_scale_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            U_scale_out_blk_n <= U_scale_out_full_n;
        else 
            U_scale_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    U_scale_out_din <= U_scale;

    U_scale_out_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_134)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_134))) then 
            U_scale_out_write <= ap_const_logic_1;
        else 
            U_scale_out_write <= ap_const_logic_0;
        end if; 
    end process;


    V_scale_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_sig_cseq_ST_st1_fsm_0, V_scale_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            V_scale_out_blk_n <= V_scale_out_full_n;
        else 
            V_scale_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    V_scale_out_din <= V_scale;

    V_scale_out_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_134)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_134))) then 
            V_scale_out_write <= ap_const_logic_1;
        else 
            V_scale_out_write <= ap_const_logic_0;
        end if; 
    end process;


    Y_scale_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_sig_cseq_ST_st1_fsm_0, Y_scale_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            Y_scale_out_blk_n <= Y_scale_out_full_n;
        else 
            Y_scale_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Y_scale_out_din <= Y_scale;

    Y_scale_out_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_134)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_134))) then 
            Y_scale_out_write <= ap_const_logic_1;
        else 
            Y_scale_out_write <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st9_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st9_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_134_assign_proc : process(ap_start, ap_done_reg, out_width_full_n, out_height_full_n, Y_scale_out_full_n, U_scale_out_full_n, V_scale_out_full_n)
    begin
                ap_sig_134 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (Y_scale_out_full_n = ap_const_logic_0) or (U_scale_out_full_n = ap_const_logic_0) or (V_scale_out_full_n = ap_const_logic_0) or (out_width_full_n = ap_const_logic_0) or (out_height_full_n = ap_const_logic_0));
    end process;


    ap_sig_145_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_145 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_155_assign_proc : process(out_channels_ch1_full_n, out_channels_ch2_full_n, out_channels_ch3_full_n, ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter5)
    begin
                ap_sig_155 <= (((ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter5 = ap_const_lv1_0) and (out_channels_ch1_full_n = ap_const_logic_0)) or ((ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter5 = ap_const_lv1_0) and (out_channels_ch2_full_n = ap_const_logic_0)) or ((ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter5 = ap_const_lv1_0) and (out_channels_ch3_full_n = ap_const_logic_0)));
    end process;


    ap_sig_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_494_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_494 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_145)
    begin
        if (ap_sig_145) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_21)
    begin
        if (ap_sig_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_2_assign_proc : process(ap_sig_494)
    begin
        if (ap_sig_494) then 
            ap_sig_cseq_ST_st9_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_607_p0 <= bound_fu_607_p00(16 - 1 downto 0);
    bound_fu_607_p00 <= std_logic_vector(resize(unsigned(in_height),32));
    bound_fu_607_p1 <= bound_fu_607_p10(16 - 1 downto 0);
    bound_fu_607_p10 <= std_logic_vector(resize(unsigned(in_width),32));
    exitcond_flatten_fu_302_p2 <= "1" when (indvar_flatten_reg_261 = bound_reg_654) else "0";
    exitcond_i_i_fu_319_p2 <= "1" when (y_i_i_reg_283 = in_height) else "0";
    grp_fu_598_p0 <= ap_const_lv13_19(6 - 1 downto 0);
    grp_fu_598_p1 <= grp_fu_598_p10(8 - 1 downto 0);
    grp_fu_598_p10 <= std_logic_vector(resize(unsigned(B_reg_712),13));
    grp_fu_598_p2 <= grp_fu_598_p20(8 - 1 downto 0);
    grp_fu_598_p20 <= std_logic_vector(resize(unsigned(G_reg_705),13));
    grp_fu_613_p0 <= ap_const_lv16_FFA2(8 - 1 downto 0);
    grp_fu_613_p1 <= tmp_42_cast11_i_i_fu_435_p1(8 - 1 downto 0);
    grp_fu_613_p2 <= std_logic_vector(unsigned(tmp_62_cast_i_i_fu_562_p1) + unsigned(tmp_61_cast_i_i_fu_558_p1));
    grp_fu_622_p0 <= ap_const_lv15_7A(8 - 1 downto 0);
    grp_fu_622_p1 <= tmp_40_cast14_i_i_fu_410_p1(8 - 1 downto 0);
    grp_fu_622_p2 <= ap_const_lv15_80(9 - 1 downto 0);
    grp_fu_631_p0 <= ap_const_lv16_FFB6(8 - 1 downto 0);
    grp_fu_631_p1 <= tmp_42_cast11_i_i_fu_435_p1(8 - 1 downto 0);
    grp_fu_631_p2 <= std_logic_vector(unsigned(tmp_53_i_i_fu_514_p2) + unsigned(tmp_54_cast_i_i_fu_520_p1));
    grp_fu_640_p0 <= ap_const_lv15_7FDA(7 - 1 downto 0);
    grp_fu_640_p1 <= tmp_40_cast14_i_i_fu_410_p1(8 - 1 downto 0);
    grp_fu_640_p2 <= ap_const_lv15_80(9 - 1 downto 0);
    in_channels_ch1_address0 <= tmp_28_cast_fu_386_p1(22 - 1 downto 0);

    in_channels_ch1_ce0_assign_proc : process(ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_155)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155))))) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= tmp_28_cast_fu_386_p1(22 - 1 downto 0);

    in_channels_ch2_ce0_assign_proc : process(ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_155)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155))))) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= tmp_28_cast_fu_386_p1(22 - 1 downto 0);

    in_channels_ch3_ce0_assign_proc : process(ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_155)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155))))) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_307_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_261) + unsigned(ap_const_lv32_1));

    out_channels_ch1_blk_n_assign_proc : process(out_channels_ch1_full_n, ap_reg_ppiten_pp0_it6, ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter5)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter5 = ap_const_lv1_0))) then 
            out_channels_ch1_blk_n <= out_channels_ch1_full_n;
        else 
            out_channels_ch1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_channels_ch1_din <= std_logic_vector(unsigned(ap_const_lv8_10) + unsigned(tmp_50_i_i_reg_729));

    out_channels_ch1_write_assign_proc : process(ap_reg_ppiten_pp0_it6, ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter5, ap_sig_155)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter5 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155)))) then 
            out_channels_ch1_write <= ap_const_logic_1;
        else 
            out_channels_ch1_write <= ap_const_logic_0;
        end if; 
    end process;


    out_channels_ch2_blk_n_assign_proc : process(out_channels_ch2_full_n, ap_reg_ppiten_pp0_it6, ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter5)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter5 = ap_const_lv1_0))) then 
            out_channels_ch2_blk_n <= out_channels_ch2_full_n;
        else 
            out_channels_ch2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_channels_ch2_din <= (tmp_58_i_i_reg_734 xor ap_const_lv8_80);

    out_channels_ch2_write_assign_proc : process(ap_reg_ppiten_pp0_it6, ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter5, ap_sig_155)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter5 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155)))) then 
            out_channels_ch2_write <= ap_const_logic_1;
        else 
            out_channels_ch2_write <= ap_const_logic_0;
        end if; 
    end process;


    out_channels_ch3_blk_n_assign_proc : process(out_channels_ch3_full_n, ap_reg_ppiten_pp0_it6, ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter5)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter5 = ap_const_lv1_0))) then 
            out_channels_ch3_blk_n <= out_channels_ch3_full_n;
        else 
            out_channels_ch3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_channels_ch3_din <= (tmp_66_i_i_reg_739 xor ap_const_lv8_80);

    out_channels_ch3_write_assign_proc : process(ap_reg_ppiten_pp0_it6, ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter5, ap_sig_155)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_reg_ppstg_exitcond_flatten_reg_659_pp0_iter5 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and ap_sig_155)))) then 
            out_channels_ch3_write <= ap_const_logic_1;
        else 
            out_channels_ch3_write <= ap_const_logic_0;
        end if; 
    end process;


    out_height_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_sig_cseq_ST_st1_fsm_0, out_height_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            out_height_blk_n <= out_height_full_n;
        else 
            out_height_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_height_din <= in_height;

    out_height_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_134)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_134))) then 
            out_height_write <= ap_const_logic_1;
        else 
            out_height_write <= ap_const_logic_0;
        end if; 
    end process;


    out_width_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_sig_cseq_ST_st1_fsm_0, out_width_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            out_width_blk_n <= out_width_full_n;
        else 
            out_width_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_width_din <= in_width;

    out_width_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_134)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_134))) then 
            out_width_write <= ap_const_logic_1;
        else 
            out_width_write <= ap_const_logic_0;
        end if; 
    end process;

        p_neg_cast_i_i_fu_538_p1 <= std_logic_vector(resize(signed(p_neg_i_i_reg_724),14));

    p_neg_i_i_fu_404_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(p_shl3_cast7_i_i_fu_400_p1));
    p_shl1_cast_fu_356_p3 <= (tmp_23_fu_352_p1 & ap_const_lv8_0);
    p_shl1_cast_i_i_fu_548_p1 <= std_logic_vector(resize(unsigned(p_shl1_i_i_fu_541_p3),14));
    p_shl1_i_i_fu_541_p3 <= (B_reg_712 & ap_const_lv1_0);
    p_shl2_cast_i_i_fu_507_p1 <= std_logic_vector(resize(unsigned(p_shl2_i_i_fu_500_p3),16));
    p_shl2_i_i_fu_500_p3 <= (B_reg_712 & ap_const_lv7_0);
    p_shl3_cast7_i_i_fu_400_p1 <= std_logic_vector(resize(unsigned(p_shl3_i_i_fu_392_p3),13));
    p_shl3_cast_i_i_fu_511_p1 <= std_logic_vector(resize(unsigned(p_shl3_i_i_reg_719),16));
    p_shl3_i_i_fu_392_p3 <= (in_channels_ch3_q0 & ap_const_lv4_0);
    p_shl4_cast_i_i_fu_448_p1 <= std_logic_vector(resize(unsigned(p_shl4_i_i_fu_441_p3),16));
    p_shl4_i_i_fu_441_p3 <= (G_reg_705 & ap_const_lv7_0);
    p_shl5_cast_i_i_fu_420_p1 <= std_logic_vector(resize(unsigned(p_shl5_i_i_fu_413_p3),15));
    p_shl5_i_i_fu_413_p3 <= (R_reg_698 & ap_const_lv6_0);
    p_shl6_cast_i_i_cast_fu_431_p1 <= std_logic_vector(resize(unsigned(p_shl6_i_i_fu_424_p3),10));
    p_shl6_i_i_fu_424_p3 <= (R_reg_698 & ap_const_lv1_0);
    p_shl_cast_fu_344_p3 <= (tmp_22_fu_340_p1 & ap_const_lv10_0);
    tmp1_fu_475_p2 <= std_logic_vector(unsigned(p_shl4_cast_i_i_fu_448_p1) + unsigned(tmp_46_cast_i_i_fu_471_p1));
    tmp2_cast_fu_481_p1 <= std_logic_vector(resize(unsigned(grp_fu_598_p3),16));
    tmp_22_fu_340_p1 <= tmp_i_i_mid2_v_fu_332_p3(13 - 1 downto 0);
    tmp_23_fu_352_p1 <= tmp_i_i_mid2_v_fu_332_p3(15 - 1 downto 0);
    tmp_24_fu_374_p2 <= std_logic_vector(unsigned(tmp_i_i_cast_fu_370_p1) + unsigned(tmp_s_fu_364_p2));
    tmp_28_cast_fu_386_p1 <= std_logic_vector(resize(unsigned(tmp_24_reg_673),64));
    tmp_40_cast14_i_i_fu_410_p1 <= std_logic_vector(resize(unsigned(R_reg_698),15));
    tmp_42_cast11_i_i_fu_435_p1 <= std_logic_vector(resize(unsigned(G_reg_705),16));
    tmp_46_cast_i_i_fu_471_p1 <= std_logic_vector(resize(unsigned(tmp_46_i_i_fu_465_p2),16));
    tmp_46_i_i_fu_465_p2 <= std_logic_vector(unsigned(tmp_cast_fu_461_p1) + unsigned(p_shl5_cast_i_i_fu_420_p1));
    tmp_48_i_i_fu_484_p2 <= std_logic_vector(unsigned(tmp2_cast_fu_481_p1) + unsigned(tmp1_fu_475_p2));
    tmp_53_i_i_fu_514_p2 <= std_logic_vector(unsigned(p_shl2_cast_i_i_fu_507_p1) - unsigned(p_shl3_cast_i_i_fu_511_p1));
        tmp_54_cast_i_i_fu_520_p1 <= std_logic_vector(resize(signed(grp_fu_640_p3),16));

        tmp_61_cast_i_i_fu_558_p1 <= std_logic_vector(resize(signed(tmp_61_i_i_fu_552_p2),16));

    tmp_61_i_i_fu_552_p2 <= std_logic_vector(signed(p_neg_cast_i_i_fu_538_p1) - signed(p_shl1_cast_i_i_fu_548_p1));
    tmp_62_cast_i_i_fu_562_p1 <= std_logic_vector(resize(unsigned(grp_fu_622_p3),16));
    tmp_cast_fu_461_p1 <= std_logic_vector(resize(unsigned(tmp_fu_455_p2),15));
    tmp_fu_455_p2 <= std_logic_vector(unsigned(ap_const_lv10_80) + unsigned(p_shl6_cast_i_i_cast_fu_431_p1));
    tmp_i_i_cast_fu_370_p1 <= std_logic_vector(resize(unsigned(y_i_i_mid2_fu_324_p3),23));
    tmp_i_i_mid2_v_fu_332_p3 <= 
        x_fu_313_p2 when (exitcond_i_i_fu_319_p2(0) = '1') else 
        x_i_i_phi_fu_276_p4;
    tmp_s_fu_364_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_344_p3) + unsigned(p_shl1_cast_fu_356_p3));
    x_fu_313_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(x_i_i_phi_fu_276_p4));

    x_i_i_phi_fu_276_p4_assign_proc : process(ap_reg_ppiten_pp0_it1, exitcond_flatten_reg_659, x_i_i_reg_272, ap_sig_cseq_ST_pp0_stg0_fsm_1, tmp_i_i_mid2_v_reg_668)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_reg_659 = ap_const_lv1_0))) then 
            x_i_i_phi_fu_276_p4 <= tmp_i_i_mid2_v_reg_668;
        else 
            x_i_i_phi_fu_276_p4 <= x_i_i_reg_272;
        end if; 
    end process;

    y_fu_380_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(y_i_i_mid2_fu_324_p3));
    y_i_i_mid2_fu_324_p3 <= 
        ap_const_lv16_0 when (exitcond_i_i_fu_319_p2(0) = '1') else 
        y_i_i_reg_283;
end behav;
