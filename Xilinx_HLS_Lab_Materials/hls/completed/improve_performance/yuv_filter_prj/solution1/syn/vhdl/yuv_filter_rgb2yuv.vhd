-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_rgb2yuv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_width : IN STD_LOGIC_VECTOR (15 downto 0);
    out_height : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of yuv_filter_rgb2yuv is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_FFB6 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110110110";
    constant ap_const_lv16_7A : STD_LOGIC_VECTOR (15 downto 0) := "0000000001111010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv9_80 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_80 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv14_80 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv16_FFA2 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110100010";
    constant ap_const_lv15_7FDA : STD_LOGIC_VECTOR (14 downto 0) := "111111111011010";
    constant ap_const_lv13_19 : STD_LOGIC_VECTOR (12 downto 0) := "0000000011001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_27 : BOOLEAN;
    signal x_2_fu_213_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_2_reg_552 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_90 : BOOLEAN;
    signal tmp_22_fu_243_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_22_reg_557 : STD_LOGIC_VECTOR (22 downto 0);
    signal exitcond1_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_2_fu_264_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_2_reg_565 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_105 : BOOLEAN;
    signal tmp_24_cast_fu_279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_cast_reg_570 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_123 : BOOLEAN;
    signal R_reg_593 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_131 : BOOLEAN;
    signal G_reg_601 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_reg_608 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_140 : BOOLEAN;
    signal tmp_35_cast1_fu_288_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_cast1_reg_616 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_fu_291_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_reg_621 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_33_fu_297_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_33_reg_626 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_reg_631 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_155 : BOOLEAN;
    signal tmp_32_reg_636 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_reg_641 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_168 : BOOLEAN;
    signal x_reg_186 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_reg_197 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_192 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_200 : BOOLEAN;
    signal tmp_fu_219_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_21_fu_231_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl_cast_fu_223_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl7_cast_fu_235_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_cast_fu_270_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_24_fu_274_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_29_fu_291_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_fu_297_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl5_fu_306_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl6_fu_317_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_fu_331_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl6_cast_fu_324_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl5_cast_fu_313_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_fu_345_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_cast_fu_351_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl4_cast_fu_338_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_cast2_fu_328_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_fu_361_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_528_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp3_cast_fu_371_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_355_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_26_fu_374_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl2_fu_390_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl3_fu_401_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl2_cast_fu_397_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl3_cast_fu_412_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_fu_416_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp6_fu_422_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_520_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_31_fu_428_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_31_fu_428_p2 : signal is "no";
    signal p_shl3_cast9_fu_408_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_neg_fu_443_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl1_fu_453_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_neg_cast_fu_449_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_cast_fu_460_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_35_fu_464_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp8_fu_470_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp8_cast_fu_476_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_513_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_fu_480_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp_36_fu_480_p2 : signal is "no";
    signal grp_fu_513_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_513_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_520_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_520_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_528_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_528_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_528_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_520_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_528_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_528_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_29_fu_291_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_33_fu_297_p00 : STD_LOGIC_VECTOR (15 downto 0);

    component yuv_filter_mac_muladd_8ns_8s_16ns_16_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8ns_7s_16ns_16_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8ns_6ns_9ns_13_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    yuv_filter_mac_muladd_8ns_8s_16ns_16_1_U0 : component yuv_filter_mac_muladd_8ns_8s_16ns_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_513_p0,
        din1 => grp_fu_513_p1,
        din2 => tmp_33_reg_626,
        dout => grp_fu_513_p3);

    yuv_filter_mac_muladd_8ns_7s_16ns_16_1_U1 : component yuv_filter_mac_muladd_8ns_7s_16ns_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_520_p0,
        din1 => grp_fu_520_p1,
        din2 => tmp_29_reg_621,
        dout => grp_fu_520_p3);

    yuv_filter_mac_muladd_8ns_6ns_9ns_13_1_U2 : component yuv_filter_mac_muladd_8ns_6ns_9ns_13_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 9,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_528_p0,
        din1 => grp_fu_528_p1,
        din2 => grp_fu_528_p2,
        dout => grp_fu_528_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    x_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond_fu_259_p2)))) then 
                x_reg_186 <= x_2_reg_552;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                x_reg_186 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    y_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                y_reg_197 <= y_2_reg_565;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_208_p2 = ap_const_lv1_0))) then 
                y_reg_197 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                B_reg_608 <= in_channels_ch3_q0;
                    tmp_29_reg_621(15 downto 1) <= tmp_29_fu_291_p2(15 downto 1);
                    tmp_33_reg_626(15 downto 1) <= tmp_33_fu_297_p2(15 downto 1);
                    tmp_35_cast1_reg_616(7 downto 0) <= tmp_35_cast1_fu_288_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                G_reg_601 <= in_channels_ch2_q0;
                R_reg_593 <= in_channels_ch1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_208_p2 = ap_const_lv1_0))) then
                    tmp_22_reg_557(22 downto 8) <= tmp_22_fu_243_p2(22 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond_fu_259_p2))) then
                    tmp_24_cast_reg_570(22 downto 0) <= tmp_24_cast_fu_279_p1(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                tmp_27_reg_631 <= tmp_26_fu_374_p2(15 downto 8);
                tmp_32_reg_636 <= tmp_31_fu_428_p2(15 downto 8);
                tmp_37_reg_641 <= tmp_36_fu_480_p2(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                x_2_reg_552 <= x_2_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                y_2_reg_565 <= y_2_fu_264_p2;
            end if;
        end if;
    end process;
    tmp_22_reg_557(7 downto 0) <= "00000000";
    tmp_24_cast_reg_570(63 downto 23) <= "00000000000000000000000000000000000000000";
    tmp_35_cast1_reg_616(15 downto 8) <= "00000000";
    tmp_29_reg_621(0) <= '0';
    tmp_33_reg_626(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_208_p2, exitcond_fu_259_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond1_fu_208_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond_fu_259_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_208_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_208_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_208_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_208_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= out_width;
    ap_return_1 <= out_height;

    ap_sig_105_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_105 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_123_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_123 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_131_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_131 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_140_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_140 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_155_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_155 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_168_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_168 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_192_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_192 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_200_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_200 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_27_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_27 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_90_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_90 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_192)
    begin
        if (ap_sig_192) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_27)
    begin
        if (ap_sig_27) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_90)
    begin
        if (ap_sig_90) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_105)
    begin
        if (ap_sig_105) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_123)
    begin
        if (ap_sig_123) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_200)
    begin
        if (ap_sig_200) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_131)
    begin
        if (ap_sig_131) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_140)
    begin
        if (ap_sig_140) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_155)
    begin
        if (ap_sig_155) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_168)
    begin
        if (ap_sig_168) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_208_p2 <= "1" when (x_reg_186 = out_width) else "0";
    exitcond_fu_259_p2 <= "1" when (y_reg_197 = out_height) else "0";
    grp_fu_513_p0 <= tmp_35_cast1_reg_616(8 - 1 downto 0);
    grp_fu_513_p1 <= ap_const_lv16_FFA2(8 - 1 downto 0);
    grp_fu_520_p0 <= grp_fu_520_p00(8 - 1 downto 0);
    grp_fu_520_p00 <= std_logic_vector(resize(unsigned(R_reg_593),15));
    grp_fu_520_p1 <= ap_const_lv15_7FDA(7 - 1 downto 0);
    grp_fu_528_p0 <= grp_fu_528_p00(8 - 1 downto 0);
    grp_fu_528_p00 <= std_logic_vector(resize(unsigned(B_reg_608),13));
    grp_fu_528_p1 <= ap_const_lv13_19(6 - 1 downto 0);
    grp_fu_528_p2 <= grp_fu_528_p20(9 - 1 downto 0);
    grp_fu_528_p20 <= std_logic_vector(resize(unsigned(tmp4_fu_361_p2),13));
    in_channels_ch1_address0 <= tmp_24_cast_fu_279_p1(22 - 1 downto 0);

    in_channels_ch1_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= tmp_24_cast_fu_279_p1(22 - 1 downto 0);

    in_channels_ch2_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= tmp_24_cast_reg_570(22 - 1 downto 0);

    in_channels_ch3_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_address0 <= tmp_24_cast_reg_570(22 - 1 downto 0);

    out_channels_ch1_ce0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9))) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= std_logic_vector(unsigned(tmp_27_reg_631) + unsigned(ap_const_lv8_10));

    out_channels_ch1_we0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= tmp_24_cast_reg_570(22 - 1 downto 0);

    out_channels_ch2_ce0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9))) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= (tmp_32_reg_636 xor ap_const_lv8_80);

    out_channels_ch2_we0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= tmp_24_cast_reg_570(22 - 1 downto 0);

    out_channels_ch3_ce0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9))) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= (tmp_37_reg_641 xor ap_const_lv8_80);

    out_channels_ch3_we0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

        p_neg_cast_fu_449_p1 <= std_logic_vector(resize(signed(p_neg_fu_443_p2),14));

    p_neg_fu_443_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(p_shl3_cast9_fu_408_p1));
    p_shl1_cast_fu_460_p1 <= std_logic_vector(resize(unsigned(p_shl1_fu_453_p3),14));
    p_shl1_fu_453_p3 <= (B_reg_608 & ap_const_lv1_0);
    p_shl2_cast_fu_397_p1 <= std_logic_vector(resize(unsigned(p_shl2_fu_390_p3),16));
    p_shl2_fu_390_p3 <= (B_reg_608 & ap_const_lv7_0);
    p_shl3_cast9_fu_408_p1 <= std_logic_vector(resize(unsigned(p_shl3_fu_401_p3),13));
    p_shl3_cast_fu_412_p1 <= std_logic_vector(resize(unsigned(p_shl3_fu_401_p3),16));
    p_shl3_fu_401_p3 <= (B_reg_608 & ap_const_lv4_0);
    p_shl4_cast_fu_338_p1 <= std_logic_vector(resize(unsigned(p_shl4_fu_331_p3),16));
    p_shl4_fu_331_p3 <= (G_reg_601 & ap_const_lv7_0);
    p_shl5_cast_fu_313_p1 <= std_logic_vector(resize(unsigned(p_shl5_fu_306_p3),15));
    p_shl5_fu_306_p3 <= (R_reg_593 & ap_const_lv6_0);
    p_shl6_cast_fu_324_p1 <= std_logic_vector(resize(unsigned(p_shl6_fu_317_p3),15));
    p_shl6_fu_317_p3 <= (R_reg_593 & ap_const_lv1_0);
    p_shl7_cast_fu_235_p3 <= (tmp_21_fu_231_p1 & ap_const_lv8_0);
    p_shl_cast_fu_223_p3 <= (tmp_fu_219_p1 & ap_const_lv10_0);
    tmp1_fu_355_p2 <= std_logic_vector(unsigned(tmp2_cast_fu_351_p1) + unsigned(p_shl4_cast_fu_338_p1));
    tmp2_cast_fu_351_p1 <= std_logic_vector(resize(unsigned(tmp2_fu_345_p2),16));
    tmp2_fu_345_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_324_p1) + unsigned(p_shl5_cast_fu_313_p1));
    tmp3_cast_fu_371_p1 <= std_logic_vector(resize(unsigned(grp_fu_528_p3),16));
    tmp4_fu_361_p2 <= std_logic_vector(unsigned(tmp_35_cast2_fu_328_p1) + unsigned(ap_const_lv9_80));
    tmp6_fu_422_p2 <= std_logic_vector(unsigned(tmp_30_fu_416_p2) + unsigned(ap_const_lv16_80));
        tmp8_cast_fu_476_p1 <= std_logic_vector(resize(signed(tmp8_fu_470_p2),16));

    tmp8_fu_470_p2 <= std_logic_vector(unsigned(tmp_35_fu_464_p2) + unsigned(ap_const_lv14_80));
    tmp_21_fu_231_p1 <= x_reg_186(15 - 1 downto 0);
    tmp_22_fu_243_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_223_p3) + unsigned(p_shl7_cast_fu_235_p3));
    tmp_24_cast_fu_279_p1 <= std_logic_vector(resize(unsigned(tmp_24_fu_274_p2),64));
    tmp_24_fu_274_p2 <= std_logic_vector(unsigned(tmp_cast_fu_270_p1) + unsigned(tmp_22_reg_557));
    tmp_26_fu_374_p2 <= std_logic_vector(unsigned(tmp3_cast_fu_371_p1) + unsigned(tmp1_fu_355_p2));
    tmp_29_fu_291_p0 <= tmp_29_fu_291_p00(8 - 1 downto 0);
    tmp_29_fu_291_p00 <= std_logic_vector(resize(unsigned(G_reg_601),16));
    tmp_29_fu_291_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &tmp_29_fu_291_p0) * signed(ap_const_lv16_FFB6))), 16));
    tmp_30_fu_416_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_397_p1) - unsigned(p_shl3_cast_fu_412_p1));
    tmp_31_fu_428_p2 <= std_logic_vector(unsigned(tmp6_fu_422_p2) + unsigned(grp_fu_520_p3));
    tmp_33_fu_297_p0 <= tmp_33_fu_297_p00(8 - 1 downto 0);
    tmp_33_fu_297_p00 <= std_logic_vector(resize(unsigned(R_reg_593),16));
    tmp_33_fu_297_p2 <= std_logic_vector(resize(unsigned(tmp_33_fu_297_p0) * unsigned(ap_const_lv16_7A), 16));
    tmp_35_cast1_fu_288_p1 <= std_logic_vector(resize(unsigned(G_reg_601),16));
    tmp_35_cast2_fu_328_p1 <= std_logic_vector(resize(unsigned(G_reg_601),9));
    tmp_35_fu_464_p2 <= std_logic_vector(signed(p_neg_cast_fu_449_p1) - signed(p_shl1_cast_fu_460_p1));
    tmp_36_fu_480_p2 <= std_logic_vector(signed(tmp8_cast_fu_476_p1) + signed(grp_fu_513_p3));
    tmp_cast_fu_270_p1 <= std_logic_vector(resize(unsigned(y_reg_197),23));
    tmp_fu_219_p1 <= x_reg_186(13 - 1 downto 0);
    x_2_fu_213_p2 <= std_logic_vector(unsigned(x_reg_186) + unsigned(ap_const_lv16_1));
    y_2_fu_264_p2 <= std_logic_vector(unsigned(y_reg_197) + unsigned(ap_const_lv16_1));
end behav;
