-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_yuv2rgb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_width : IN STD_LOGIC_VECTOR (15 downto 0);
    out_height : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of yuv_filter_yuv2rgb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv17_1FF30 : STD_LOGIC_VECTOR (16 downto 0) := "11111111100110000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv16_FF9C : STD_LOGIC_VECTOR (15 downto 0) := "1111111110011100";
    constant ap_const_lv9_1F0 : STD_LOGIC_VECTOR (8 downto 0) := "111110000";
    constant ap_const_lv18_12A : STD_LOGIC_VECTOR (17 downto 0) := "000000000100101010";
    constant ap_const_lv18_80 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_const_lv18_199 : STD_LOGIC_VECTOR (17 downto 0) := "000000000110011001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_27 : BOOLEAN;
    signal x_1_fu_219_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_1_reg_574 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_90 : BOOLEAN;
    signal tmp_s_fu_249_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_s_reg_579 : STD_LOGIC_VECTOR (22 downto 0);
    signal exitcond1_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_1_fu_270_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_1_reg_587 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_105 : BOOLEAN;
    signal tmp_21_cast_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_cast_reg_592 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_123 : BOOLEAN;
    signal Y_reg_615 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_131 : BOOLEAN;
    signal V_reg_620 : STD_LOGIC_VECTOR (7 downto 0);
    signal D_fu_294_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal D_reg_625 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_141 : BOOLEAN;
    signal E_fu_300_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal E_reg_632 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_539_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_3_reg_637 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_13_fu_309_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_13_reg_644 : STD_LOGIC_VECTOR (16 downto 0);
    signal R_fu_363_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal R_reg_649 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_156 : BOOLEAN;
    signal G_fu_430_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_reg_654 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_fu_523_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_reg_659 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_169 : BOOLEAN;
    signal x_reg_192 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_reg_203 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_187 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_195 : BOOLEAN;
    signal tmp_fu_225_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_5_fu_237_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl2_cast_fu_229_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl3_cast_fu_241_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_cast_fu_276_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_6_fu_280_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_13_fu_309_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_549_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_8_fu_318_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_333_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp_fu_349_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_fu_340_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_531_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp1_cast_fu_374_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_14_fu_377_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_14_fu_377_p2 : signal is "no";
    signal tmp_15_fu_382_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp9_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_398_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp2_fu_416_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp2_fu_406_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_fu_438_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl1_fu_449_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_cast_fu_456_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp2_fu_460_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 of tmp2_fu_460_p2 : signal is "no";
    signal tmp2_cast_fu_465_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl_cast_fu_445_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_18_fu_469_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_19_fu_475_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp1_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_491_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp3_fu_509_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp3_fu_499_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_531_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_539_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_539_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_539_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_539_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_549_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_539_p10 : STD_LOGIC_VECTOR (8 downto 0);

    component yuv_filter_mac_muladd_8s_8s_17ns_17_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component yuv_filter_ama_addmuladd_5s_8ns_10ns_9ns_18_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        din3 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component yuv_filter_mac_muladd_10ns_8s_18s_18_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    yuv_filter_mac_muladd_8s_8s_17ns_17_1_U11 : component yuv_filter_mac_muladd_8s_8s_17ns_17_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_531_p0,
        din1 => D_reg_625,
        din2 => tmp_13_reg_644,
        dout => grp_fu_531_p3);

    yuv_filter_ama_addmuladd_5s_8ns_10ns_9ns_18_1_U12 : component yuv_filter_ama_addmuladd_5s_8ns_10ns_9ns_18_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 8,
        din2_WIDTH => 10,
        din3_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_539_p0,
        din1 => grp_fu_539_p1,
        din2 => grp_fu_539_p2,
        din3 => grp_fu_539_p3,
        dout => grp_fu_539_p4);

    yuv_filter_mac_muladd_10ns_8s_18s_18_1_U13 : component yuv_filter_mac_muladd_10ns_8s_18s_18_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_549_p0,
        din1 => E_reg_632,
        din2 => tmp_3_reg_637,
        dout => grp_fu_549_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    x_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond_fu_265_p2)))) then 
                x_reg_192 <= x_1_reg_574;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                x_reg_192 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    y_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                y_reg_203 <= y_1_reg_587;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_214_p2 = ap_const_lv1_0))) then 
                y_reg_203 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                B_reg_659 <= B_fu_523_p3;
                G_reg_654 <= G_fu_430_p3;
                R_reg_649 <= R_fu_363_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                D_reg_625 <= D_fu_294_p2;
                E_reg_632 <= E_fu_300_p2;
                tmp_13_reg_644 <= tmp_13_fu_309_p2;
                tmp_3_reg_637 <= grp_fu_539_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                V_reg_620 <= in_channels_ch3_q0;
                Y_reg_615 <= in_channels_ch1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond_fu_265_p2))) then
                    tmp_21_cast_reg_592(22 downto 0) <= tmp_21_cast_fu_285_p1(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_214_p2 = ap_const_lv1_0))) then
                    tmp_s_reg_579(22 downto 8) <= tmp_s_fu_249_p2(22 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                x_1_reg_574 <= x_1_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                y_1_reg_587 <= y_1_fu_270_p2;
            end if;
        end if;
    end process;
    tmp_s_reg_579(7 downto 0) <= "00000000";
    tmp_21_cast_reg_592(63 downto 23) <= "00000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_214_p2, exitcond_fu_265_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond1_fu_214_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond_fu_265_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    B_fu_523_p3 <= 
        p_phitmp3_fu_509_p3 when (tmp_21_fu_517_p2(0) = '1') else 
        phitmp3_fu_499_p4;
    D_fu_294_p2 <= (in_channels_ch2_q0 xor ap_const_lv8_80);
    E_fu_300_p2 <= (V_reg_620 xor ap_const_lv8_80);
    G_fu_430_p3 <= 
        p_phitmp2_fu_416_p3 when (tmp_17_fu_424_p2(0) = '1') else 
        phitmp2_fu_406_p4;
    R_fu_363_p3 <= 
        p_phitmp_fu_349_p3 when (tmp_11_fu_357_p2(0) = '1') else 
        phitmp_fu_340_p4;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_214_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_214_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_214_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_214_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= out_width;
    ap_return_1 <= out_height;

    ap_sig_105_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_105 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_123_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_123 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_131_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_131 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_141_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_141 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_156_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_156 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_169_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_169 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_187_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_187 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_195_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_195 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_27_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_27 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_90_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_90 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_187)
    begin
        if (ap_sig_187) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_27)
    begin
        if (ap_sig_27) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_90)
    begin
        if (ap_sig_90) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_105)
    begin
        if (ap_sig_105) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_123)
    begin
        if (ap_sig_123) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_195)
    begin
        if (ap_sig_195) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_131)
    begin
        if (ap_sig_131) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_141)
    begin
        if (ap_sig_141) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_156)
    begin
        if (ap_sig_156) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_169)
    begin
        if (ap_sig_169) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_214_p2 <= "1" when (x_reg_192 = out_width) else "0";
    exitcond_fu_265_p2 <= "1" when (y_reg_203 = out_height) else "0";
    grp_fu_531_p0 <= ap_const_lv16_FF9C(8 - 1 downto 0);
    grp_fu_539_p0 <= ap_const_lv9_1F0(5 - 1 downto 0);
    grp_fu_539_p1 <= grp_fu_539_p10(8 - 1 downto 0);
    grp_fu_539_p10 <= std_logic_vector(resize(unsigned(Y_reg_615),9));
    grp_fu_539_p2 <= ap_const_lv18_12A(10 - 1 downto 0);
    grp_fu_539_p3 <= ap_const_lv18_80(9 - 1 downto 0);
    grp_fu_549_p0 <= ap_const_lv18_199(10 - 1 downto 0);
    icmp1_fu_485_p2 <= "1" when (signed(tmp_19_fu_475_p4) > signed(ap_const_lv3_0)) else "0";
    icmp9_fu_392_p2 <= "1" when (tmp_15_fu_382_p4 = ap_const_lv2_1) else "0";
    icmp_fu_327_p2 <= "1" when (tmp_8_fu_318_p4 = ap_const_lv2_1) else "0";
    in_channels_ch1_address0 <= tmp_21_cast_fu_285_p1(22 - 1 downto 0);

    in_channels_ch1_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= tmp_21_cast_reg_592(22 - 1 downto 0);

    in_channels_ch2_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= tmp_21_cast_fu_285_p1(22 - 1 downto 0);

    in_channels_ch3_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_address0 <= tmp_21_cast_reg_592(22 - 1 downto 0);

    out_channels_ch1_ce0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9))) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= R_reg_649;

    out_channels_ch1_we0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= tmp_21_cast_reg_592(22 - 1 downto 0);

    out_channels_ch2_ce0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9))) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= G_reg_654;

    out_channels_ch2_we0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= tmp_21_cast_reg_592(22 - 1 downto 0);

    out_channels_ch3_ce0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9))) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= B_reg_659;

    out_channels_ch3_we0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_phitmp2_fu_416_p3 <= 
        ap_const_lv8_FF when (icmp9_fu_392_p2(0) = '1') else 
        ap_const_lv8_0;
    p_phitmp3_fu_509_p3 <= 
        ap_const_lv8_FF when (icmp1_fu_485_p2(0) = '1') else 
        ap_const_lv8_0;
    p_phitmp_fu_349_p3 <= 
        ap_const_lv8_FF when (icmp_fu_327_p2(0) = '1') else 
        ap_const_lv8_0;
        p_shl1_cast_fu_456_p1 <= std_logic_vector(resize(signed(p_shl1_fu_449_p3),18));

    p_shl1_fu_449_p3 <= (D_reg_625 & ap_const_lv2_0);
    p_shl2_cast_fu_229_p3 <= (tmp_fu_225_p1 & ap_const_lv10_0);
    p_shl3_cast_fu_241_p3 <= (tmp_5_fu_237_p1 & ap_const_lv8_0);
        p_shl_cast_fu_445_p1 <= std_logic_vector(resize(signed(p_shl_fu_438_p3),19));

    p_shl_fu_438_p3 <= (D_reg_625 & ap_const_lv9_0);
    phitmp2_fu_406_p4 <= tmp_14_fu_377_p2(15 downto 8);
    phitmp3_fu_499_p4 <= tmp_18_fu_469_p2(15 downto 8);
    phitmp_fu_340_p4 <= grp_fu_549_p3(15 downto 8);
        tmp1_cast_fu_374_p1 <= std_logic_vector(resize(signed(grp_fu_531_p3),18));

        tmp2_cast_fu_465_p1 <= std_logic_vector(resize(signed(tmp2_fu_460_p2),19));

    tmp2_fu_460_p2 <= std_logic_vector(signed(p_shl1_cast_fu_456_p1) + signed(tmp_3_reg_637));
    tmp_10_fu_333_p3 <= grp_fu_549_p3(17 downto 17);
    tmp_11_fu_357_p2 <= (icmp_fu_327_p2 or tmp_10_fu_333_p3);
    tmp_13_fu_309_p1 <= E_fu_300_p2;
    tmp_13_fu_309_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(ap_const_lv17_1FF30) * signed(tmp_13_fu_309_p1))), 17));
    tmp_14_fu_377_p2 <= std_logic_vector(signed(tmp1_cast_fu_374_p1) + signed(tmp_3_reg_637));
    tmp_15_fu_382_p4 <= tmp_14_fu_377_p2(17 downto 16);
    tmp_16_fu_398_p3 <= tmp_14_fu_377_p2(17 downto 17);
    tmp_17_fu_424_p2 <= (icmp9_fu_392_p2 or tmp_16_fu_398_p3);
    tmp_18_fu_469_p2 <= std_logic_vector(signed(tmp2_cast_fu_465_p1) + signed(p_shl_cast_fu_445_p1));
    tmp_19_fu_475_p4 <= tmp_18_fu_469_p2(18 downto 16);
    tmp_20_fu_491_p3 <= tmp_18_fu_469_p2(18 downto 18);
    tmp_21_cast_fu_285_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_280_p2),64));
    tmp_21_fu_517_p2 <= (icmp1_fu_485_p2 or tmp_20_fu_491_p3);
    tmp_5_fu_237_p1 <= x_reg_192(15 - 1 downto 0);
    tmp_6_fu_280_p2 <= std_logic_vector(unsigned(tmp_cast_fu_276_p1) + unsigned(tmp_s_reg_579));
    tmp_8_fu_318_p4 <= grp_fu_549_p3(17 downto 16);
    tmp_cast_fu_276_p1 <= std_logic_vector(resize(unsigned(y_reg_203),23));
    tmp_fu_225_p1 <= x_reg_192(13 - 1 downto 0);
    tmp_s_fu_249_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_229_p3) + unsigned(p_shl3_cast_fu_241_p3));
    x_1_fu_219_p2 <= std_logic_vector(unsigned(x_reg_192) + unsigned(ap_const_lv16_1));
    y_1_fu_270_p2 <= std_logic_vector(unsigned(y_reg_203) + unsigned(ap_const_lv16_1));
end behav;
