// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv_filter_rgb2yuv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        out_width,
        out_height,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_st1_fsm_0 = 10'b1;
parameter    ap_ST_st2_fsm_1 = 10'b10;
parameter    ap_ST_st3_fsm_2 = 10'b100;
parameter    ap_ST_st4_fsm_3 = 10'b1000;
parameter    ap_ST_st5_fsm_4 = 10'b10000;
parameter    ap_ST_st6_fsm_5 = 10'b100000;
parameter    ap_ST_st7_fsm_6 = 10'b1000000;
parameter    ap_ST_st8_fsm_7 = 10'b10000000;
parameter    ap_ST_st9_fsm_8 = 10'b100000000;
parameter    ap_ST_st10_fsm_9 = 10'b1000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv16_1 = 16'b1;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv16_FFB6 = 16'b1111111110110110;
parameter    ap_const_lv16_7A = 16'b1111010;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv9_80 = 9'b10000000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv16_80 = 16'b10000000;
parameter    ap_const_lv13_0 = 13'b0000000000000;
parameter    ap_const_lv14_80 = 14'b10000000;
parameter    ap_const_lv8_10 = 8'b10000;
parameter    ap_const_lv8_80 = 8'b10000000;
parameter    ap_const_lv16_FFA2 = 16'b1111111110100010;
parameter    ap_const_lv15_7FDA = 15'b111111111011010;
parameter    ap_const_lv13_19 = 13'b11001;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] out_width;
input  [15:0] out_height;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_27;
wire   [15:0] x_2_fu_213_p2;
reg   [15:0] x_2_reg_552;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_90;
wire   [22:0] tmp_22_fu_243_p2;
reg   [22:0] tmp_22_reg_557;
wire   [0:0] exitcond1_fu_208_p2;
wire   [15:0] y_2_fu_264_p2;
reg   [15:0] y_2_reg_565;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_105;
wire   [63:0] tmp_24_cast_fu_279_p1;
reg   [63:0] tmp_24_cast_reg_570;
wire   [0:0] exitcond_fu_259_p2;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_123;
reg   [7:0] R_reg_593;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_131;
reg   [7:0] G_reg_601;
reg   [7:0] B_reg_608;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_140;
wire   [15:0] tmp_35_cast1_fu_288_p1;
reg   [15:0] tmp_35_cast1_reg_616;
wire   [15:0] tmp_29_fu_291_p2;
reg   [15:0] tmp_29_reg_621;
wire   [15:0] tmp_33_fu_297_p2;
reg   [15:0] tmp_33_reg_626;
reg   [7:0] tmp_27_reg_631;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_155;
reg   [7:0] tmp_32_reg_636;
reg   [7:0] tmp_37_reg_641;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_168;
reg   [15:0] x_reg_186;
reg   [15:0] y_reg_197;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_192;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_200;
wire   [12:0] tmp_fu_219_p1;
wire   [14:0] tmp_21_fu_231_p1;
wire   [22:0] p_shl_cast_fu_223_p3;
wire   [22:0] p_shl7_cast_fu_235_p3;
wire   [22:0] tmp_cast_fu_270_p1;
wire   [22:0] tmp_24_fu_274_p2;
wire   [7:0] tmp_29_fu_291_p0;
wire   [7:0] tmp_33_fu_297_p0;
wire   [13:0] p_shl5_fu_306_p3;
wire   [8:0] p_shl6_fu_317_p3;
wire   [14:0] p_shl4_fu_331_p3;
wire   [14:0] p_shl6_cast_fu_324_p1;
wire   [14:0] p_shl5_cast_fu_313_p1;
wire   [14:0] tmp2_fu_345_p2;
wire   [15:0] tmp2_cast_fu_351_p1;
wire   [15:0] p_shl4_cast_fu_338_p1;
wire   [8:0] tmp_35_cast2_fu_328_p1;
wire   [8:0] tmp4_fu_361_p2;
wire   [12:0] grp_fu_528_p3;
wire   [15:0] tmp3_cast_fu_371_p1;
wire   [15:0] tmp1_fu_355_p2;
wire   [15:0] tmp_26_fu_374_p2;
wire   [14:0] p_shl2_fu_390_p3;
wire   [11:0] p_shl3_fu_401_p3;
wire   [15:0] p_shl2_cast_fu_397_p1;
wire   [15:0] p_shl3_cast_fu_412_p1;
wire   [15:0] tmp_30_fu_416_p2;
wire   [15:0] tmp6_fu_422_p2;
wire  signed [15:0] grp_fu_520_p3;
(* use_dsp48 = "no" *) wire   [15:0] tmp_31_fu_428_p2;
wire   [12:0] p_shl3_cast9_fu_408_p1;
wire   [12:0] p_neg_fu_443_p2;
wire   [8:0] p_shl1_fu_453_p3;
wire  signed [13:0] p_neg_cast_fu_449_p1;
wire   [13:0] p_shl1_cast_fu_460_p1;
wire   [13:0] tmp_35_fu_464_p2;
wire   [13:0] tmp8_fu_470_p2;
wire  signed [15:0] tmp8_cast_fu_476_p1;
wire  signed [15:0] grp_fu_513_p3;
(* use_dsp48 = "no" *) wire   [15:0] tmp_36_fu_480_p2;
wire   [7:0] grp_fu_513_p0;
wire  signed [7:0] grp_fu_513_p1;
wire   [7:0] grp_fu_520_p0;
wire  signed [6:0] grp_fu_520_p1;
wire   [7:0] grp_fu_528_p0;
wire   [5:0] grp_fu_528_p1;
wire   [8:0] grp_fu_528_p2;
reg   [9:0] ap_NS_fsm;
wire   [14:0] grp_fu_520_p00;
wire   [12:0] grp_fu_528_p00;
wire   [12:0] grp_fu_528_p20;
wire   [15:0] tmp_29_fu_291_p00;
wire   [15:0] tmp_33_fu_297_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'b1;
end

yuv_filter_mac_muladd_8ns_8s_16ns_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
yuv_filter_mac_muladd_8ns_8s_16ns_16_1_U0(
    .din0(grp_fu_513_p0),
    .din1(grp_fu_513_p1),
    .din2(tmp_33_reg_626),
    .dout(grp_fu_513_p3)
);

yuv_filter_mac_muladd_8ns_7s_16ns_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
yuv_filter_mac_muladd_8ns_7s_16ns_16_1_U1(
    .din0(grp_fu_520_p0),
    .din1(grp_fu_520_p1),
    .din2(tmp_29_reg_621),
    .dout(grp_fu_520_p3)
);

yuv_filter_mac_muladd_8ns_6ns_9ns_13_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 13 ))
yuv_filter_mac_muladd_8ns_6ns_9ns_13_1_U2(
    .din0(grp_fu_528_p0),
    .din1(grp_fu_528_p1),
    .din2(grp_fu_528_p2),
    .dout(grp_fu_528_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == exitcond_fu_259_p2))) begin
        x_reg_186 <= x_2_reg_552;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        x_reg_186 <= ap_const_lv16_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        y_reg_197 <= y_2_reg_565;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_208_p2 == 1'b0))) begin
        y_reg_197 <= ap_const_lv16_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        B_reg_608 <= in_channels_ch3_q0;
        tmp_29_reg_621[15 : 1] <= tmp_29_fu_291_p2[15 : 1];
        tmp_33_reg_626[15 : 1] <= tmp_33_fu_297_p2[15 : 1];
        tmp_35_cast1_reg_616[7 : 0] <= tmp_35_cast1_fu_288_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        G_reg_601 <= in_channels_ch2_q0;
        R_reg_593 <= in_channels_ch1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_208_p2 == 1'b0))) begin
        tmp_22_reg_557[22 : 8] <= tmp_22_fu_243_p2[22 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (1'b0 == exitcond_fu_259_p2))) begin
        tmp_24_cast_reg_570[22 : 0] <= tmp_24_cast_fu_279_p1[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        tmp_27_reg_631 <= {{tmp_26_fu_374_p2[ap_const_lv32_F : ap_const_lv32_8]}};
        tmp_32_reg_636 <= {{tmp_31_fu_428_p2[ap_const_lv32_F : ap_const_lv32_8]}};
        tmp_37_reg_641 <= {{tmp_36_fu_480_p2[ap_const_lv32_F : ap_const_lv32_8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        x_2_reg_552 <= x_2_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        y_2_reg_565 <= y_2_fu_264_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_208_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_208_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_192) begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_27) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_90) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_105) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_123) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_200) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_131) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_140) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_155) begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_168) begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st6_fsm_5) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        in_channels_ch1_ce0 = 1'b1;
    end else begin
        in_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st6_fsm_5) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        in_channels_ch2_ce0 = 1'b1;
    end else begin
        in_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st6_fsm_5) | (1'b1 == ap_sig_cseq_ST_st7_fsm_6) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        in_channels_ch3_ce0 = 1'b1;
    end else begin
        in_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st9_fsm_8) | (1'b1 == ap_sig_cseq_ST_st10_fsm_9))) begin
        out_channels_ch1_ce0 = 1'b1;
    end else begin
        out_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        out_channels_ch1_we0 = 1'b1;
    end else begin
        out_channels_ch1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st9_fsm_8) | (1'b1 == ap_sig_cseq_ST_st10_fsm_9))) begin
        out_channels_ch2_ce0 = 1'b1;
    end else begin
        out_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        out_channels_ch2_we0 = 1'b1;
    end else begin
        out_channels_ch2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st9_fsm_8) | (1'b1 == ap_sig_cseq_ST_st10_fsm_9))) begin
        out_channels_ch3_ce0 = 1'b1;
    end else begin
        out_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        out_channels_ch3_we0 = 1'b1;
    end else begin
        out_channels_ch3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(exitcond1_fu_208_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if (~(1'b0 == exitcond_fu_259_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_return_0 = out_width;

assign ap_return_1 = out_height;

always @ (*) begin
    ap_sig_105 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_123 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_131 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_140 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_155 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

always @ (*) begin
    ap_sig_168 = (1'b1 == ap_CS_fsm[ap_const_lv32_8]);
end

always @ (*) begin
    ap_sig_192 = (1'b1 == ap_CS_fsm[ap_const_lv32_9]);
end

always @ (*) begin
    ap_sig_200 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_27 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_90 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

assign exitcond1_fu_208_p2 = ((x_reg_186 == out_width) ? 1'b1 : 1'b0);

assign exitcond_fu_259_p2 = ((y_reg_197 == out_height) ? 1'b1 : 1'b0);

assign grp_fu_513_p0 = tmp_35_cast1_reg_616;

assign grp_fu_513_p1 = ap_const_lv16_FFA2;

assign grp_fu_520_p0 = grp_fu_520_p00;

assign grp_fu_520_p00 = R_reg_593;

assign grp_fu_520_p1 = ap_const_lv15_7FDA;

assign grp_fu_528_p0 = grp_fu_528_p00;

assign grp_fu_528_p00 = B_reg_608;

assign grp_fu_528_p1 = ap_const_lv13_19;

assign grp_fu_528_p2 = grp_fu_528_p20;

assign grp_fu_528_p20 = tmp4_fu_361_p2;

assign in_channels_ch1_address0 = tmp_24_cast_fu_279_p1;

assign in_channels_ch2_address0 = tmp_24_cast_fu_279_p1;

assign in_channels_ch3_address0 = tmp_24_cast_reg_570;

assign out_channels_ch1_address0 = tmp_24_cast_reg_570;

assign out_channels_ch1_d0 = (tmp_27_reg_631 + ap_const_lv8_10);

assign out_channels_ch2_address0 = tmp_24_cast_reg_570;

assign out_channels_ch2_d0 = (tmp_32_reg_636 ^ ap_const_lv8_80);

assign out_channels_ch3_address0 = tmp_24_cast_reg_570;

assign out_channels_ch3_d0 = (tmp_37_reg_641 ^ ap_const_lv8_80);

assign p_neg_cast_fu_449_p1 = $signed(p_neg_fu_443_p2);

assign p_neg_fu_443_p2 = (ap_const_lv13_0 - p_shl3_cast9_fu_408_p1);

assign p_shl1_cast_fu_460_p1 = p_shl1_fu_453_p3;

assign p_shl1_fu_453_p3 = {{B_reg_608}, {1'b0}};

assign p_shl2_cast_fu_397_p1 = p_shl2_fu_390_p3;

assign p_shl2_fu_390_p3 = {{B_reg_608}, {ap_const_lv7_0}};

assign p_shl3_cast9_fu_408_p1 = p_shl3_fu_401_p3;

assign p_shl3_cast_fu_412_p1 = p_shl3_fu_401_p3;

assign p_shl3_fu_401_p3 = {{B_reg_608}, {ap_const_lv4_0}};

assign p_shl4_cast_fu_338_p1 = p_shl4_fu_331_p3;

assign p_shl4_fu_331_p3 = {{G_reg_601}, {ap_const_lv7_0}};

assign p_shl5_cast_fu_313_p1 = p_shl5_fu_306_p3;

assign p_shl5_fu_306_p3 = {{R_reg_593}, {ap_const_lv6_0}};

assign p_shl6_cast_fu_324_p1 = p_shl6_fu_317_p3;

assign p_shl6_fu_317_p3 = {{R_reg_593}, {1'b0}};

assign p_shl7_cast_fu_235_p3 = {{tmp_21_fu_231_p1}, {ap_const_lv8_0}};

assign p_shl_cast_fu_223_p3 = {{tmp_fu_219_p1}, {ap_const_lv10_0}};

assign tmp1_fu_355_p2 = (tmp2_cast_fu_351_p1 + p_shl4_cast_fu_338_p1);

assign tmp2_cast_fu_351_p1 = tmp2_fu_345_p2;

assign tmp2_fu_345_p2 = (p_shl6_cast_fu_324_p1 + p_shl5_cast_fu_313_p1);

assign tmp3_cast_fu_371_p1 = grp_fu_528_p3;

assign tmp4_fu_361_p2 = (tmp_35_cast2_fu_328_p1 + ap_const_lv9_80);

assign tmp6_fu_422_p2 = (tmp_30_fu_416_p2 + ap_const_lv16_80);

assign tmp8_cast_fu_476_p1 = $signed(tmp8_fu_470_p2);

assign tmp8_fu_470_p2 = (tmp_35_fu_464_p2 + ap_const_lv14_80);

assign tmp_21_fu_231_p1 = x_reg_186[14:0];

assign tmp_22_fu_243_p2 = (p_shl_cast_fu_223_p3 + p_shl7_cast_fu_235_p3);

assign tmp_24_cast_fu_279_p1 = tmp_24_fu_274_p2;

assign tmp_24_fu_274_p2 = (tmp_cast_fu_270_p1 + tmp_22_reg_557);

assign tmp_26_fu_374_p2 = (tmp3_cast_fu_371_p1 + tmp1_fu_355_p2);

assign tmp_29_fu_291_p0 = tmp_29_fu_291_p00;

assign tmp_29_fu_291_p00 = G_reg_601;

assign tmp_29_fu_291_p2 = ($signed({{1'b0}, {tmp_29_fu_291_p0}}) * $signed(-'h4A));

assign tmp_30_fu_416_p2 = (p_shl2_cast_fu_397_p1 - p_shl3_cast_fu_412_p1);

assign tmp_31_fu_428_p2 = ($signed(tmp6_fu_422_p2) + $signed(grp_fu_520_p3));

assign tmp_33_fu_297_p0 = tmp_33_fu_297_p00;

assign tmp_33_fu_297_p00 = R_reg_593;

assign tmp_33_fu_297_p2 = (tmp_33_fu_297_p0 * $signed('h7A));

assign tmp_35_cast1_fu_288_p1 = G_reg_601;

assign tmp_35_cast2_fu_328_p1 = G_reg_601;

assign tmp_35_fu_464_p2 = ($signed(p_neg_cast_fu_449_p1) - $signed(p_shl1_cast_fu_460_p1));

assign tmp_36_fu_480_p2 = ($signed(tmp8_cast_fu_476_p1) + $signed(grp_fu_513_p3));

assign tmp_cast_fu_270_p1 = y_reg_197;

assign tmp_fu_219_p1 = x_reg_186[12:0];

assign x_2_fu_213_p2 = (x_reg_186 + ap_const_lv16_1);

assign y_2_fu_264_p2 = (y_reg_197 + ap_const_lv16_1);

always @ (posedge ap_clk) begin
    tmp_22_reg_557[7:0] <= 8'b00000000;
    tmp_24_cast_reg_570[63:23] <= 41'b00000000000000000000000000000000000000000;
    tmp_35_cast1_reg_616[15:8] <= 8'b00000000;
    tmp_29_reg_621[0] <= 1'b0;
    tmp_33_reg_626[0] <= 1'b0;
end

endmodule //yuv_filter_rgb2yuv
