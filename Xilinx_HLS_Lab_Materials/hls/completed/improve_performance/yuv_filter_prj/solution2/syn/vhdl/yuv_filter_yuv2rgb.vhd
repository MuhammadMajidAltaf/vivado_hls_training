-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_yuv2rgb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_width : IN STD_LOGIC_VECTOR (15 downto 0);
    out_height : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of yuv_filter_yuv2rgb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st11_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv17_1FF30 : STD_LOGIC_VECTOR (16 downto 0) := "11111111100110000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv16_FF9C : STD_LOGIC_VECTOR (15 downto 0) := "1111111110011100";
    constant ap_const_lv9_1F0 : STD_LOGIC_VECTOR (8 downto 0) := "111110000";
    constant ap_const_lv18_12A : STD_LOGIC_VECTOR (17 downto 0) := "000000000100101010";
    constant ap_const_lv18_80 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_const_lv18_199 : STD_LOGIC_VECTOR (17 downto 0) := "000000000110011001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_20 : BOOLEAN;
    signal indvar_flatten_reg_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_207 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_reg_218 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_576_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_626 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_91 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter6 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_242_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid2_v_fu_267_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_mid2_v_reg_635 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_309_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_1_reg_640 : STD_LOGIC_VECTOR (22 downto 0);
    signal y_1_fu_315_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_cast_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_cast_reg_650 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_21_cast_reg_650_pp0_iter2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_21_cast_reg_650_pp0_iter3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_21_cast_reg_650_pp0_iter4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_21_cast_reg_650_pp0_iter5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_21_cast_reg_650_pp0_iter6 : STD_LOGIC_VECTOR (63 downto 0);
    signal Y_reg_673 : STD_LOGIC_VECTOR (7 downto 0);
    signal V_reg_678 : STD_LOGIC_VECTOR (7 downto 0);
    signal D_fu_329_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal D_reg_683 : STD_LOGIC_VECTOR (7 downto 0);
    signal E_fu_335_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal E_reg_690 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_590_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_3_reg_695 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_12_fu_344_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_12_reg_702 : STD_LOGIC_VECTOR (16 downto 0);
    signal R_fu_398_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal R_reg_707 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_fu_465_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_reg_712 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_fu_558_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_reg_717 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_phi_fu_211_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond5_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_1_fu_248_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_275_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_5_fu_287_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl3_cast_fu_291_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl2_cast_fu_279_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal y_mid2_fu_259_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_299_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_cast_fu_305_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_12_fu_344_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_600_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_6_fu_353_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_368_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp_fu_384_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_fu_375_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_582_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp1_cast_fu_409_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_13_fu_412_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_13_fu_412_p2 : signal is "no";
    signal tmp_14_fu_417_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp1_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_433_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp2_fu_451_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp2_fu_441_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_fu_473_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl1_fu_484_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_cast_fu_491_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp2_fu_495_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 of tmp2_fu_495_p2 : signal is "no";
    signal p_shl_cast_fu_480_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp2_cast_fu_500_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_17_fu_504_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_18_fu_510_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp2_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_526_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp3_fu_544_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp3_fu_534_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_2 : STD_LOGIC;
    signal ap_sig_381 : BOOLEAN;
    signal bound_fu_576_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_576_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_582_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_590_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_590_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_590_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_590_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_600_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal bound_fu_576_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_576_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_590_p10 : STD_LOGIC_VECTOR (8 downto 0);

    component yuv_filter_mul_mul_16ns_16ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8s_8s_17ns_17_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component yuv_filter_ama_addmuladd_5s_8ns_10ns_9ns_18_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        din3 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component yuv_filter_mac_muladd_10ns_8s_18s_18_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    yuv_filter_mul_mul_16ns_16ns_32_1_U12 : component yuv_filter_mul_mul_16ns_16ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => bound_fu_576_p0,
        din1 => bound_fu_576_p1,
        dout => bound_fu_576_p2);

    yuv_filter_mac_muladd_8s_8s_17ns_17_1_U13 : component yuv_filter_mac_muladd_8s_8s_17ns_17_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_582_p0,
        din1 => D_reg_683,
        din2 => tmp_12_reg_702,
        dout => grp_fu_582_p3);

    yuv_filter_ama_addmuladd_5s_8ns_10ns_9ns_18_1_U14 : component yuv_filter_ama_addmuladd_5s_8ns_10ns_9ns_18_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 8,
        din2_WIDTH => 10,
        din3_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_590_p0,
        din1 => grp_fu_590_p1,
        din2 => grp_fu_590_p2,
        din3 => grp_fu_590_p3,
        dout => grp_fu_590_p4);

    yuv_filter_mac_muladd_10ns_8s_18s_18_1_U15 : component yuv_filter_mac_muladd_10ns_8s_18s_18_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_600_p0,
        din1 => E_reg_690,
        din2 => tmp_3_reg_695,
        dout => grp_fu_600_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_237_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_237_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_237_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
            end if;
        end if;
    end process;


    indvar_flatten_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_237_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_196 <= indvar_flatten_next_fu_242_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_196 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_626 = ap_const_lv1_0))) then 
                x_reg_207 <= tmp_mid2_v_reg_635;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                x_reg_207 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    y_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_237_p2 = ap_const_lv1_0))) then 
                y_reg_218 <= y_1_fu_315_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                y_reg_218 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter5 = ap_const_lv1_0)) then
                B_reg_717 <= B_fu_558_p3;
                G_reg_712 <= G_fu_465_p3;
                R_reg_707 <= R_fu_398_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter4 = ap_const_lv1_0)) then
                D_reg_683 <= D_fu_329_p2;
                E_reg_690 <= E_fu_335_p2;
                tmp_12_reg_702 <= tmp_12_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter3 = ap_const_lv1_0)) then
                V_reg_678 <= in_channels_ch3_q0;
                Y_reg_673 <= in_channels_ch1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter1 <= exitcond_flatten_reg_626;
                exitcond_flatten_reg_626 <= exitcond_flatten_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter2 <= ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter1;
                ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter3 <= ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter2;
                ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter4 <= ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter3;
                ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter5 <= ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter4;
                ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter6 <= ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter5;
                    ap_reg_ppstg_tmp_21_cast_reg_650_pp0_iter2(22 downto 0) <= tmp_21_cast_reg_650(22 downto 0);
                    ap_reg_ppstg_tmp_21_cast_reg_650_pp0_iter3(22 downto 0) <= ap_reg_ppstg_tmp_21_cast_reg_650_pp0_iter2(22 downto 0);
                    ap_reg_ppstg_tmp_21_cast_reg_650_pp0_iter4(22 downto 0) <= ap_reg_ppstg_tmp_21_cast_reg_650_pp0_iter3(22 downto 0);
                    ap_reg_ppstg_tmp_21_cast_reg_650_pp0_iter5(22 downto 0) <= ap_reg_ppstg_tmp_21_cast_reg_650_pp0_iter4(22 downto 0);
                    ap_reg_ppstg_tmp_21_cast_reg_650_pp0_iter6(22 downto 0) <= ap_reg_ppstg_tmp_21_cast_reg_650_pp0_iter5(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                bound_reg_621 <= bound_fu_576_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_237_p2 = ap_const_lv1_0))) then
                tmp_1_reg_640 <= tmp_1_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_reg_626 = ap_const_lv1_0))) then
                    tmp_21_cast_reg_650(22 downto 0) <= tmp_21_cast_fu_321_p1(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter4 = ap_const_lv1_0))) then
                tmp_3_reg_695 <= grp_fu_590_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_237_p2 = ap_const_lv1_0))) then
                tmp_mid2_v_reg_635 <= tmp_mid2_v_fu_267_p3;
            end if;
        end if;
    end process;
    tmp_21_cast_reg_650(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_21_cast_reg_650_pp0_iter2(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_21_cast_reg_650_pp0_iter3(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_21_cast_reg_650_pp0_iter4(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_21_cast_reg_650_pp0_iter5(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_21_cast_reg_650_pp0_iter6(63 downto 23) <= "00000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_237_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp0_it8)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_237_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_237_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_2;
                end if;
            when ap_ST_st11_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    B_fu_558_p3 <= 
        p_phitmp3_fu_544_p3 when (tmp_20_fu_552_p2(0) = '1') else 
        phitmp3_fu_534_p4;
    D_fu_329_p2 <= (in_channels_ch2_q0 xor ap_const_lv8_80);
    E_fu_335_p2 <= (V_reg_678 xor ap_const_lv8_80);
    G_fu_465_p3 <= 
        p_phitmp2_fu_451_p3 when (tmp_16_fu_459_p2(0) = '1') else 
        phitmp2_fu_441_p4;
    R_fu_398_p3 <= 
        p_phitmp_fu_384_p3 when (tmp_10_fu_392_p2(0) = '1') else 
        phitmp_fu_375_p4;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st11_fsm_2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st11_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= out_width;
    ap_return_1 <= out_height;

    ap_sig_20_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_20 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_381_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_381 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_91_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_91 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_91)
    begin
        if (ap_sig_91) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_2_assign_proc : process(ap_sig_381)
    begin
        if (ap_sig_381) then 
            ap_sig_cseq_ST_st11_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_20)
    begin
        if (ap_sig_20) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_576_p0 <= bound_fu_576_p00(16 - 1 downto 0);
    bound_fu_576_p00 <= std_logic_vector(resize(unsigned(out_height),32));
    bound_fu_576_p1 <= bound_fu_576_p10(16 - 1 downto 0);
    bound_fu_576_p10 <= std_logic_vector(resize(unsigned(out_width),32));
    exitcond5_fu_254_p2 <= "1" when (y_reg_218 = out_height) else "0";
    exitcond_flatten_fu_237_p2 <= "1" when (indvar_flatten_reg_196 = bound_reg_621) else "0";
    grp_fu_582_p0 <= ap_const_lv16_FF9C(8 - 1 downto 0);
    grp_fu_590_p0 <= ap_const_lv9_1F0(5 - 1 downto 0);
    grp_fu_590_p1 <= grp_fu_590_p10(8 - 1 downto 0);
    grp_fu_590_p10 <= std_logic_vector(resize(unsigned(Y_reg_673),9));
    grp_fu_590_p2 <= ap_const_lv18_12A(10 - 1 downto 0);
    grp_fu_590_p3 <= ap_const_lv18_80(9 - 1 downto 0);
    grp_fu_600_p0 <= ap_const_lv18_199(10 - 1 downto 0);
    icmp1_fu_427_p2 <= "1" when (tmp_14_fu_417_p4 = ap_const_lv2_1) else "0";
    icmp2_fu_520_p2 <= "1" when (signed(tmp_18_fu_510_p4) > signed(ap_const_lv3_0)) else "0";
    icmp_fu_362_p2 <= "1" when (tmp_6_fu_353_p4 = ap_const_lv2_1) else "0";
    in_channels_ch1_address0 <= tmp_21_cast_fu_321_p1(22 - 1 downto 0);

    in_channels_ch1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) or (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) or (ap_const_logic_1 = ap_reg_ppiten_pp0_it4) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= tmp_21_cast_reg_650(22 - 1 downto 0);

    in_channels_ch2_ce0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it5)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) or (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) or (ap_const_logic_1 = ap_reg_ppiten_pp0_it4) or (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= tmp_21_cast_fu_321_p1(22 - 1 downto 0);

    in_channels_ch3_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) or (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) or (ap_const_logic_1 = ap_reg_ppiten_pp0_it4) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_242_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_196) + unsigned(ap_const_lv32_1));
    out_channels_ch1_address0 <= ap_reg_ppstg_tmp_21_cast_reg_650_pp0_iter6(22 - 1 downto 0);

    out_channels_ch1_ce0_assign_proc : process(ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp0_it8)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) or (ap_const_logic_1 = ap_reg_ppiten_pp0_it8))) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= R_reg_707;

    out_channels_ch1_we0_assign_proc : process(ap_reg_ppiten_pp0_it7, ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter6)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and (ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter6 = ap_const_lv1_0)))) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= ap_reg_ppstg_tmp_21_cast_reg_650_pp0_iter6(22 - 1 downto 0);

    out_channels_ch2_ce0_assign_proc : process(ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp0_it8)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) or (ap_const_logic_1 = ap_reg_ppiten_pp0_it8))) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= G_reg_712;

    out_channels_ch2_we0_assign_proc : process(ap_reg_ppiten_pp0_it7, ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter6)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and (ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter6 = ap_const_lv1_0)))) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= ap_reg_ppstg_tmp_21_cast_reg_650_pp0_iter6(22 - 1 downto 0);

    out_channels_ch3_ce0_assign_proc : process(ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp0_it8)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) or (ap_const_logic_1 = ap_reg_ppiten_pp0_it8))) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= B_reg_717;

    out_channels_ch3_we0_assign_proc : process(ap_reg_ppiten_pp0_it7, ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter6)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and (ap_reg_ppstg_exitcond_flatten_reg_626_pp0_iter6 = ap_const_lv1_0)))) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_phitmp2_fu_451_p3 <= 
        ap_const_lv8_FF when (icmp1_fu_427_p2(0) = '1') else 
        ap_const_lv8_0;
    p_phitmp3_fu_544_p3 <= 
        ap_const_lv8_FF when (icmp2_fu_520_p2(0) = '1') else 
        ap_const_lv8_0;
    p_phitmp_fu_384_p3 <= 
        ap_const_lv8_FF when (icmp_fu_362_p2(0) = '1') else 
        ap_const_lv8_0;
        p_shl1_cast_fu_491_p1 <= std_logic_vector(resize(signed(p_shl1_fu_484_p3),18));

    p_shl1_fu_484_p3 <= (D_reg_683 & ap_const_lv2_0);
    p_shl2_cast_fu_279_p3 <= (tmp_fu_275_p1 & ap_const_lv10_0);
    p_shl3_cast_fu_291_p3 <= (tmp_5_fu_287_p1 & ap_const_lv8_0);
        p_shl_cast_fu_480_p1 <= std_logic_vector(resize(signed(p_shl_fu_473_p3),19));

    p_shl_fu_473_p3 <= (D_reg_683 & ap_const_lv9_0);
    phitmp2_fu_441_p4 <= tmp_13_fu_412_p2(15 downto 8);
    phitmp3_fu_534_p4 <= tmp_17_fu_504_p2(15 downto 8);
    phitmp_fu_375_p4 <= grp_fu_600_p3(15 downto 8);
        tmp1_cast_fu_409_p1 <= std_logic_vector(resize(signed(grp_fu_582_p3),18));

        tmp2_cast_fu_500_p1 <= std_logic_vector(resize(signed(tmp2_fu_495_p2),19));

    tmp2_fu_495_p2 <= std_logic_vector(signed(tmp_3_reg_695) + signed(p_shl1_cast_fu_491_p1));
    tmp_10_fu_392_p2 <= (icmp_fu_362_p2 or tmp_8_fu_368_p3);
    tmp_12_fu_344_p1 <= E_fu_335_p2;
    tmp_12_fu_344_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(ap_const_lv17_1FF30) * signed(tmp_12_fu_344_p1))), 17));
    tmp_13_fu_412_p2 <= std_logic_vector(signed(tmp_3_reg_695) + signed(tmp1_cast_fu_409_p1));
    tmp_14_fu_417_p4 <= tmp_13_fu_412_p2(17 downto 16);
    tmp_15_fu_433_p3 <= tmp_13_fu_412_p2(17 downto 17);
    tmp_16_fu_459_p2 <= (icmp1_fu_427_p2 or tmp_15_fu_433_p3);
    tmp_17_fu_504_p2 <= std_logic_vector(signed(p_shl_cast_fu_480_p1) + signed(tmp2_cast_fu_500_p1));
    tmp_18_fu_510_p4 <= tmp_17_fu_504_p2(18 downto 16);
    tmp_19_fu_526_p3 <= tmp_17_fu_504_p2(18 downto 18);
    tmp_1_fu_309_p2 <= std_logic_vector(unsigned(tmp_s_fu_299_p2) + unsigned(tmp_cast_fu_305_p1));
    tmp_20_fu_552_p2 <= (icmp2_fu_520_p2 or tmp_19_fu_526_p3);
    tmp_21_cast_fu_321_p1 <= std_logic_vector(resize(unsigned(tmp_1_reg_640),64));
    tmp_5_fu_287_p1 <= tmp_mid2_v_fu_267_p3(15 - 1 downto 0);
    tmp_6_fu_353_p4 <= grp_fu_600_p3(17 downto 16);
    tmp_8_fu_368_p3 <= grp_fu_600_p3(17 downto 17);
    tmp_cast_fu_305_p1 <= std_logic_vector(resize(unsigned(y_mid2_fu_259_p3),23));
    tmp_fu_275_p1 <= tmp_mid2_v_fu_267_p3(13 - 1 downto 0);
    tmp_mid2_v_fu_267_p3 <= 
        x_1_fu_248_p2 when (exitcond5_fu_254_p2(0) = '1') else 
        x_phi_fu_211_p4;
    tmp_s_fu_299_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_291_p3) + unsigned(p_shl2_cast_fu_279_p3));
    x_1_fu_248_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(x_phi_fu_211_p4));

    x_phi_fu_211_p4_assign_proc : process(x_reg_207, exitcond_flatten_reg_626, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, tmp_mid2_v_reg_635)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_626 = ap_const_lv1_0))) then 
            x_phi_fu_211_p4 <= tmp_mid2_v_reg_635;
        else 
            x_phi_fu_211_p4 <= x_reg_207;
        end if; 
    end process;

    y_1_fu_315_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(y_mid2_fu_259_p3));
    y_mid2_fu_259_p3 <= 
        ap_const_lv16_0 when (exitcond5_fu_254_p2(0) = '1') else 
        y_reg_218;
end behav;
