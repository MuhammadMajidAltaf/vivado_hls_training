-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_rgb2yuv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_width : IN STD_LOGIC_VECTOR (15 downto 0);
    out_height : IN STD_LOGIC_VECTOR (15 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of yuv_filter_rgb2yuv is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st11_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_FFB6 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110110110";
    constant ap_const_lv16_7A : STD_LOGIC_VECTOR (15 downto 0) := "0000000001111010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv9_80 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_80 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv14_80 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv16_FFA2 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110100010";
    constant ap_const_lv15_7FDA : STD_LOGIC_VECTOR (14 downto 0) := "111111111011010";
    constant ap_const_lv13_19 : STD_LOGIC_VECTOR (12 downto 0) := "0000000011001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_20 : BOOLEAN;
    signal indvar_flatten_reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_201 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_reg_212 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_599 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_604 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_91 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter6 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid2_v_fu_261_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_mid2_v_reg_613 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_fu_303_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_22_reg_618 : STD_LOGIC_VECTOR (22 downto 0);
    signal y_2_fu_309_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_cast_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_cast_reg_628 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_24_cast_reg_628_pp0_iter2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_24_cast_reg_628_pp0_iter3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_24_cast_reg_628_pp0_iter4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_24_cast_reg_628_pp0_iter5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_24_cast_reg_628_pp0_iter6 : STD_LOGIC_VECTOR (63 downto 0);
    signal R_reg_651 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_R_reg_651_pp0_iter5 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_reg_659 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_G_reg_659_pp0_iter5 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_reg_666 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_cast1_fu_323_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_cast1_reg_674 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_326_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_reg_679 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_31_fu_332_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_31_reg_684 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_25_reg_689 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_reg_694 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_reg_699 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_phi_fu_205_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond9_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_2_fu_242_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_269_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_20_fu_281_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl_cast_fu_273_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl7_cast_fu_285_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal y_mid2_fu_253_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_cast_fu_299_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_s_fu_293_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_27_fu_326_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_332_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl5_fu_341_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl6_fu_352_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_fu_366_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl6_cast_fu_359_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl5_cast_fu_348_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_fu_380_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_cast_fu_386_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl4_cast_fu_373_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_cast2_fu_363_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_fu_396_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_579_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp3_cast_fu_406_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_390_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_fu_409_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl2_fu_425_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl3_fu_436_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl2_cast_fu_432_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl3_cast_fu_447_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_fu_451_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp6_fu_457_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_571_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_fu_463_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_29_fu_463_p2 : signal is "no";
    signal p_shl3_cast9_fu_443_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_neg_fu_478_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl1_fu_488_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_neg_cast_fu_484_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_cast_fu_495_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_33_fu_499_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp8_fu_505_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp8_cast_fu_511_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_564_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_34_fu_515_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp_34_fu_515_p2 : signal is "no";
    signal ap_sig_cseq_ST_st11_fsm_2 : STD_LOGIC;
    signal ap_sig_379 : BOOLEAN;
    signal bound_fu_558_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_558_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_564_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_564_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_571_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_571_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_579_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_579_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_579_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal bound_fu_558_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_558_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_571_p10 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_579_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_579_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_27_fu_326_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_31_fu_332_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component yuv_filter_mul_mul_16ns_16ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8s_8ns_16ns_16_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yuv_filter_mac_muladd_7s_8ns_16ns_16_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component yuv_filter_mac_muladd_6ns_8ns_9ns_13_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    yuv_filter_mul_mul_16ns_16ns_32_1_U0 : component yuv_filter_mul_mul_16ns_16ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => bound_fu_558_p0,
        din1 => bound_fu_558_p1,
        dout => bound_fu_558_p2);

    yuv_filter_mac_muladd_8s_8ns_16ns_16_1_U1 : component yuv_filter_mac_muladd_8s_8ns_16ns_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_564_p0,
        din1 => grp_fu_564_p1,
        din2 => tmp_31_reg_684,
        dout => grp_fu_564_p3);

    yuv_filter_mac_muladd_7s_8ns_16ns_16_1_U2 : component yuv_filter_mac_muladd_7s_8ns_16ns_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_571_p0,
        din1 => grp_fu_571_p1,
        din2 => tmp_27_reg_679,
        dout => grp_fu_571_p3);

    yuv_filter_mac_muladd_6ns_8ns_9ns_13_1_U3 : component yuv_filter_mac_muladd_6ns_8ns_9ns_13_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 9,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_579_p0,
        din1 => grp_fu_579_p1,
        din2 => grp_fu_579_p2,
        dout => grp_fu_579_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_231_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_231_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_231_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
            end if;
        end if;
    end process;


    indvar_flatten_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_231_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_190 <= indvar_flatten_next_fu_236_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_190 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_604 = ap_const_lv1_0))) then 
                x_reg_201 <= tmp_mid2_v_reg_613;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                x_reg_201 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    y_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_231_p2 = ap_const_lv1_0))) then 
                y_reg_212 <= y_2_fu_309_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                y_reg_212 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter4 = ap_const_lv1_0)) then
                B_reg_666 <= in_channels_ch3_q0;
                tmp_27_reg_679 <= tmp_27_fu_326_p2;
                tmp_31_reg_684 <= tmp_31_fu_332_p2;
                    tmp_35_cast1_reg_674(7 downto 0) <= tmp_35_cast1_fu_323_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter3 = ap_const_lv1_0)) then
                G_reg_659 <= in_channels_ch2_q0;
                R_reg_651 <= in_channels_ch1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_G_reg_659_pp0_iter5 <= G_reg_659;
                ap_reg_ppstg_R_reg_651_pp0_iter5 <= R_reg_651;
                ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter2 <= ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter1;
                ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter3 <= ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter2;
                ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter4 <= ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter3;
                ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter5 <= ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter4;
                ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter6 <= ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter5;
                    ap_reg_ppstg_tmp_24_cast_reg_628_pp0_iter2(22 downto 0) <= tmp_24_cast_reg_628(22 downto 0);
                    ap_reg_ppstg_tmp_24_cast_reg_628_pp0_iter3(22 downto 0) <= ap_reg_ppstg_tmp_24_cast_reg_628_pp0_iter2(22 downto 0);
                    ap_reg_ppstg_tmp_24_cast_reg_628_pp0_iter4(22 downto 0) <= ap_reg_ppstg_tmp_24_cast_reg_628_pp0_iter3(22 downto 0);
                    ap_reg_ppstg_tmp_24_cast_reg_628_pp0_iter5(22 downto 0) <= ap_reg_ppstg_tmp_24_cast_reg_628_pp0_iter4(22 downto 0);
                    ap_reg_ppstg_tmp_24_cast_reg_628_pp0_iter6(22 downto 0) <= ap_reg_ppstg_tmp_24_cast_reg_628_pp0_iter5(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter1 <= exitcond_flatten_reg_604;
                exitcond_flatten_reg_604 <= exitcond_flatten_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                bound_reg_599 <= bound_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_231_p2 = ap_const_lv1_0))) then
                tmp_22_reg_618 <= tmp_22_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_reg_604 = ap_const_lv1_0))) then
                    tmp_24_cast_reg_628(22 downto 0) <= tmp_24_cast_fu_315_p1(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter5 = ap_const_lv1_0)) then
                tmp_25_reg_689 <= tmp_24_fu_409_p2(15 downto 8);
                tmp_30_reg_694 <= tmp_29_fu_463_p2(15 downto 8);
                tmp_35_reg_699 <= tmp_34_fu_515_p2(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_231_p2 = ap_const_lv1_0))) then
                tmp_mid2_v_reg_613 <= tmp_mid2_v_fu_261_p3;
            end if;
        end if;
    end process;
    tmp_24_cast_reg_628(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_24_cast_reg_628_pp0_iter2(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_24_cast_reg_628_pp0_iter3(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_24_cast_reg_628_pp0_iter4(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_24_cast_reg_628_pp0_iter5(63 downto 23) <= "00000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_24_cast_reg_628_pp0_iter6(63 downto 23) <= "00000000000000000000000000000000000000000";
    tmp_35_cast1_reg_674(15 downto 8) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_231_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp0_it8)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_231_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_231_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_2;
                end if;
            when ap_ST_st11_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st11_fsm_2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st11_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= out_width;
    ap_return_1 <= out_height;

    ap_sig_20_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_20 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_379_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_379 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_91_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_91 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_91)
    begin
        if (ap_sig_91) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_2_assign_proc : process(ap_sig_379)
    begin
        if (ap_sig_379) then 
            ap_sig_cseq_ST_st11_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_20)
    begin
        if (ap_sig_20) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_558_p0 <= bound_fu_558_p00(16 - 1 downto 0);
    bound_fu_558_p00 <= std_logic_vector(resize(unsigned(out_height),32));
    bound_fu_558_p1 <= bound_fu_558_p10(16 - 1 downto 0);
    bound_fu_558_p10 <= std_logic_vector(resize(unsigned(out_width),32));
    exitcond9_fu_248_p2 <= "1" when (y_reg_212 = out_height) else "0";
    exitcond_flatten_fu_231_p2 <= "1" when (indvar_flatten_reg_190 = bound_reg_599) else "0";
    grp_fu_564_p0 <= ap_const_lv16_FFA2(8 - 1 downto 0);
    grp_fu_564_p1 <= tmp_35_cast1_reg_674(8 - 1 downto 0);
    grp_fu_571_p0 <= ap_const_lv15_7FDA(7 - 1 downto 0);
    grp_fu_571_p1 <= grp_fu_571_p10(8 - 1 downto 0);
    grp_fu_571_p10 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_R_reg_651_pp0_iter5),15));
    grp_fu_579_p0 <= ap_const_lv13_19(6 - 1 downto 0);
    grp_fu_579_p1 <= grp_fu_579_p10(8 - 1 downto 0);
    grp_fu_579_p10 <= std_logic_vector(resize(unsigned(B_reg_666),13));
    grp_fu_579_p2 <= grp_fu_579_p20(9 - 1 downto 0);
    grp_fu_579_p20 <= std_logic_vector(resize(unsigned(tmp4_fu_396_p2),13));
    in_channels_ch1_address0 <= tmp_24_cast_fu_315_p1(22 - 1 downto 0);

    in_channels_ch1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) or (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) or (ap_const_logic_1 = ap_reg_ppiten_pp0_it4) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= tmp_24_cast_fu_315_p1(22 - 1 downto 0);

    in_channels_ch2_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) or (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) or (ap_const_logic_1 = ap_reg_ppiten_pp0_it4) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= tmp_24_cast_reg_628(22 - 1 downto 0);

    in_channels_ch3_ce0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it5)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) or (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) or (ap_const_logic_1 = ap_reg_ppiten_pp0_it4) or (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_236_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_190) + unsigned(ap_const_lv32_1));
    out_channels_ch1_address0 <= ap_reg_ppstg_tmp_24_cast_reg_628_pp0_iter6(22 - 1 downto 0);

    out_channels_ch1_ce0_assign_proc : process(ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp0_it8)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) or (ap_const_logic_1 = ap_reg_ppiten_pp0_it8))) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= std_logic_vector(unsigned(ap_const_lv8_10) + unsigned(tmp_25_reg_689));

    out_channels_ch1_we0_assign_proc : process(ap_reg_ppiten_pp0_it7, ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter6)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and (ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter6 = ap_const_lv1_0)))) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= ap_reg_ppstg_tmp_24_cast_reg_628_pp0_iter6(22 - 1 downto 0);

    out_channels_ch2_ce0_assign_proc : process(ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp0_it8)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) or (ap_const_logic_1 = ap_reg_ppiten_pp0_it8))) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= (tmp_30_reg_694 xor ap_const_lv8_80);

    out_channels_ch2_we0_assign_proc : process(ap_reg_ppiten_pp0_it7, ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter6)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and (ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter6 = ap_const_lv1_0)))) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= ap_reg_ppstg_tmp_24_cast_reg_628_pp0_iter6(22 - 1 downto 0);

    out_channels_ch3_ce0_assign_proc : process(ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp0_it8)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) or (ap_const_logic_1 = ap_reg_ppiten_pp0_it8))) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= (tmp_35_reg_699 xor ap_const_lv8_80);

    out_channels_ch3_we0_assign_proc : process(ap_reg_ppiten_pp0_it7, ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter6)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and (ap_reg_ppstg_exitcond_flatten_reg_604_pp0_iter6 = ap_const_lv1_0)))) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

        p_neg_cast_fu_484_p1 <= std_logic_vector(resize(signed(p_neg_fu_478_p2),14));

    p_neg_fu_478_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(p_shl3_cast9_fu_443_p1));
    p_shl1_cast_fu_495_p1 <= std_logic_vector(resize(unsigned(p_shl1_fu_488_p3),14));
    p_shl1_fu_488_p3 <= (B_reg_666 & ap_const_lv1_0);
    p_shl2_cast_fu_432_p1 <= std_logic_vector(resize(unsigned(p_shl2_fu_425_p3),16));
    p_shl2_fu_425_p3 <= (B_reg_666 & ap_const_lv7_0);
    p_shl3_cast9_fu_443_p1 <= std_logic_vector(resize(unsigned(p_shl3_fu_436_p3),13));
    p_shl3_cast_fu_447_p1 <= std_logic_vector(resize(unsigned(p_shl3_fu_436_p3),16));
    p_shl3_fu_436_p3 <= (B_reg_666 & ap_const_lv4_0);
    p_shl4_cast_fu_373_p1 <= std_logic_vector(resize(unsigned(p_shl4_fu_366_p3),16));
    p_shl4_fu_366_p3 <= (ap_reg_ppstg_G_reg_659_pp0_iter5 & ap_const_lv7_0);
    p_shl5_cast_fu_348_p1 <= std_logic_vector(resize(unsigned(p_shl5_fu_341_p3),15));
    p_shl5_fu_341_p3 <= (ap_reg_ppstg_R_reg_651_pp0_iter5 & ap_const_lv6_0);
    p_shl6_cast_fu_359_p1 <= std_logic_vector(resize(unsigned(p_shl6_fu_352_p3),15));
    p_shl6_fu_352_p3 <= (ap_reg_ppstg_R_reg_651_pp0_iter5 & ap_const_lv1_0);
    p_shl7_cast_fu_285_p3 <= (tmp_20_fu_281_p1 & ap_const_lv8_0);
    p_shl_cast_fu_273_p3 <= (tmp_fu_269_p1 & ap_const_lv10_0);
    tmp1_fu_390_p2 <= std_logic_vector(unsigned(tmp2_cast_fu_386_p1) + unsigned(p_shl4_cast_fu_373_p1));
    tmp2_cast_fu_386_p1 <= std_logic_vector(resize(unsigned(tmp2_fu_380_p2),16));
    tmp2_fu_380_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_359_p1) + unsigned(p_shl5_cast_fu_348_p1));
    tmp3_cast_fu_406_p1 <= std_logic_vector(resize(unsigned(grp_fu_579_p3),16));
    tmp4_fu_396_p2 <= std_logic_vector(unsigned(ap_const_lv9_80) + unsigned(tmp_35_cast2_fu_363_p1));
    tmp6_fu_457_p2 <= std_logic_vector(unsigned(ap_const_lv16_80) + unsigned(tmp_28_fu_451_p2));
        tmp8_cast_fu_511_p1 <= std_logic_vector(resize(signed(tmp8_fu_505_p2),16));

    tmp8_fu_505_p2 <= std_logic_vector(unsigned(ap_const_lv14_80) + unsigned(tmp_33_fu_499_p2));
    tmp_20_fu_281_p1 <= tmp_mid2_v_fu_261_p3(15 - 1 downto 0);
    tmp_22_fu_303_p2 <= std_logic_vector(unsigned(tmp_cast_fu_299_p1) + unsigned(tmp_s_fu_293_p2));
    tmp_24_cast_fu_315_p1 <= std_logic_vector(resize(unsigned(tmp_22_reg_618),64));
    tmp_24_fu_409_p2 <= std_logic_vector(unsigned(tmp3_cast_fu_406_p1) + unsigned(tmp1_fu_390_p2));
    tmp_27_fu_326_p1 <= tmp_27_fu_326_p10(8 - 1 downto 0);
    tmp_27_fu_326_p10 <= std_logic_vector(resize(unsigned(G_reg_659),16));
    tmp_27_fu_326_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(ap_const_lv16_FFB6) * signed('0' &tmp_27_fu_326_p1))), 16));
    tmp_28_fu_451_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_432_p1) - unsigned(p_shl3_cast_fu_447_p1));
    tmp_29_fu_463_p2 <= std_logic_vector(unsigned(tmp6_fu_457_p2) + unsigned(grp_fu_571_p3));
    tmp_31_fu_332_p1 <= tmp_31_fu_332_p10(8 - 1 downto 0);
    tmp_31_fu_332_p10 <= std_logic_vector(resize(unsigned(R_reg_651),16));
    tmp_31_fu_332_p2 <= std_logic_vector(resize(unsigned(ap_const_lv16_7A) * unsigned(tmp_31_fu_332_p1), 16));
    tmp_33_fu_499_p2 <= std_logic_vector(signed(p_neg_cast_fu_484_p1) - signed(p_shl1_cast_fu_495_p1));
    tmp_34_fu_515_p2 <= std_logic_vector(signed(tmp8_cast_fu_511_p1) + signed(grp_fu_564_p3));
    tmp_35_cast1_fu_323_p1 <= std_logic_vector(resize(unsigned(G_reg_659),16));
    tmp_35_cast2_fu_363_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_G_reg_659_pp0_iter5),9));
    tmp_cast_fu_299_p1 <= std_logic_vector(resize(unsigned(y_mid2_fu_253_p3),23));
    tmp_fu_269_p1 <= tmp_mid2_v_fu_261_p3(13 - 1 downto 0);
    tmp_mid2_v_fu_261_p3 <= 
        x_2_fu_242_p2 when (exitcond9_fu_248_p2(0) = '1') else 
        x_phi_fu_205_p4;
    tmp_s_fu_293_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_273_p3) + unsigned(p_shl7_cast_fu_285_p3));
    x_2_fu_242_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(x_phi_fu_205_p4));

    x_phi_fu_205_p4_assign_proc : process(x_reg_201, exitcond_flatten_reg_604, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, tmp_mid2_v_reg_613)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_604 = ap_const_lv1_0))) then 
            x_phi_fu_205_p4 <= tmp_mid2_v_reg_613;
        else 
            x_phi_fu_205_p4 <= x_reg_201;
        end if; 
    end process;

    y_2_fu_309_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(y_mid2_fu_253_p3));
    y_mid2_fu_253_p3 <= 
        ap_const_lv16_0 when (exitcond9_fu_248_p2(0) = '1') else 
        y_reg_212;
end behav;
