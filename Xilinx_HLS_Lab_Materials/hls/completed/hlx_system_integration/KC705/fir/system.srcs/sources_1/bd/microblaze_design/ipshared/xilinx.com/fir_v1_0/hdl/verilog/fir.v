// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2016_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k325tffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.702000,HLS_SYN_LAT=45,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=328,HLS_SYN_LUT=267}" *)

module fir (
        ap_clk,
        ap_rst_n,
        y,
        y_ap_vld,
        s_axi_fir_io_AWVALID,
        s_axi_fir_io_AWREADY,
        s_axi_fir_io_AWADDR,
        s_axi_fir_io_WVALID,
        s_axi_fir_io_WREADY,
        s_axi_fir_io_WDATA,
        s_axi_fir_io_WSTRB,
        s_axi_fir_io_ARVALID,
        s_axi_fir_io_ARREADY,
        s_axi_fir_io_ARADDR,
        s_axi_fir_io_RVALID,
        s_axi_fir_io_RREADY,
        s_axi_fir_io_RDATA,
        s_axi_fir_io_RRESP,
        s_axi_fir_io_BVALID,
        s_axi_fir_io_BREADY,
        s_axi_fir_io_BRESP,
        interrupt
);

parameter    ap_ST_st1_fsm_0 = 5'b1;
parameter    ap_ST_st2_fsm_1 = 5'b10;
parameter    ap_ST_st3_fsm_2 = 5'b100;
parameter    ap_ST_st4_fsm_3 = 5'b1000;
parameter    ap_ST_st5_fsm_4 = 5'b10000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    C_S_AXI_FIR_IO_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_FIR_IO_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv5_A = 5'b1010;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv5_1F = 5'b11111;
parameter    ap_const_lv5_0 = 5'b00000;

parameter C_S_AXI_FIR_IO_WSTRB_WIDTH = (C_S_AXI_FIR_IO_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] y;
output   y_ap_vld;
input   s_axi_fir_io_AWVALID;
output   s_axi_fir_io_AWREADY;
input  [C_S_AXI_FIR_IO_ADDR_WIDTH - 1 : 0] s_axi_fir_io_AWADDR;
input   s_axi_fir_io_WVALID;
output   s_axi_fir_io_WREADY;
input  [C_S_AXI_FIR_IO_DATA_WIDTH - 1 : 0] s_axi_fir_io_WDATA;
input  [C_S_AXI_FIR_IO_WSTRB_WIDTH - 1 : 0] s_axi_fir_io_WSTRB;
input   s_axi_fir_io_ARVALID;
output   s_axi_fir_io_ARREADY;
input  [C_S_AXI_FIR_IO_ADDR_WIDTH - 1 : 0] s_axi_fir_io_ARADDR;
output   s_axi_fir_io_RVALID;
input   s_axi_fir_io_RREADY;
output  [C_S_AXI_FIR_IO_DATA_WIDTH - 1 : 0] s_axi_fir_io_RDATA;
output  [1:0] s_axi_fir_io_RRESP;
output   s_axi_fir_io_BVALID;
input   s_axi_fir_io_BREADY;
output  [1:0] s_axi_fir_io_BRESP;
output   interrupt;

reg y_ap_vld;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_22;
reg    ap_ready;
wire   [31:0] x;
reg   [3:0] shift_reg_address0;
reg    shift_reg_ce0;
reg    shift_reg_we0;
reg   [31:0] shift_reg_d0;
wire   [31:0] shift_reg_q0;
wire   [3:0] c_address0;
reg    c_ce0;
wire   [6:0] c_q0;
reg   [31:0] x_read_reg_182;
wire   [0:0] tmp_1_fu_152_p2;
reg   [0:0] tmp_1_reg_190;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_97;
wire   [0:0] tmp_fu_144_p3;
wire   [63:0] tmp_4_fu_163_p1;
reg   [63:0] tmp_4_reg_199;
reg  signed [31:0] shift_reg_load_reg_209;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_118;
reg   [6:0] c_load_reg_214;
wire   [31:0] tmp_5_fu_171_p2;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_128;
wire   [4:0] grp_fu_133_p2;
reg   [4:0] i_1_reg_224;
wire   [31:0] acc_1_fu_176_p2;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_141;
reg   [31:0] acc_reg_97;
wire   [4:0] i_phi_fu_114_p4;
reg   [4:0] i_reg_110;
reg   [31:0] p_pn_reg_122;
wire   [63:0] tmp_3_fu_158_p1;
reg   [4:0] grp_fu_133_p0;
wire  signed [31:0] i_cast_fu_140_p1;
wire  signed [6:0] tmp_5_fu_171_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'b1;
end

fir_shift_reg #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(shift_reg_address0),
    .ce0(shift_reg_ce0),
    .we0(shift_reg_we0),
    .d0(shift_reg_d0),
    .q0(shift_reg_q0)
);

fir_c #(
    .DataWidth( 7 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c_address0),
    .ce0(c_ce0),
    .q0(c_q0)
);

fir_fir_io_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_FIR_IO_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_FIR_IO_DATA_WIDTH ))
fir_fir_io_s_axi_U(
    .AWVALID(s_axi_fir_io_AWVALID),
    .AWREADY(s_axi_fir_io_AWREADY),
    .AWADDR(s_axi_fir_io_AWADDR),
    .WVALID(s_axi_fir_io_WVALID),
    .WREADY(s_axi_fir_io_WREADY),
    .WDATA(s_axi_fir_io_WDATA),
    .WSTRB(s_axi_fir_io_WSTRB),
    .ARVALID(s_axi_fir_io_ARVALID),
    .ARREADY(s_axi_fir_io_ARREADY),
    .ARADDR(s_axi_fir_io_ARADDR),
    .RVALID(s_axi_fir_io_RVALID),
    .RREADY(s_axi_fir_io_RREADY),
    .RDATA(s_axi_fir_io_RDATA),
    .RRESP(s_axi_fir_io_RRESP),
    .BVALID(s_axi_fir_io_BVALID),
    .BREADY(s_axi_fir_io_BREADY),
    .BRESP(s_axi_fir_io_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .x(x)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        acc_reg_97 <= acc_1_fu_176_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        acc_reg_97 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        i_reg_110 <= i_1_reg_224;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_reg_110 <= ap_const_lv5_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (tmp_1_reg_190 == 1'b0))) begin
        p_pn_reg_122 <= tmp_5_fu_171_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_144_p3 == 1'b0) & ~(tmp_1_fu_152_p2 == 1'b0))) begin
        p_pn_reg_122 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        c_load_reg_214 <= c_q0;
        shift_reg_load_reg_209 <= shift_reg_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        i_1_reg_224 <= grp_fu_133_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_144_p3 == 1'b0))) begin
        tmp_1_reg_190 <= tmp_1_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_144_p3 == 1'b0) & (tmp_1_fu_152_p2 == 1'b0))) begin
        tmp_4_reg_199[31 : 0] <= tmp_4_fu_163_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        x_read_reg_182 <= x;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_fu_144_p3 == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_fu_144_p3 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_97) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_118) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_128) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_141) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        grp_fu_133_p0 = i_reg_110;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        grp_fu_133_p0 = i_phi_fu_114_p4;
    end else begin
        grp_fu_133_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        shift_reg_address0 = tmp_4_reg_199;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_144_p3 == 1'b0) & ~(tmp_1_fu_152_p2 == 1'b0))) begin
        shift_reg_address0 = ap_const_lv4_0;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        shift_reg_address0 = tmp_3_fu_158_p1;
    end else begin
        shift_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2))) begin
        shift_reg_ce0 = 1'b1;
    end else begin
        shift_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        shift_reg_d0 = shift_reg_q0;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_144_p3 == 1'b0) & ~(tmp_1_fu_152_p2 == 1'b0))) begin
        shift_reg_d0 = x_read_reg_182;
    end else begin
        shift_reg_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_144_p3 == 1'b0) & ~(tmp_1_fu_152_p2 == 1'b0)))) begin
        shift_reg_we0 = 1'b1;
    end else begin
        shift_reg_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_fu_144_p3 == 1'b0))) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(tmp_fu_144_p3 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if (((tmp_fu_144_p3 == 1'b0) & ~(tmp_1_fu_152_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_fu_176_p2 = (p_pn_reg_122 + acc_reg_97);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

always @ (*) begin
    ap_sig_118 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_128 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_141 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_22 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_97 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

assign c_address0 = tmp_4_fu_163_p1;

assign grp_fu_133_p2 = ($signed(grp_fu_133_p0) + $signed(ap_const_lv5_1F));

assign i_cast_fu_140_p1 = $signed(i_reg_110);

assign i_phi_fu_114_p4 = i_reg_110;

assign tmp_1_fu_152_p2 = ((i_reg_110 == ap_const_lv5_0) ? 1'b1 : 1'b0);

assign tmp_3_fu_158_p1 = grp_fu_133_p2;

assign tmp_4_fu_163_p1 = $unsigned(i_cast_fu_140_p1);

assign tmp_5_fu_171_p1 = c_load_reg_214;

assign tmp_5_fu_171_p2 = ($signed(shift_reg_load_reg_209) * $signed(tmp_5_fu_171_p1));

assign tmp_fu_144_p3 = i_reg_110[ap_const_lv32_4];

assign y = acc_reg_97;

always @ (posedge ap_clk) begin
    tmp_4_reg_199[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //fir
