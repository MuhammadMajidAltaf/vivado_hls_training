// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fir.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fir::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fir::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> fir::ap_ST_st1_fsm_0 = "1";
const sc_lv<5> fir::ap_ST_st2_fsm_1 = "10";
const sc_lv<5> fir::ap_ST_st3_fsm_2 = "100";
const sc_lv<5> fir::ap_ST_st4_fsm_3 = "1000";
const sc_lv<5> fir::ap_ST_st5_fsm_4 = "10000";
const sc_lv<32> fir::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> fir::ap_const_lv1_1 = "1";
const int fir::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> fir::ap_const_lv32_1 = "1";
const sc_lv<1> fir::ap_const_lv1_0 = "0";
const sc_lv<32> fir::ap_const_lv32_2 = "10";
const sc_lv<32> fir::ap_const_lv32_3 = "11";
const sc_lv<32> fir::ap_const_lv32_4 = "100";
const sc_lv<5> fir::ap_const_lv5_A = "1010";
const sc_lv<4> fir::ap_const_lv4_0 = "0000";
const sc_lv<5> fir::ap_const_lv5_1F = "11111";
const sc_lv<5> fir::ap_const_lv5_0 = "00000";

fir::fir(sc_module_name name) : sc_module(name), mVcdFile(0) {
    shift_reg_U = new fir_shift_reg("shift_reg_U");
    shift_reg_U->clk(ap_clk);
    shift_reg_U->reset(ap_rst_n_inv);
    shift_reg_U->address0(shift_reg_address0);
    shift_reg_U->ce0(shift_reg_ce0);
    shift_reg_U->we0(shift_reg_we0);
    shift_reg_U->d0(shift_reg_d0);
    shift_reg_U->q0(shift_reg_q0);
    c_U = new fir_c("c_U");
    c_U->clk(ap_clk);
    c_U->reset(ap_rst_n_inv);
    c_U->address0(c_address0);
    c_U->ce0(c_ce0);
    c_U->q0(c_q0);
    fir_fir_io_s_axi_U = new fir_fir_io_s_axi<C_S_AXI_FIR_IO_ADDR_WIDTH,C_S_AXI_FIR_IO_DATA_WIDTH>("fir_fir_io_s_axi_U");
    fir_fir_io_s_axi_U->AWVALID(s_axi_fir_io_AWVALID);
    fir_fir_io_s_axi_U->AWREADY(s_axi_fir_io_AWREADY);
    fir_fir_io_s_axi_U->AWADDR(s_axi_fir_io_AWADDR);
    fir_fir_io_s_axi_U->WVALID(s_axi_fir_io_WVALID);
    fir_fir_io_s_axi_U->WREADY(s_axi_fir_io_WREADY);
    fir_fir_io_s_axi_U->WDATA(s_axi_fir_io_WDATA);
    fir_fir_io_s_axi_U->WSTRB(s_axi_fir_io_WSTRB);
    fir_fir_io_s_axi_U->ARVALID(s_axi_fir_io_ARVALID);
    fir_fir_io_s_axi_U->ARREADY(s_axi_fir_io_ARREADY);
    fir_fir_io_s_axi_U->ARADDR(s_axi_fir_io_ARADDR);
    fir_fir_io_s_axi_U->RVALID(s_axi_fir_io_RVALID);
    fir_fir_io_s_axi_U->RREADY(s_axi_fir_io_RREADY);
    fir_fir_io_s_axi_U->RDATA(s_axi_fir_io_RDATA);
    fir_fir_io_s_axi_U->RRESP(s_axi_fir_io_RRESP);
    fir_fir_io_s_axi_U->BVALID(s_axi_fir_io_BVALID);
    fir_fir_io_s_axi_U->BREADY(s_axi_fir_io_BREADY);
    fir_fir_io_s_axi_U->BRESP(s_axi_fir_io_BRESP);
    fir_fir_io_s_axi_U->ACLK(ap_clk);
    fir_fir_io_s_axi_U->ARESET(ap_rst_n_inv);
    fir_fir_io_s_axi_U->ACLK_EN(ap_var_for_const0);
    fir_fir_io_s_axi_U->ap_start(ap_start);
    fir_fir_io_s_axi_U->interrupt(interrupt);
    fir_fir_io_s_axi_U->ap_ready(ap_ready);
    fir_fir_io_s_axi_U->ap_done(ap_done);
    fir_fir_io_s_axi_U->ap_idle(ap_idle);
    fir_fir_io_s_axi_U->y(acc_reg_97);
    fir_fir_io_s_axi_U->y_ap_vld(y_ap_vld);
    fir_fir_io_s_axi_U->x(x);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_acc_1_fu_176_p2);
    sensitive << ( acc_reg_97 );
    sensitive << ( p_pn_reg_122 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_fu_144_p3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_fu_144_p3 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_118);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_128);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_141);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_97);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_22 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_97 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_118 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_128 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_141 );

    SC_METHOD(thread_c_address0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_4_fu_163_p1 );

    SC_METHOD(thread_c_ce0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_grp_fu_133_p0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( i_phi_fu_114_p4 );
    sensitive << ( i_reg_110 );

    SC_METHOD(thread_grp_fu_133_p2);
    sensitive << ( grp_fu_133_p0 );

    SC_METHOD(thread_i_cast_fu_140_p1);
    sensitive << ( i_reg_110 );

    SC_METHOD(thread_i_phi_fu_114_p4);
    sensitive << ( i_reg_110 );

    SC_METHOD(thread_shift_reg_address0);
    sensitive << ( tmp_1_fu_152_p2 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_fu_144_p3 );
    sensitive << ( tmp_4_reg_199 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( tmp_3_fu_158_p1 );

    SC_METHOD(thread_shift_reg_ce0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_shift_reg_d0);
    sensitive << ( shift_reg_q0 );
    sensitive << ( x_read_reg_182 );
    sensitive << ( tmp_1_fu_152_p2 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_fu_144_p3 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_shift_reg_we0);
    sensitive << ( tmp_1_fu_152_p2 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_fu_144_p3 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_tmp_1_fu_152_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_fu_144_p3 );
    sensitive << ( i_reg_110 );

    SC_METHOD(thread_tmp_3_fu_158_p1);
    sensitive << ( grp_fu_133_p2 );

    SC_METHOD(thread_tmp_4_fu_163_p1);
    sensitive << ( i_cast_fu_140_p1 );

    SC_METHOD(thread_tmp_5_fu_171_p1);
    sensitive << ( c_load_reg_214 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_tmp_5_fu_171_p2);
    sensitive << ( shift_reg_load_reg_209 );
    sensitive << ( tmp_5_fu_171_p1 );

    SC_METHOD(thread_tmp_fu_144_p3);
    sensitive << ( i_reg_110 );

    SC_METHOD(thread_y_ap_vld);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_fu_144_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_1_fu_152_p2 );
    sensitive << ( tmp_fu_144_p3 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fir_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_fir_io_AWVALID, "(port)s_axi_fir_io_AWVALID");
    sc_trace(mVcdFile, s_axi_fir_io_AWREADY, "(port)s_axi_fir_io_AWREADY");
    sc_trace(mVcdFile, s_axi_fir_io_AWADDR, "(port)s_axi_fir_io_AWADDR");
    sc_trace(mVcdFile, s_axi_fir_io_WVALID, "(port)s_axi_fir_io_WVALID");
    sc_trace(mVcdFile, s_axi_fir_io_WREADY, "(port)s_axi_fir_io_WREADY");
    sc_trace(mVcdFile, s_axi_fir_io_WDATA, "(port)s_axi_fir_io_WDATA");
    sc_trace(mVcdFile, s_axi_fir_io_WSTRB, "(port)s_axi_fir_io_WSTRB");
    sc_trace(mVcdFile, s_axi_fir_io_ARVALID, "(port)s_axi_fir_io_ARVALID");
    sc_trace(mVcdFile, s_axi_fir_io_ARREADY, "(port)s_axi_fir_io_ARREADY");
    sc_trace(mVcdFile, s_axi_fir_io_ARADDR, "(port)s_axi_fir_io_ARADDR");
    sc_trace(mVcdFile, s_axi_fir_io_RVALID, "(port)s_axi_fir_io_RVALID");
    sc_trace(mVcdFile, s_axi_fir_io_RREADY, "(port)s_axi_fir_io_RREADY");
    sc_trace(mVcdFile, s_axi_fir_io_RDATA, "(port)s_axi_fir_io_RDATA");
    sc_trace(mVcdFile, s_axi_fir_io_RRESP, "(port)s_axi_fir_io_RRESP");
    sc_trace(mVcdFile, s_axi_fir_io_BVALID, "(port)s_axi_fir_io_BVALID");
    sc_trace(mVcdFile, s_axi_fir_io_BREADY, "(port)s_axi_fir_io_BREADY");
    sc_trace(mVcdFile, s_axi_fir_io_BRESP, "(port)s_axi_fir_io_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_22, "ap_sig_22");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, y_ap_vld, "y_ap_vld");
    sc_trace(mVcdFile, x, "x");
    sc_trace(mVcdFile, shift_reg_address0, "shift_reg_address0");
    sc_trace(mVcdFile, shift_reg_ce0, "shift_reg_ce0");
    sc_trace(mVcdFile, shift_reg_we0, "shift_reg_we0");
    sc_trace(mVcdFile, shift_reg_d0, "shift_reg_d0");
    sc_trace(mVcdFile, shift_reg_q0, "shift_reg_q0");
    sc_trace(mVcdFile, c_address0, "c_address0");
    sc_trace(mVcdFile, c_ce0, "c_ce0");
    sc_trace(mVcdFile, c_q0, "c_q0");
    sc_trace(mVcdFile, x_read_reg_182, "x_read_reg_182");
    sc_trace(mVcdFile, tmp_1_fu_152_p2, "tmp_1_fu_152_p2");
    sc_trace(mVcdFile, tmp_1_reg_190, "tmp_1_reg_190");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_97, "ap_sig_97");
    sc_trace(mVcdFile, tmp_fu_144_p3, "tmp_fu_144_p3");
    sc_trace(mVcdFile, tmp_4_fu_163_p1, "tmp_4_fu_163_p1");
    sc_trace(mVcdFile, tmp_4_reg_199, "tmp_4_reg_199");
    sc_trace(mVcdFile, shift_reg_load_reg_209, "shift_reg_load_reg_209");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_118, "ap_sig_118");
    sc_trace(mVcdFile, c_load_reg_214, "c_load_reg_214");
    sc_trace(mVcdFile, tmp_5_fu_171_p2, "tmp_5_fu_171_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_128, "ap_sig_128");
    sc_trace(mVcdFile, grp_fu_133_p2, "grp_fu_133_p2");
    sc_trace(mVcdFile, i_1_reg_224, "i_1_reg_224");
    sc_trace(mVcdFile, acc_1_fu_176_p2, "acc_1_fu_176_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_141, "ap_sig_141");
    sc_trace(mVcdFile, acc_reg_97, "acc_reg_97");
    sc_trace(mVcdFile, i_phi_fu_114_p4, "i_phi_fu_114_p4");
    sc_trace(mVcdFile, i_reg_110, "i_reg_110");
    sc_trace(mVcdFile, p_pn_reg_122, "p_pn_reg_122");
    sc_trace(mVcdFile, tmp_3_fu_158_p1, "tmp_3_fu_158_p1");
    sc_trace(mVcdFile, grp_fu_133_p0, "grp_fu_133_p0");
    sc_trace(mVcdFile, i_cast_fu_140_p1, "i_cast_fu_140_p1");
    sc_trace(mVcdFile, tmp_5_fu_171_p1, "tmp_5_fu_171_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("fir.hdltvin.dat");
    mHdltvoutHandle.open("fir.hdltvout.dat");
}

fir::~fir() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete shift_reg_U;
    delete c_U;
    delete fir_fir_io_s_axi_U;
}

void fir::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void fir::thread_ap_clk_no_reset_() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        acc_reg_97 = acc_1_fu_176_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        acc_reg_97 = ap_const_lv32_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        i_reg_110 = i_1_reg_224.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_reg_110 = ap_const_lv5_A;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_190.read(), ap_const_lv1_0))) {
        p_pn_reg_122 = tmp_5_fu_171_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                esl_seteq<1,1,1>(tmp_fu_144_p3.read(), ap_const_lv1_0) && 
                !esl_seteq<1,1,1>(tmp_1_fu_152_p2.read(), ap_const_lv1_0))) {
        p_pn_reg_122 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        c_load_reg_214 = c_q0.read();
        shift_reg_load_reg_209 = shift_reg_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        i_1_reg_224 = grp_fu_133_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && esl_seteq<1,1,1>(tmp_fu_144_p3.read(), ap_const_lv1_0))) {
        tmp_1_reg_190 = tmp_1_fu_152_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && esl_seteq<1,1,1>(tmp_fu_144_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_1_fu_152_p2.read(), ap_const_lv1_0))) {
        tmp_4_reg_199 = tmp_4_fu_163_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        x_read_reg_182 = x.read();
    }
}

void fir::thread_acc_1_fu_176_p2() {
    acc_1_fu_176_p2 = (!p_pn_reg_122.read().is_01() || !acc_reg_97.read().is_01())? sc_lv<32>(): (sc_biguint<32>(p_pn_reg_122.read()) + sc_biguint<32>(acc_reg_97.read()));
}

void fir::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(tmp_fu_144_p3.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fir::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fir::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(tmp_fu_144_p3.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fir::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void fir::thread_ap_sig_118() {
    ap_sig_118 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void fir::thread_ap_sig_128() {
    ap_sig_128 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void fir::thread_ap_sig_141() {
    ap_sig_141 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void fir::thread_ap_sig_22() {
    ap_sig_22 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void fir::thread_ap_sig_97() {
    ap_sig_97 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void fir::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_22.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void fir::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_97.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void fir::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_118.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void fir::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_128.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void fir::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_141.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void fir::thread_c_address0() {
    c_address0 =  (sc_lv<4>) (tmp_4_fu_163_p1.read());
}

void fir::thread_c_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        c_ce0 = ap_const_logic_1;
    } else {
        c_ce0 = ap_const_logic_0;
    }
}

void fir::thread_grp_fu_133_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        grp_fu_133_p0 = i_reg_110.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        grp_fu_133_p0 = i_phi_fu_114_p4.read();
    } else {
        grp_fu_133_p0 = "XXXXX";
    }
}

void fir::thread_grp_fu_133_p2() {
    grp_fu_133_p2 = (!grp_fu_133_p0.read().is_01() || !ap_const_lv5_1F.is_01())? sc_lv<5>(): (sc_biguint<5>(grp_fu_133_p0.read()) + sc_bigint<5>(ap_const_lv5_1F));
}

void fir::thread_i_cast_fu_140_p1() {
    i_cast_fu_140_p1 = esl_sext<32,5>(i_reg_110.read());
}

void fir::thread_i_phi_fu_114_p4() {
    i_phi_fu_114_p4 = i_reg_110.read();
}

void fir::thread_shift_reg_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        shift_reg_address0 =  (sc_lv<4>) (tmp_4_reg_199.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                esl_seteq<1,1,1>(tmp_fu_144_p3.read(), ap_const_lv1_0) && 
                !esl_seteq<1,1,1>(tmp_1_fu_152_p2.read(), ap_const_lv1_0))) {
        shift_reg_address0 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        shift_reg_address0 =  (sc_lv<4>) (tmp_3_fu_158_p1.read());
    } else {
        shift_reg_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void fir::thread_shift_reg_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()))) {
        shift_reg_ce0 = ap_const_logic_1;
    } else {
        shift_reg_ce0 = ap_const_logic_0;
    }
}

void fir::thread_shift_reg_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        shift_reg_d0 = shift_reg_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                esl_seteq<1,1,1>(tmp_fu_144_p3.read(), ap_const_lv1_0) && 
                !esl_seteq<1,1,1>(tmp_1_fu_152_p2.read(), ap_const_lv1_0))) {
        shift_reg_d0 = x_read_reg_182.read();
    } else {
        shift_reg_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fir::thread_shift_reg_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          esl_seteq<1,1,1>(tmp_fu_144_p3.read(), ap_const_lv1_0) && 
          !esl_seteq<1,1,1>(tmp_1_fu_152_p2.read(), ap_const_lv1_0)))) {
        shift_reg_we0 = ap_const_logic_1;
    } else {
        shift_reg_we0 = ap_const_logic_0;
    }
}

void fir::thread_tmp_1_fu_152_p2() {
    tmp_1_fu_152_p2 = (!i_reg_110.read().is_01() || !ap_const_lv5_0.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_110.read() == ap_const_lv5_0);
}

void fir::thread_tmp_3_fu_158_p1() {
    tmp_3_fu_158_p1 = esl_zext<64,5>(grp_fu_133_p2.read());
}

void fir::thread_tmp_4_fu_163_p1() {
    tmp_4_fu_163_p1 = esl_zext<64,32>(i_cast_fu_140_p1.read());
}

void fir::thread_tmp_5_fu_171_p1() {
    tmp_5_fu_171_p1 = c_load_reg_214.read();
}

void fir::thread_tmp_5_fu_171_p2() {
    tmp_5_fu_171_p2 = (!shift_reg_load_reg_209.read().is_01() || !tmp_5_fu_171_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(shift_reg_load_reg_209.read()) * sc_bigint<7>(tmp_5_fu_171_p1.read());
}

void fir::thread_tmp_fu_144_p3() {
    tmp_fu_144_p3 = i_reg_110.read().range(4, 4);
}

void fir::thread_y_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(tmp_fu_144_p3.read(), ap_const_lv1_0))) {
        y_ap_vld = ap_const_logic_1;
    } else {
        y_ap_vld = ap_const_logic_0;
    }
}

void fir::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(tmp_fu_144_p3.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else if ((esl_seteq<1,1,1>(tmp_fu_144_p3.read(), ap_const_lv1_0) && !esl_seteq<1,1,1>(tmp_1_fu_152_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

void fir::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_AWVALID\" :  \"" << s_axi_fir_io_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_fir_io_AWREADY\" :  \"" << s_axi_fir_io_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_AWADDR\" :  \"" << s_axi_fir_io_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_WVALID\" :  \"" << s_axi_fir_io_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_fir_io_WREADY\" :  \"" << s_axi_fir_io_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_WDATA\" :  \"" << s_axi_fir_io_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_WSTRB\" :  \"" << s_axi_fir_io_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_ARVALID\" :  \"" << s_axi_fir_io_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_fir_io_ARREADY\" :  \"" << s_axi_fir_io_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_ARADDR\" :  \"" << s_axi_fir_io_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_fir_io_RVALID\" :  \"" << s_axi_fir_io_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_RREADY\" :  \"" << s_axi_fir_io_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_fir_io_RDATA\" :  \"" << s_axi_fir_io_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_fir_io_RRESP\" :  \"" << s_axi_fir_io_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_fir_io_BVALID\" :  \"" << s_axi_fir_io_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_fir_io_BREADY\" :  \"" << s_axi_fir_io_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_fir_io_BRESP\" :  \"" << s_axi_fir_io_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

